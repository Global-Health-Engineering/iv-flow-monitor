
InfusionBA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d00  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e84  08003e84  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003e84  08003e84  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003e84  08003e84  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00004e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e88  08003e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08003e98  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08003e98  00005200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e39  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002429  00000000  00000000  00017e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de4  00000000  00000000  0001b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f70  00000000  00000000  0001c214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e6b  00000000  00000000  00033184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009873f  00000000  00000000  00047fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e072e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  000e0774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000e4828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003da0 	.word	0x08003da0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003da0 	.word	0x08003da0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fcc8 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80e 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa2c 	bl	8000680 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000228:	f000 f868 	bl	80002fc <MX_ADC1_Init>
  MX_RTC_Init();
 800022c:	f000 f8d2 	bl	80003d4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000230:	f000 f8fe 	bl	8000430 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000234:	f000 f93a 	bl	80004ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f9ee 	bl	8000618 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	e7fd      	b.n	800023c <main+0x24>

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b093      	sub	sp, #76	@ 0x4c
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	2414      	movs	r4, #20
 8000248:	193b      	adds	r3, r7, r4
 800024a:	0018      	movs	r0, r3
 800024c:	2334      	movs	r3, #52	@ 0x34
 800024e:	001a      	movs	r2, r3
 8000250:	2100      	movs	r1, #0
 8000252:	f003 fd79 	bl	8003d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	0018      	movs	r0, r3
 800025a:	2310      	movs	r3, #16
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f003 fd72 	bl	8003d48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f001 fbdb 	bl	8001a24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	220a      	movs	r2, #10
 8000272:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2280      	movs	r2, #128	@ 0x80
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800027c:	0021      	movs	r1, r4
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2240      	movs	r2, #64	@ 0x40
 8000288:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2201      	movs	r2, #1
 800028e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2202      	movs	r2, #2
 8000294:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2202      	movs	r2, #2
 800029a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2208      	movs	r2, #8
 80002a6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2280      	movs	r2, #128	@ 0x80
 80002ac:	0292      	lsls	r2, r2, #10
 80002ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	0592      	lsls	r2, r2, #22
 80002b6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 fbfe 	bl	8001abc <HAL_RCC_OscConfig>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002c4:	f000 fa6a 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2207      	movs	r2, #7
 80002cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2202      	movs	r2, #2
 80002d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2102      	movs	r1, #2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fef9 	bl	80020dc <HAL_RCC_ClockConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002ee:	f000 fa55 	bl	800079c <Error_Handler>
  }
}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b013      	add	sp, #76	@ 0x4c
 80002f8:	bd90      	pop	{r4, r7, pc}
	...

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	230c      	movs	r3, #12
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f003 fd1c 	bl	8003d48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000310:	4b2d      	ldr	r3, [pc, #180]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000312:	4a2e      	ldr	r2, [pc, #184]	@ (80003cc <MX_ADC1_Init+0xd0>)
 8000314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000316:	4b2c      	ldr	r3, [pc, #176]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000318:	2280      	movs	r2, #128	@ 0x80
 800031a:	05d2      	lsls	r2, r2, #23
 800031c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031e:	4b2a      	ldr	r3, [pc, #168]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000324:	4b28      	ldr	r3, [pc, #160]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b27      	ldr	r3, [pc, #156]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000330:	4b25      	ldr	r3, [pc, #148]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000332:	2204      	movs	r2, #4
 8000334:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000336:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800033c:	4b22      	ldr	r3, [pc, #136]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800033e:	2200      	movs	r2, #0
 8000340:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000342:	4b21      	ldr	r3, [pc, #132]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000344:	2200      	movs	r2, #0
 8000346:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000348:	4b1f      	ldr	r3, [pc, #124]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800034a:	2201      	movs	r2, #1
 800034c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b1e      	ldr	r3, [pc, #120]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000350:	2220      	movs	r2, #32
 8000352:	2100      	movs	r1, #0
 8000354:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000356:	4b1c      	ldr	r3, [pc, #112]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000358:	2200      	movs	r2, #0
 800035a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b1a      	ldr	r3, [pc, #104]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800035e:	2200      	movs	r2, #0
 8000360:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000362:	4b19      	ldr	r3, [pc, #100]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000364:	222c      	movs	r2, #44	@ 0x2c
 8000366:	2100      	movs	r1, #0
 8000368:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036a:	4b17      	ldr	r3, [pc, #92]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800036c:	2200      	movs	r2, #0
 800036e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000376:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800037c:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800037e:	223c      	movs	r2, #60	@ 0x3c
 8000380:	2100      	movs	r1, #0
 8000382:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000386:	2200      	movs	r2, #0
 8000388:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fd93 	bl	8000eb8 <HAL_ADC_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000396:	f000 fa01 	bl	800079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4a0c      	ldr	r2, [pc, #48]	@ (80003d0 <MX_ADC1_Init+0xd4>)
 800039e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ac:	1d3a      	adds	r2, r7, #4
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 ff28 	bl	8001208 <HAL_ADC_ConfigChannel>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003bc:	f000 f9ee 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c0:	46c0      	nop			@ (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b004      	add	sp, #16
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000028 	.word	0x20000028
 80003cc:	40012400 	.word	0x40012400
 80003d0:	0c000008 	.word	0x0c000008

080003d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003d8:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <MX_RTC_Init+0x54>)
 80003da:	4a14      	ldr	r2, [pc, #80]	@ (800042c <MX_RTC_Init+0x58>)
 80003dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <MX_RTC_Init+0x54>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MX_RTC_Init+0x54>)
 80003e6:	227f      	movs	r2, #127	@ 0x7f
 80003e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <MX_RTC_Init+0x54>)
 80003ec:	22ff      	movs	r2, #255	@ 0xff
 80003ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000428 <MX_RTC_Init+0x54>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_RTC_Init+0x54>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <MX_RTC_Init+0x54>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000402:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_RTC_Init+0x54>)
 8000404:	2280      	movs	r2, #128	@ 0x80
 8000406:	05d2      	lsls	r2, r2, #23
 8000408:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800040a:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <MX_RTC_Init+0x54>)
 800040c:	2200      	movs	r2, #0
 800040e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000410:	4b05      	ldr	r3, [pc, #20]	@ (8000428 <MX_RTC_Init+0x54>)
 8000412:	0018      	movs	r0, r3
 8000414:	f002 f932 	bl	800267c <HAL_RTC_Init>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800041c:	f000 f9be 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	2000008c 	.word	0x2000008c
 800042c:	40002800 	.word	0x40002800

08000430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000436:	4a1c      	ldr	r2, [pc, #112]	@ (80004a8 <MX_SPI1_Init+0x78>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800043c:	2282      	movs	r2, #130	@ 0x82
 800043e:	0052      	lsls	r2, r2, #1
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000448:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800044a:	22e0      	movs	r2, #224	@ 0xe0
 800044c:	00d2      	lsls	r2, r2, #3
 800044e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800045e:	2280      	movs	r2, #128	@ 0x80
 8000460:	0092      	lsls	r2, r2, #2
 8000462:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800047e:	2207      	movs	r2, #7
 8000480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800048a:	2208      	movs	r2, #8
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048e:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fa41 	bl	8002918 <HAL_SPI_Init>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800049a:	f000 f97f 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200000b8 	.word	0x200000b8
 80004a8:	40013000 	.word	0x40013000

080004ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b098      	sub	sp, #96	@ 0x60
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b2:	2354      	movs	r3, #84	@ 0x54
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	0018      	movs	r0, r3
 80004b8:	230c      	movs	r3, #12
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 fc43 	bl	8003d48 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	2338      	movs	r3, #56	@ 0x38
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	231c      	movs	r3, #28
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 fc3b 	bl	8003d48 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2334      	movs	r3, #52	@ 0x34
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 fc34 	bl	8003d48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000610 <MX_TIM1_Init+0x164>)
 80004e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000614 <MX_TIM1_Init+0x168>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80004e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000610 <MX_TIM1_Init+0x164>)
 80004e8:	223f      	movs	r2, #63	@ 0x3f
 80004ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b48      	ldr	r3, [pc, #288]	@ (8000610 <MX_TIM1_Init+0x164>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80004f2:	4b47      	ldr	r3, [pc, #284]	@ (8000610 <MX_TIM1_Init+0x164>)
 80004f4:	22f9      	movs	r2, #249	@ 0xf9
 80004f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b45      	ldr	r3, [pc, #276]	@ (8000610 <MX_TIM1_Init+0x164>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fe:	4b44      	ldr	r3, [pc, #272]	@ (8000610 <MX_TIM1_Init+0x164>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000504:	4b42      	ldr	r3, [pc, #264]	@ (8000610 <MX_TIM1_Init+0x164>)
 8000506:	2280      	movs	r2, #128	@ 0x80
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800050a:	4b41      	ldr	r3, [pc, #260]	@ (8000610 <MX_TIM1_Init+0x164>)
 800050c:	0018      	movs	r0, r3
 800050e:	f002 fabb 	bl	8002a88 <HAL_TIM_PWM_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000516:	f000 f941 	bl	800079c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051a:	2154      	movs	r1, #84	@ 0x54
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800052e:	187a      	adds	r2, r7, r1
 8000530:	4b37      	ldr	r3, [pc, #220]	@ (8000610 <MX_TIM1_Init+0x164>)
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f002 ff15 	bl	8003364 <HAL_TIMEx_MasterConfigSynchronization>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800053e:	f000 f92d 	bl	800079c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000542:	2138      	movs	r1, #56	@ 0x38
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2260      	movs	r2, #96	@ 0x60
 8000548:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056e:	1879      	adds	r1, r7, r1
 8000570:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <MX_TIM1_Init+0x164>)
 8000572:	2200      	movs	r2, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fadf 	bl	8002b38 <HAL_TIM_PWM_ConfigChannel>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800057e:	f000 f90d 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000582:	2338      	movs	r3, #56	@ 0x38
 8000584:	18f9      	adds	r1, r7, r3
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <MX_TIM1_Init+0x164>)
 8000588:	2204      	movs	r2, #4
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fad4 	bl	8002b38 <HAL_TIM_PWM_ConfigChannel>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000594:	f000 f902 	bl	800079c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	0192      	lsls	r2, r2, #6
 80005bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2280      	movs	r2, #128	@ 0x80
 80005d4:	0492      	lsls	r2, r2, #18
 80005d6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005ea:	1d3a      	adds	r2, r7, #4
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <MX_TIM1_Init+0x164>)
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 ff19 	bl	8003428 <HAL_TIMEx_ConfigBreakDeadTime>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80005fa:	f000 f8cf 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005fe:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <MX_TIM1_Init+0x164>)
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f9e1 	bl	80009c8 <HAL_TIM_MspPostInit>

}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b018      	add	sp, #96	@ 0x60
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	2000011c 	.word	0x2000011c
 8000614:	40012c00 	.word	0x40012c00

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_USART2_UART_Init+0x64>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 8000624:	22e1      	movs	r2, #225	@ 0xe1
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065a:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <MX_USART2_UART_Init+0x60>)
 8000662:	0018      	movs	r0, r3
 8000664:	f002 ff7c 	bl	8003560 <HAL_UART_Init>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800066c:	f000 f896 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	20000168 	.word	0x20000168
 800067c:	40004400 	.word	0x40004400

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b089      	sub	sp, #36	@ 0x24
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	240c      	movs	r4, #12
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2314      	movs	r3, #20
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f003 fb59 	bl	8003d48 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <MX_GPIO_Init+0x110>)
 8000698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800069a:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <MX_GPIO_Init+0x110>)
 800069c:	2104      	movs	r1, #4
 800069e:	430a      	orrs	r2, r1
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000790 <MX_GPIO_Init+0x110>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a6:	2204      	movs	r2, #4
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b38      	ldr	r3, [pc, #224]	@ (8000790 <MX_GPIO_Init+0x110>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <MX_GPIO_Init+0x110>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ba:	4b35      	ldr	r3, [pc, #212]	@ (8000790 <MX_GPIO_Init+0x110>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b32      	ldr	r3, [pc, #200]	@ (8000790 <MX_GPIO_Init+0x110>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b31      	ldr	r3, [pc, #196]	@ (8000790 <MX_GPIO_Init+0x110>)
 80006cc:	2102      	movs	r1, #2
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000790 <MX_GPIO_Init+0x110>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2202      	movs	r2, #2
 80006d8:	4013      	ands	r3, r2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80006de:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	2103      	movs	r1, #3
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 f97f 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_MODE_CTRL_GPIO_Port, BOOST_MODE_CTRL_Pin, GPIO_PIN_SET);
 80006ea:	2380      	movs	r3, #128	@ 0x80
 80006ec:	015b      	lsls	r3, r3, #5
 80006ee:	4829      	ldr	r0, [pc, #164]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	0019      	movs	r1, r3
 80006f4:	f001 f978 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2201      	movs	r2, #1
 8000708:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2202      	movs	r2, #2
 800070e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000710:	193b      	adds	r3, r7, r4
 8000712:	4a20      	ldr	r2, [pc, #128]	@ (8000794 <MX_GPIO_Init+0x114>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f001 f802 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin BOOST_MODE_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|BOOST_MODE_CTRL_Pin;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <MX_GPIO_Init+0x118>)
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2201      	movs	r2, #1
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	193b      	adds	r3, r7, r4
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <MX_GPIO_Init+0x114>)
 8000738:	0019      	movs	r1, r3
 800073a:	0010      	movs	r0, r2
 800073c:	f000 fff0 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : DROP_INT_Pin */
  GPIO_InitStruct.Pin = DROP_INT_Pin;
 8000740:	0021      	movs	r1, r4
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	00d2      	lsls	r2, r2, #3
 8000748:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2284      	movs	r2, #132	@ 0x84
 800074e:	0392      	lsls	r2, r2, #14
 8000750:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DROP_INT_GPIO_Port, &GPIO_InitStruct);
 8000758:	000c      	movs	r4, r1
 800075a:	187b      	adds	r3, r7, r1
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <MX_GPIO_Init+0x114>)
 800075e:	0019      	movs	r1, r3
 8000760:	0010      	movs	r0, r2
 8000762:	f000 ffdd 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_MINUS_Pin BTN_PLUS_Pin BTN_MODE_Pin BTN_MUTE_Pin */
  GPIO_InitStruct.Pin = BTN_MINUS_Pin|BTN_PLUS_Pin|BTN_MODE_Pin|BTN_MUTE_Pin;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	22f0      	movs	r2, #240	@ 0xf0
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	187b      	adds	r3, r7, r1
 800077e:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <MX_GPIO_Init+0x114>)
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f000 ffcc 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b009      	add	sp, #36	@ 0x24
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	50000400 	.word	0x50000400
 8000798:	00001002 	.word	0x00001002

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <HAL_MspInit+0x44>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <HAL_MspInit+0x44>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <HAL_MspInit+0x44>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <HAL_MspInit+0x44>)
 80007c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_MspInit+0x44>)
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	0549      	lsls	r1, r1, #21
 80007d0:	430a      	orrs	r2, r1
 80007d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <HAL_MspInit+0x44>)
 80007d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	055b      	lsls	r3, r3, #21
 80007dc:	4013      	ands	r3, r2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b08b      	sub	sp, #44	@ 0x2c
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	2414      	movs	r4, #20
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	0018      	movs	r0, r3
 80007fe:	2314      	movs	r3, #20
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f003 faa0 	bl	8003d48 <memset>
  if(hadc->Instance==ADC1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <HAL_ADC_MspInit+0x80>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d129      	bne.n	8000866 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <HAL_ADC_MspInit+0x84>)
 8000814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <HAL_ADC_MspInit+0x84>)
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	0349      	lsls	r1, r1, #13
 800081c:	430a      	orrs	r2, r1
 800081e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <HAL_ADC_MspInit+0x84>)
 8000822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	035b      	lsls	r3, r3, #13
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <HAL_ADC_MspInit+0x84>)
 8000830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <HAL_ADC_MspInit+0x84>)
 8000834:	2101      	movs	r1, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	635a      	str	r2, [r3, #52]	@ 0x34
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_ADC_MspInit+0x84>)
 800083c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = PD_ADC_Pin|GPIO_PIN_4;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2218      	movs	r2, #24
 800084a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2203      	movs	r2, #3
 8000850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	193a      	adds	r2, r7, r4
 800085a:	23a0      	movs	r3, #160	@ 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 ff5d 	bl	8001720 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b00b      	add	sp, #44	@ 0x2c
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	40012400 	.word	0x40012400
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	@ 0x2c
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000880:	2410      	movs	r4, #16
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	2318      	movs	r3, #24
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f003 fa5c 	bl	8003d48 <memset>
  if(hrtc->Instance==RTC)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a15      	ldr	r2, [pc, #84]	@ (80008ec <HAL_RTC_MspInit+0x74>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d124      	bne.n	80008e4 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	0292      	lsls	r2, r2, #10
 80008a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fdbf 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008b6:	f7ff ff71 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_RTC_MspInit+0x78>)
 80008bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_RTC_MspInit+0x78>)
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	0209      	lsls	r1, r1, #8
 80008c4:	430a      	orrs	r2, r1
 80008c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_RTC_MspInit+0x78>)
 80008ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_RTC_MspInit+0x78>)
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	00c9      	lsls	r1, r1, #3
 80008d2:	430a      	orrs	r2, r1
 80008d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_RTC_MspInit+0x78>)
 80008d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008da:	2380      	movs	r3, #128	@ 0x80
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	4013      	ands	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b00b      	add	sp, #44	@ 0x2c
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	40002800 	.word	0x40002800
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b08b      	sub	sp, #44	@ 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	2414      	movs	r4, #20
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	2314      	movs	r3, #20
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f003 fa1e 	bl	8003d48 <memset>
  if(hspi->Instance==SPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <HAL_SPI_MspInit+0x8c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d130      	bne.n	8000978 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_SPI_MspInit+0x90>)
 8000918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <HAL_SPI_MspInit+0x90>)
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0149      	lsls	r1, r1, #5
 8000920:	430a      	orrs	r2, r1
 8000922:	641a      	str	r2, [r3, #64]	@ 0x40
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_SPI_MspInit+0x90>)
 8000926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	015b      	lsls	r3, r3, #5
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_SPI_MspInit+0x90>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <HAL_SPI_MspInit+0x90>)
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <HAL_SPI_MspInit+0x90>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000942:	2201      	movs	r2, #1
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	22a0      	movs	r2, #160	@ 0xa0
 8000950:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	23a0      	movs	r3, #160	@ 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fed4 	bl	8001720 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b00b      	add	sp, #44	@ 0x2c
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40013000 	.word	0x40013000
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_TIM_PWM_MspInit+0x38>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10d      	bne.n	80009b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800099c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80009a0:	2180      	movs	r1, #128	@ 0x80
 80009a2:	0109      	lsls	r1, r1, #4
 80009a4:	430a      	orrs	r2, r1
 80009a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80009aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08b      	sub	sp, #44	@ 0x2c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	2414      	movs	r4, #20
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	2314      	movs	r3, #20
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f003 f9b4 	bl	8003d48 <memset>
  if(htim->Instance==TIM1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a25      	ldr	r2, [pc, #148]	@ (8000a7c <HAL_TIM_MspPostInit+0xb4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d144      	bne.n	8000a74 <HAL_TIM_MspPostInit+0xac>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <HAL_TIM_MspPostInit+0xb8>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ee:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <HAL_TIM_MspPostInit+0xb8>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f6:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <HAL_TIM_MspPostInit+0xb8>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <HAL_TIM_MspPostInit+0xb8>)
 8000a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a06:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <HAL_TIM_MspPostInit+0xb8>)
 8000a08:	2102      	movs	r1, #2
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <HAL_TIM_MspPostInit+0xb8>)
 8000a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a12:	2202      	movs	r2, #2
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2280      	movs	r2, #128	@ 0x80
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2202      	movs	r2, #2
 8000a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2202      	movs	r2, #2
 8000a38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	193a      	adds	r2, r7, r4
 8000a3c:	23a0      	movs	r3, #160	@ 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fe6c 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_CTRL_Pin;
 8000a48:	0021      	movs	r1, r4
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2202      	movs	r2, #2
 8000a54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2201      	movs	r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_TIM_MspPostInit+0xbc>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0010      	movs	r0, r2
 8000a70:	f000 fe56 	bl	8001720 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00b      	add	sp, #44	@ 0x2c
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40012c00 	.word	0x40012c00
 8000a80:	40021000 	.word	0x40021000
 8000a84:	50000400 	.word	0x50000400

08000a88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b08b      	sub	sp, #44	@ 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	2414      	movs	r4, #20
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	0018      	movs	r0, r3
 8000a96:	2314      	movs	r3, #20
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f003 f954 	bl	8003d48 <memset>
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <HAL_UART_MspInit+0x8c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d130      	bne.n	8000b0c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000aac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000ab0:	2180      	movs	r1, #128	@ 0x80
 8000ab2:	0289      	lsls	r1, r1, #10
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	029b      	lsls	r3, r3, #10
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|GPIO_PIN_15;
 8000ade:	0021      	movs	r1, r4
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <HAL_UART_MspInit+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2202      	movs	r2, #2
 8000aea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2201      	movs	r2, #1
 8000afc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	187a      	adds	r2, r7, r1
 8000b00:	23a0      	movs	r3, #160	@ 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fe0a 	bl	8001720 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b00b      	add	sp, #44	@ 0x2c
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	00008004 	.word	0x00008004

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	e7fd      	b.n	8000b24 <NMI_Handler+0x4>

08000b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	e7fd      	b.n	8000b2c <HardFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f89c 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b60:	f7ff fff7 	bl	8000b52 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b8a:	f003 f8e5 	bl	8003d58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b8e:	f7ff fb43 	bl	8000218 <main>

08000b92 <LoopForever>:

LoopForever:
  b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   r0, =_estack
 8000b94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba0:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba8:	20000200 	.word	0x20000200

08000bac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_Init+0x3c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_Init+0x3c>)
 8000bc2:	2180      	movs	r1, #128	@ 0x80
 8000bc4:	0049      	lsls	r1, r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f810 	bl	8000bf0 <HAL_InitTick>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	e001      	b.n	8000be0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fde4 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40022000 	.word	0x40022000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_InitTick+0x88>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d02b      	beq.n	8000c60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_InitTick+0x8c>)
 8000c0a:	681c      	ldr	r4, [r3, #0]
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <HAL_InitTick+0x88>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	0019      	movs	r1, r3
 8000c12:	23fa      	movs	r3, #250	@ 0xfa
 8000c14:	0098      	lsls	r0, r3, #2
 8000c16:	f7ff fa73 	bl	8000100 <__udivsi3>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	0020      	movs	r0, r4
 8000c20:	f7ff fa6e 	bl	8000100 <__udivsi3>
 8000c24:	0003      	movs	r3, r0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fd6d 	bl	8001706 <HAL_SYSTICK_Config>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d112      	bne.n	8000c56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d80a      	bhi.n	8000c4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fd4c 	bl	80016dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_InitTick+0x90>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e00d      	b.n	8000c68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e008      	b.n	8000c68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e003      	b.n	8000c68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	781b      	ldrb	r3, [r3, #0]
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b005      	add	sp, #20
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	18d2      	adds	r2, r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	200001fc 	.word	0x200001fc

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	@ (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	200001fc 	.word	0x200001fc

08000cbc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ccc:	401a      	ands	r2, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	fe3fffff 	.word	0xfe3fffff

08000ce4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	23e0      	movs	r3, #224	@ 0xe0
 8000cf2:	045b      	lsls	r3, r3, #17
 8000cf4:	4013      	ands	r3, r2
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	2104      	movs	r1, #4
 8000d12:	400a      	ands	r2, r1
 8000d14:	2107      	movs	r1, #7
 8000d16:	4091      	lsls	r1, r2
 8000d18:	000a      	movs	r2, r1
 8000d1a:	43d2      	mvns	r2, r2
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2104      	movs	r1, #4
 8000d22:	400b      	ands	r3, r1
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4099      	lsls	r1, r3
 8000d28:	000b      	movs	r3, r1
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b004      	add	sp, #16
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	2104      	movs	r1, #4
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	4091      	lsls	r1, r2
 8000d50:	000a      	movs	r2, r1
 8000d52:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2104      	movs	r1, #4
 8000d58:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d5a:	40da      	lsrs	r2, r3
 8000d5c:	0013      	movs	r3, r2
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	211f      	movs	r1, #31
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	4091      	lsls	r1, r2
 8000d80:	000a      	movs	r2, r1
 8000d82:	43d2      	mvns	r2, r2
 8000d84:	401a      	ands	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0e9b      	lsrs	r3, r3, #26
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	4019      	ands	r1, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	201f      	movs	r0, #31
 8000d92:	4003      	ands	r3, r0
 8000d94:	4099      	lsls	r1, r3
 8000d96:	000b      	movs	r3, r1
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	035b      	lsls	r3, r3, #13
 8000db8:	0b5b      	lsrs	r3, r3, #13
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	0352      	lsls	r2, r2, #13
 8000dda:	0b52      	lsrs	r2, r2, #13
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	0212      	lsls	r2, r2, #8
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	4904      	ldr	r1, [pc, #16]	@ (8000e20 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e0e:	400b      	ands	r3, r1
 8000e10:	431a      	orrs	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b004      	add	sp, #16
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	07ffff00 	.word	0x07ffff00

08000e24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	0552      	lsls	r2, r2, #21
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	6fffffe8 	.word	0x6fffffe8

08000e4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	055b      	lsls	r3, r3, #21
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	2380      	movs	r3, #128	@ 0x80
 8000e60:	055b      	lsls	r3, r3, #21
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d101      	bne.n	8000e6a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <LL_ADC_IsEnabled+0x18>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <LL_ADC_IsEnabled+0x1a>
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	0018      	movs	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d101      	bne.n	8000eae <LL_ADC_REG_IsConversionOngoing+0x18>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec0:	231f      	movs	r3, #31
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e17f      	b.n	80011de <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff fc81 	bl	80007f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2254      	movs	r2, #84	@ 0x54
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ffa3 	bl	8000e4c <LL_ADC_IsInternalRegulatorEnabled>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d115      	bne.n	8000f36 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff ff88 	bl	8000e24 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f14:	4bb4      	ldr	r3, [pc, #720]	@ (80011e8 <HAL_ADC_Init+0x330>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	49b4      	ldr	r1, [pc, #720]	@ (80011ec <HAL_ADC_Init+0x334>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff f8f0 	bl	8000100 <__udivsi3>
 8000f20:	0003      	movs	r3, r0
 8000f22:	3301      	adds	r3, #1
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f28:	e002      	b.n	8000f30 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f9      	bne.n	8000f2a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff ff86 	bl	8000e4c <LL_ADC_IsInternalRegulatorEnabled>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d10f      	bne.n	8000f64 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f48:	2210      	movs	r2, #16
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f54:	2201      	movs	r2, #1
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f5c:	231f      	movs	r3, #31
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff ff94 	bl	8000e96 <LL_ADC_REG_IsConversionOngoing>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	2210      	movs	r2, #16
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d000      	beq.n	8000f7e <HAL_ADC_Init+0xc6>
 8000f7c:	e122      	b.n	80011c4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d000      	beq.n	8000f86 <HAL_ADC_Init+0xce>
 8000f84:	e11e      	b.n	80011c4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	4a99      	ldr	r2, [pc, #612]	@ (80011f0 <HAL_ADC_Init+0x338>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2202      	movs	r2, #2
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff ff6a 	bl	8000e74 <LL_ADC_IsEnabled>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d000      	beq.n	8000fa6 <HAL_ADC_Init+0xee>
 8000fa4:	e0ad      	b.n	8001102 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7e1b      	ldrb	r3, [r3, #24]
 8000fae:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000fb0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7e5b      	ldrb	r3, [r3, #25]
 8000fb6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fb8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7e9b      	ldrb	r3, [r3, #26]
 8000fbe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fc0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_ADC_Init+0x118>
 8000fca:	2380      	movs	r3, #128	@ 0x80
 8000fcc:	015b      	lsls	r3, r3, #5
 8000fce:	e000      	b.n	8000fd2 <HAL_ADC_Init+0x11a>
 8000fd0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fd2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fd8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da04      	bge.n	8000fec <HAL_ADC_Init+0x134>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	085b      	lsrs	r3, r3, #1
 8000fea:	e001      	b.n	8000ff0 <HAL_ADC_Init+0x138>
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000ff0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	212c      	movs	r1, #44	@ 0x2c
 8000ff6:	5c5b      	ldrb	r3, [r3, r1]
 8000ff8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ffa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2220      	movs	r2, #32
 8001006:	5c9b      	ldrb	r3, [r3, r2]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d115      	bne.n	8001038 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7e9b      	ldrb	r3, [r3, #26]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d105      	bne.n	8001020 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2280      	movs	r2, #128	@ 0x80
 8001018:	0252      	lsls	r2, r2, #9
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	e00b      	b.n	8001038 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001024:	2220      	movs	r2, #32
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001030:	2201      	movs	r2, #1
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00a      	beq.n	8001056 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001044:	23e0      	movs	r3, #224	@ 0xe0
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800104e:	4313      	orrs	r3, r2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a65      	ldr	r2, [pc, #404]	@ (80011f4 <HAL_ADC_Init+0x33c>)
 800105e:	4013      	ands	r3, r2
 8001060:	0019      	movs	r1, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	430a      	orrs	r2, r1
 800106a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	0f9b      	lsrs	r3, r3, #30
 8001072:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001078:	4313      	orrs	r3, r2
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4313      	orrs	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	223c      	movs	r2, #60	@ 0x3c
 8001084:	5c9b      	ldrb	r3, [r3, r2]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d111      	bne.n	80010ae <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	0f9b      	lsrs	r3, r3, #30
 8001090:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001096:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800109c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80010a2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	2201      	movs	r2, #1
 80010aa:	4313      	orrs	r3, r2
 80010ac:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	4a50      	ldr	r2, [pc, #320]	@ (80011f8 <HAL_ADC_Init+0x340>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	0019      	movs	r1, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	23c0      	movs	r3, #192	@ 0xc0
 80010ca:	061b      	lsls	r3, r3, #24
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d018      	beq.n	8001102 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	05db      	lsls	r3, r3, #23
 80010d8:	429a      	cmp	r2, r3
 80010da:	d012      	beq.n	8001102 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	061b      	lsls	r3, r3, #24
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d00c      	beq.n	8001102 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010e8:	4b44      	ldr	r3, [pc, #272]	@ (80011fc <HAL_ADC_Init+0x344>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a44      	ldr	r2, [pc, #272]	@ (8001200 <HAL_ADC_Init+0x348>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	0019      	movs	r1, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	23f0      	movs	r3, #240	@ 0xf0
 80010f8:	039b      	lsls	r3, r3, #14
 80010fa:	401a      	ands	r2, r3
 80010fc:	4b3f      	ldr	r3, [pc, #252]	@ (80011fc <HAL_ADC_Init+0x344>)
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800110a:	001a      	movs	r2, r3
 800110c:	2100      	movs	r1, #0
 800110e:	f7ff fdf6 	bl	8000cfe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111a:	493a      	ldr	r1, [pc, #232]	@ (8001204 <HAL_ADC_Init+0x34c>)
 800111c:	001a      	movs	r2, r3
 800111e:	f7ff fdee 	bl	8000cfe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2110      	movs	r1, #16
 8001136:	4249      	negs	r1, r1
 8001138:	430a      	orrs	r2, r1
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
 800113c:	e018      	b.n	8001170 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	2380      	movs	r3, #128	@ 0x80
 8001144:	039b      	lsls	r3, r3, #14
 8001146:	429a      	cmp	r2, r3
 8001148:	d112      	bne.n	8001170 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	3b01      	subs	r3, #1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	221c      	movs	r2, #28
 800115a:	4013      	ands	r3, r2
 800115c:	2210      	movs	r2, #16
 800115e:	4252      	negs	r2, r2
 8001160:	409a      	lsls	r2, r3
 8001162:	0011      	movs	r1, r2
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2100      	movs	r1, #0
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fdde 	bl	8000d38 <LL_ADC_GetSamplingTimeCommonChannels>
 800117c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001182:	429a      	cmp	r2, r3
 8001184:	d10b      	bne.n	800119e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	2203      	movs	r2, #3
 8001192:	4393      	bics	r3, r2
 8001194:	2201      	movs	r2, #1
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800119c:	e01c      	b.n	80011d8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	2212      	movs	r2, #18
 80011a4:	4393      	bics	r3, r2
 80011a6:	2210      	movs	r2, #16
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b2:	2201      	movs	r2, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80011ba:	231f      	movs	r3, #31
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011c2:	e009      	b.n	80011d8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	2210      	movs	r2, #16
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011d0:	231f      	movs	r3, #31
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80011d8:	231f      	movs	r3, #31
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b008      	add	sp, #32
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	20000000 	.word	0x20000000
 80011ec:	00030d40 	.word	0x00030d40
 80011f0:	fffffefd 	.word	0xfffffefd
 80011f4:	ffde0201 	.word	0xffde0201
 80011f8:	1ffffc02 	.word	0x1ffffc02
 80011fc:	40012708 	.word	0x40012708
 8001200:	ffc3ffff 	.word	0xffc3ffff
 8001204:	07ffff04 	.word	0x07ffff04

08001208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001212:	2317      	movs	r3, #23
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2254      	movs	r2, #84	@ 0x54
 8001222:	5c9b      	ldrb	r3, [r3, r2]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ADC_ConfigChannel+0x24>
 8001228:	2302      	movs	r3, #2
 800122a:	e1c0      	b.n	80015ae <HAL_ADC_ConfigChannel+0x3a6>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2254      	movs	r2, #84	@ 0x54
 8001230:	2101      	movs	r1, #1
 8001232:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff fe2c 	bl	8000e96 <LL_ADC_REG_IsConversionOngoing>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d000      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x3c>
 8001242:	e1a3      	b.n	800158c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d100      	bne.n	800124e <HAL_ADC_ConfigChannel+0x46>
 800124c:	e143      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	429a      	cmp	r2, r3
 8001258:	d004      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800125e:	4ac1      	ldr	r2, [pc, #772]	@ (8001564 <HAL_ADC_ConfigChannel+0x35c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d108      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0019      	movs	r1, r3
 800126e:	0010      	movs	r0, r2
 8001270:	f7ff fd99 	bl	8000da6 <LL_ADC_REG_SetSequencerChAdd>
 8001274:	e0c9      	b.n	800140a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	211f      	movs	r1, #31
 8001280:	400b      	ands	r3, r1
 8001282:	210f      	movs	r1, #15
 8001284:	4099      	lsls	r1, r3
 8001286:	000b      	movs	r3, r1
 8001288:	43db      	mvns	r3, r3
 800128a:	4013      	ands	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	035b      	lsls	r3, r3, #13
 8001294:	0b5b      	lsrs	r3, r3, #13
 8001296:	d105      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x9c>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0e9b      	lsrs	r3, r3, #26
 800129e:	221f      	movs	r2, #31
 80012a0:	4013      	ands	r3, r2
 80012a2:	e098      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	d000      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0xa8>
 80012ae:	e091      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2202      	movs	r2, #2
 80012b6:	4013      	ands	r3, r2
 80012b8:	d000      	beq.n	80012bc <HAL_ADC_ConfigChannel+0xb4>
 80012ba:	e089      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x1c8>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2204      	movs	r2, #4
 80012c2:	4013      	ands	r3, r2
 80012c4:	d000      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0xc0>
 80012c6:	e081      	b.n	80013cc <HAL_ADC_ConfigChannel+0x1c4>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2208      	movs	r2, #8
 80012ce:	4013      	ands	r3, r2
 80012d0:	d000      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0xcc>
 80012d2:	e079      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x1c0>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2210      	movs	r2, #16
 80012da:	4013      	ands	r3, r2
 80012dc:	d000      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0xd8>
 80012de:	e071      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x1bc>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2220      	movs	r2, #32
 80012e6:	4013      	ands	r3, r2
 80012e8:	d000      	beq.n	80012ec <HAL_ADC_ConfigChannel+0xe4>
 80012ea:	e069      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x1b8>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2240      	movs	r2, #64	@ 0x40
 80012f2:	4013      	ands	r3, r2
 80012f4:	d000      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0xf0>
 80012f6:	e061      	b.n	80013bc <HAL_ADC_ConfigChannel+0x1b4>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2280      	movs	r2, #128	@ 0x80
 80012fe:	4013      	ands	r3, r2
 8001300:	d000      	beq.n	8001304 <HAL_ADC_ConfigChannel+0xfc>
 8001302:	e059      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1b0>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4013      	ands	r3, r2
 800130e:	d151      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1ac>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d149      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x1a8>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4013      	ands	r3, r2
 8001326:	d141      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1a4>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4013      	ands	r3, r2
 8001332:	d139      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1a0>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	015b      	lsls	r3, r3, #5
 800133c:	4013      	ands	r3, r2
 800133e:	d131      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x19c>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	019b      	lsls	r3, r3, #6
 8001348:	4013      	ands	r3, r2
 800134a:	d129      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x198>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	01db      	lsls	r3, r3, #7
 8001354:	4013      	ands	r3, r2
 8001356:	d121      	bne.n	800139c <HAL_ADC_ConfigChannel+0x194>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4013      	ands	r3, r2
 8001362:	d119      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x190>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	4013      	ands	r3, r2
 800136e:	d111      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x18c>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d109      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x188>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	02db      	lsls	r3, r3, #11
 8001384:	4013      	ands	r3, r2
 8001386:	d001      	beq.n	800138c <HAL_ADC_ConfigChannel+0x184>
 8001388:	2312      	movs	r3, #18
 800138a:	e024      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 800138c:	2300      	movs	r3, #0
 800138e:	e022      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 8001390:	2311      	movs	r3, #17
 8001392:	e020      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 8001394:	2310      	movs	r3, #16
 8001396:	e01e      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 8001398:	230f      	movs	r3, #15
 800139a:	e01c      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 800139c:	230e      	movs	r3, #14
 800139e:	e01a      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013a0:	230d      	movs	r3, #13
 80013a2:	e018      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013a4:	230c      	movs	r3, #12
 80013a6:	e016      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013a8:	230b      	movs	r3, #11
 80013aa:	e014      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013ac:	230a      	movs	r3, #10
 80013ae:	e012      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013b0:	2309      	movs	r3, #9
 80013b2:	e010      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013b4:	2308      	movs	r3, #8
 80013b6:	e00e      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013b8:	2307      	movs	r3, #7
 80013ba:	e00c      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013bc:	2306      	movs	r3, #6
 80013be:	e00a      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013c0:	2305      	movs	r3, #5
 80013c2:	e008      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e006      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e004      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1ce>
 80013d4:	2300      	movs	r3, #0
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	6852      	ldr	r2, [r2, #4]
 80013da:	201f      	movs	r0, #31
 80013dc:	4002      	ands	r2, r0
 80013de:	4093      	lsls	r3, r2
 80013e0:	000a      	movs	r2, r1
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d808      	bhi.n	800140a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	001a      	movs	r2, r3
 8001406:	f7ff fcae 	bl	8000d66 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	001a      	movs	r2, r3
 8001418:	f7ff fce8 	bl	8000dec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db00      	blt.n	8001426 <HAL_ADC_ConfigChannel+0x21e>
 8001424:	e0bc      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001426:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff fc5b 	bl	8000ce4 <LL_ADC_GetCommonPathInternalCh>
 800142e:	0003      	movs	r3, r0
 8001430:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4d      	ldr	r2, [pc, #308]	@ (800156c <HAL_ADC_ConfigChannel+0x364>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d122      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001444:	d11d      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2280      	movs	r2, #128	@ 0x80
 800144a:	0412      	lsls	r2, r2, #16
 800144c:	4313      	orrs	r3, r2
 800144e:	4a46      	ldr	r2, [pc, #280]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 8001450:	0019      	movs	r1, r3
 8001452:	0010      	movs	r0, r2
 8001454:	f7ff fc32 	bl	8000cbc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001458:	4b45      	ldr	r3, [pc, #276]	@ (8001570 <HAL_ADC_ConfigChannel+0x368>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4945      	ldr	r1, [pc, #276]	@ (8001574 <HAL_ADC_ConfigChannel+0x36c>)
 800145e:	0018      	movs	r0, r3
 8001460:	f7fe fe4e 	bl	8000100 <__udivsi3>
 8001464:	0003      	movs	r3, r0
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	0013      	movs	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	189b      	adds	r3, r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001472:	e002      	b.n	800147a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3b01      	subs	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f9      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001480:	e08e      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a3c      	ldr	r2, [pc, #240]	@ (8001578 <HAL_ADC_ConfigChannel+0x370>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d10e      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	045b      	lsls	r3, r3, #17
 8001492:	4013      	ands	r3, r2
 8001494:	d109      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	0452      	lsls	r2, r2, #17
 800149c:	4313      	orrs	r3, r2
 800149e:	4a32      	ldr	r2, [pc, #200]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 80014a0:	0019      	movs	r1, r3
 80014a2:	0010      	movs	r0, r2
 80014a4:	f7ff fc0a 	bl	8000cbc <LL_ADC_SetCommonPathInternalCh>
 80014a8:	e07a      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a33      	ldr	r2, [pc, #204]	@ (800157c <HAL_ADC_ConfigChannel+0x374>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d000      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x2ae>
 80014b4:	e074      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	03db      	lsls	r3, r3, #15
 80014bc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014be:	d000      	beq.n	80014c2 <HAL_ADC_ConfigChannel+0x2ba>
 80014c0:	e06e      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2280      	movs	r2, #128	@ 0x80
 80014c6:	03d2      	lsls	r2, r2, #15
 80014c8:	4313      	orrs	r3, r2
 80014ca:	4a27      	ldr	r2, [pc, #156]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f7ff fbf4 	bl	8000cbc <LL_ADC_SetCommonPathInternalCh>
 80014d4:	e064      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	429a      	cmp	r2, r3
 80014e0:	d004      	beq.n	80014ec <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001564 <HAL_ADC_ConfigChannel+0x35c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d107      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0019      	movs	r1, r3
 80014f6:	0010      	movs	r0, r2
 80014f8:	f7ff fc66 	bl	8000dc8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	da4d      	bge.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fbec 	bl	8000ce4 <LL_ADC_GetCommonPathInternalCh>
 800150c:	0003      	movs	r3, r0
 800150e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a15      	ldr	r2, [pc, #84]	@ (800156c <HAL_ADC_ConfigChannel+0x364>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d108      	bne.n	800152c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4a18      	ldr	r2, [pc, #96]	@ (8001580 <HAL_ADC_ConfigChannel+0x378>)
 800151e:	4013      	ands	r3, r2
 8001520:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 8001522:	0019      	movs	r1, r3
 8001524:	0010      	movs	r0, r2
 8001526:	f7ff fbc9 	bl	8000cbc <LL_ADC_SetCommonPathInternalCh>
 800152a:	e039      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a11      	ldr	r2, [pc, #68]	@ (8001578 <HAL_ADC_ConfigChannel+0x370>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d108      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <HAL_ADC_ConfigChannel+0x37c>)
 800153a:	4013      	ands	r3, r2
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 800153e:	0019      	movs	r1, r3
 8001540:	0010      	movs	r0, r2
 8001542:	f7ff fbbb 	bl	8000cbc <LL_ADC_SetCommonPathInternalCh>
 8001546:	e02b      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0b      	ldr	r2, [pc, #44]	@ (800157c <HAL_ADC_ConfigChannel+0x374>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d126      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_ADC_ConfigChannel+0x380>)
 8001556:	4013      	ands	r3, r2
 8001558:	4a03      	ldr	r2, [pc, #12]	@ (8001568 <HAL_ADC_ConfigChannel+0x360>)
 800155a:	0019      	movs	r1, r3
 800155c:	0010      	movs	r0, r2
 800155e:	f7ff fbad 	bl	8000cbc <LL_ADC_SetCommonPathInternalCh>
 8001562:	e01d      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x398>
 8001564:	80000004 	.word	0x80000004
 8001568:	40012708 	.word	0x40012708
 800156c:	b0001000 	.word	0xb0001000
 8001570:	20000000 	.word	0x20000000
 8001574:	00030d40 	.word	0x00030d40
 8001578:	b8004000 	.word	0xb8004000
 800157c:	b4002000 	.word	0xb4002000
 8001580:	ff7fffff 	.word	0xff7fffff
 8001584:	feffffff 	.word	0xfeffffff
 8001588:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	2220      	movs	r2, #32
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001598:	2317      	movs	r3, #23
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2254      	movs	r2, #84	@ 0x54
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80015a8:	2317      	movs	r3, #23
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b006      	add	sp, #24
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			@ (mov r8, r8)

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80015cc:	d828      	bhi.n	8001620 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <__NVIC_SetPriority+0xd4>)
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	33c0      	adds	r3, #192	@ 0xc0
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	589b      	ldr	r3, [r3, r2]
 80015de:	1dfa      	adds	r2, r7, #7
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	0011      	movs	r1, r2
 80015e4:	2203      	movs	r2, #3
 80015e6:	400a      	ands	r2, r1
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	21ff      	movs	r1, #255	@ 0xff
 80015ec:	4091      	lsls	r1, r2
 80015ee:	000a      	movs	r2, r1
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	401a      	ands	r2, r3
 80015f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	019b      	lsls	r3, r3, #6
 80015fa:	22ff      	movs	r2, #255	@ 0xff
 80015fc:	401a      	ands	r2, r3
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	0018      	movs	r0, r3
 8001604:	2303      	movs	r3, #3
 8001606:	4003      	ands	r3, r0
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160c:	481f      	ldr	r0, [pc, #124]	@ (800168c <__NVIC_SetPriority+0xd4>)
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	430a      	orrs	r2, r1
 8001618:	33c0      	adds	r3, #192	@ 0xc0
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800161e:	e031      	b.n	8001684 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <__NVIC_SetPriority+0xd8>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0019      	movs	r1, r3
 8001628:	230f      	movs	r3, #15
 800162a:	400b      	ands	r3, r1
 800162c:	3b08      	subs	r3, #8
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3306      	adds	r3, #6
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	3304      	adds	r3, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1dfa      	adds	r2, r7, #7
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	0011      	movs	r1, r2
 8001640:	2203      	movs	r2, #3
 8001642:	400a      	ands	r2, r1
 8001644:	00d2      	lsls	r2, r2, #3
 8001646:	21ff      	movs	r1, #255	@ 0xff
 8001648:	4091      	lsls	r1, r2
 800164a:	000a      	movs	r2, r1
 800164c:	43d2      	mvns	r2, r2
 800164e:	401a      	ands	r2, r3
 8001650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	019b      	lsls	r3, r3, #6
 8001656:	22ff      	movs	r2, #255	@ 0xff
 8001658:	401a      	ands	r2, r3
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	2303      	movs	r3, #3
 8001662:	4003      	ands	r3, r0
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <__NVIC_SetPriority+0xd8>)
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	001c      	movs	r4, r3
 8001670:	230f      	movs	r3, #15
 8001672:	4023      	ands	r3, r4
 8001674:	3b08      	subs	r3, #8
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	430a      	orrs	r2, r1
 800167a:	3306      	adds	r3, #6
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	18c3      	adds	r3, r0, r3
 8001680:	3304      	adds	r3, #4
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b003      	add	sp, #12
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	045b      	lsls	r3, r3, #17
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d301      	bcc.n	80016ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a8:	2301      	movs	r3, #1
 80016aa:	e010      	b.n	80016ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <SysTick_Config+0x44>)
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	3a01      	subs	r2, #1
 80016b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b4:	2301      	movs	r3, #1
 80016b6:	425b      	negs	r3, r3
 80016b8:	2103      	movs	r1, #3
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff ff7c 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <SysTick_Config+0x44>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <SysTick_Config+0x44>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	210f      	movs	r1, #15
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	1c02      	adds	r2, r0, #0
 80016ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ff5d 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ffbf 	bl	8001694 <SysTick_Config>
 8001716:	0003      	movs	r3, r0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e147      	b.n	80019c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4091      	lsls	r1, r2
 800173a:	000a      	movs	r2, r1
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d100      	bne.n	8001748 <HAL_GPIO_Init+0x28>
 8001746:	e138      	b.n	80019ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	4013      	ands	r3, r2
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	4013      	ands	r3, r2
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	409a      	lsls	r2, r3
 800176e:	0013      	movs	r3, r2
 8001770:	43da      	mvns	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	43da      	mvns	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	2201      	movs	r2, #1
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2203      	movs	r2, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d017      	beq.n	80017fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	409a      	lsls	r2, r3
 80017dc:	0013      	movs	r3, r2
 80017de:	43da      	mvns	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d123      	bne.n	8001852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	58d3      	ldr	r3, [r2, r3]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2207      	movs	r2, #7
 800181c:	4013      	ands	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	43da      	mvns	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2107      	movs	r1, #7
 8001836:	400b      	ands	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	6939      	ldr	r1, [r7, #16]
 8001850:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	401a      	ands	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	23c0      	movs	r3, #192	@ 0xc0
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	4013      	ands	r3, r2
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x174>
 8001892:	e092      	b.n	80019ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001894:	4a50      	ldr	r2, [pc, #320]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3318      	adds	r3, #24
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	589b      	ldr	r3, [r3, r2]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4013      	ands	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	220f      	movs	r2, #15
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	43da      	mvns	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	23a0      	movs	r3, #160	@ 0xa0
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	429a      	cmp	r2, r3
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0x1ca>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a45      	ldr	r2, [pc, #276]	@ (80019dc <HAL_GPIO_Init+0x2bc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00d      	beq.n	80018e6 <HAL_GPIO_Init+0x1c6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a44      	ldr	r2, [pc, #272]	@ (80019e0 <HAL_GPIO_Init+0x2c0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d007      	beq.n	80018e2 <HAL_GPIO_Init+0x1c2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a43      	ldr	r2, [pc, #268]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_GPIO_Init+0x1be>
 80018da:	2303      	movs	r3, #3
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x1cc>
 80018de:	2305      	movs	r3, #5
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x1cc>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x1cc>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x1cc>
 80018ea:	2300      	movs	r3, #0
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	2103      	movs	r1, #3
 80018f0:	400a      	ands	r2, r1
 80018f2:	00d2      	lsls	r2, r2, #3
 80018f4:	4093      	lsls	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018fc:	4936      	ldr	r1, [pc, #216]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3318      	adds	r3, #24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190a:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43da      	mvns	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	2380      	movs	r3, #128	@ 0x80
 8001920:	035b      	lsls	r3, r3, #13
 8001922:	4013      	ands	r3, r2
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800192e:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001934:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43da      	mvns	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	2380      	movs	r3, #128	@ 0x80
 800194a:	039b      	lsls	r3, r3, #14
 800194c:	4013      	ands	r3, r2
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001958:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800195e:	4a1e      	ldr	r2, [pc, #120]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 8001960:	2384      	movs	r3, #132	@ 0x84
 8001962:	58d3      	ldr	r3, [r2, r3]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43da      	mvns	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	4013      	ands	r3, r2
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001984:	4914      	ldr	r1, [pc, #80]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 8001986:	2284      	movs	r2, #132	@ 0x84
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800198c:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	58d3      	ldr	r3, [r2, r3]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	4013      	ands	r3, r2
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b2:	4909      	ldr	r1, [pc, #36]	@ (80019d8 <HAL_GPIO_Init+0x2b8>)
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	40da      	lsrs	r2, r3
 80019c8:	1e13      	subs	r3, r2, #0
 80019ca:	d000      	beq.n	80019ce <HAL_GPIO_Init+0x2ae>
 80019cc:	e6b0      	b.n	8001730 <HAL_GPIO_Init+0x10>
  }
}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b006      	add	sp, #24
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021800 	.word	0x40021800
 80019dc:	50000400 	.word	0x50000400
 80019e0:	50000800 	.word	0x50000800
 80019e4:	50000c00 	.word	0x50000c00

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	0008      	movs	r0, r1
 80019f2:	0011      	movs	r1, r2
 80019f4:	1cbb      	adds	r3, r7, #2
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	1c7b      	adds	r3, r7, #1
 80019fc:	1c0a      	adds	r2, r1, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a00:	1c7b      	adds	r3, r7, #1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d11f      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	189b      	adds	r3, r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4912      	ldr	r1, [pc, #72]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7fe fb52 	bl	8000100 <__udivsi3>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a62:	e008      	b.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e001      	b.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e009      	b.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a76:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d0ed      	beq.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	40007000 	.word	0x40007000
 8001a98:	fffff9ff 	.word	0xfffff9ff
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	000f4240 	.word	0x000f4240

08001aa4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	23e0      	movs	r3, #224	@ 0xe0
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	4013      	ands	r3, r2
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e2f3      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d100      	bne.n	8001ada <HAL_RCC_OscConfig+0x1e>
 8001ad8:	e07c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ada:	4bc3      	ldr	r3, [pc, #780]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2238      	movs	r2, #56	@ 0x38
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae4:	4bc0      	ldr	r3, [pc, #768]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4013      	ands	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0x3e>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d002      	beq.n	8001b00 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4bb9      	ldr	r3, [pc, #740]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	029b      	lsls	r3, r3, #10
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d062      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x116>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d15e      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e2ce      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	025b      	lsls	r3, r3, #9
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_OscConfig+0x78>
 8001b24:	4bb0      	ldr	r3, [pc, #704]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4baf      	ldr	r3, [pc, #700]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	0249      	lsls	r1, r1, #9
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e020      	b.n	8001b76 <HAL_RCC_OscConfig+0xba>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	23a0      	movs	r3, #160	@ 0xa0
 8001b3a:	02db      	lsls	r3, r3, #11
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10e      	bne.n	8001b5e <HAL_RCC_OscConfig+0xa2>
 8001b40:	4ba9      	ldr	r3, [pc, #676]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4ba8      	ldr	r3, [pc, #672]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	2180      	movs	r1, #128	@ 0x80
 8001b48:	02c9      	lsls	r1, r1, #11
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	4ba6      	ldr	r3, [pc, #664]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4ba5      	ldr	r3, [pc, #660]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	2180      	movs	r1, #128	@ 0x80
 8001b56:	0249      	lsls	r1, r1, #9
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0xba>
 8001b5e:	4ba2      	ldr	r3, [pc, #648]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4ba1      	ldr	r3, [pc, #644]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	49a1      	ldr	r1, [pc, #644]	@ (8001dec <HAL_RCC_OscConfig+0x330>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b70:	499f      	ldr	r1, [pc, #636]	@ (8001df0 <HAL_RCC_OscConfig+0x334>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d014      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f893 	bl	8000ca8 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f88e 	bl	8000ca8 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	@ 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e28d      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9a:	4b93      	ldr	r3, [pc, #588]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0xcc>
 8001ba6:	e015      	b.n	8001bd4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f87e 	bl	8000ca8 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f879 	bl	8000ca8 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	@ 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e278      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc4:	4b88      	ldr	r3, [pc, #544]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d100      	bne.n	8001be0 <HAL_RCC_OscConfig+0x124>
 8001bde:	e099      	b.n	8001d14 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be0:	4b81      	ldr	r3, [pc, #516]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2238      	movs	r2, #56	@ 0x38
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bea:	4b7f      	ldr	r3, [pc, #508]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d102      	bne.n	8001c00 <HAL_RCC_OscConfig+0x144>
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d002      	beq.n	8001c06 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d135      	bne.n	8001c72 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c06:	4b78      	ldr	r3, [pc, #480]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x162>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e24b      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b72      	ldr	r3, [pc, #456]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a74      	ldr	r2, [pc, #464]	@ (8001df4 <HAL_RCC_OscConfig+0x338>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	021a      	lsls	r2, r3, #8
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001df8 <HAL_RCC_OscConfig+0x33c>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	4b67      	ldr	r3, [pc, #412]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c4e:	4b66      	ldr	r3, [pc, #408]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0adb      	lsrs	r3, r3, #11
 8001c54:	2207      	movs	r2, #7
 8001c56:	4013      	ands	r3, r2
 8001c58:	4a68      	ldr	r2, [pc, #416]	@ (8001dfc <HAL_RCC_OscConfig+0x340>)
 8001c5a:	40da      	lsrs	r2, r3
 8001c5c:	4b68      	ldr	r3, [pc, #416]	@ (8001e00 <HAL_RCC_OscConfig+0x344>)
 8001c5e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c60:	4b68      	ldr	r3, [pc, #416]	@ (8001e04 <HAL_RCC_OscConfig+0x348>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe ffc3 	bl	8000bf0 <HAL_InitTick>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d051      	beq.n	8001d12 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e221      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d030      	beq.n	8001cdc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001df8 <HAL_RCC_OscConfig+0x33c>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c8e:	4b56      	ldr	r3, [pc, #344]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b55      	ldr	r3, [pc, #340]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001c94:	2180      	movs	r1, #128	@ 0x80
 8001c96:	0049      	lsls	r1, r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f804 	bl	8000ca8 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7fe ffff 	bl	8000ca8 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1fe      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b48      	ldr	r3, [pc, #288]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8001df4 <HAL_RCC_OscConfig+0x338>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	021a      	lsls	r2, r3, #8
 8001cd4:	4b44      	ldr	r3, [pc, #272]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	e01b      	b.n	8001d14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001cdc:	4b42      	ldr	r3, [pc, #264]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	4949      	ldr	r1, [pc, #292]	@ (8001e08 <HAL_RCC_OscConfig+0x34c>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ffde 	bl	8000ca8 <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7fe ffd9 	bl	8000ca8 <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1d8      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d04:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x236>
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d12:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d047      	beq.n	8001dae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d1e:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2238      	movs	r2, #56	@ 0x38
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b18      	cmp	r3, #24
 8001d28:	d10a      	bne.n	8001d40 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d03c      	beq.n	8001dae <HAL_RCC_OscConfig+0x2f2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d138      	bne.n	8001dae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e1ba      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d4c:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe ffa8 	bl	8000ca8 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5e:	f7fe ffa3 	bl	8000ca8 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1a2      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d70:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0f1      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2a2>
 8001d7a:	e018      	b.n	8001dae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	438a      	bics	r2, r1
 8001d86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe ff8e 	bl	8000ca8 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d92:	f7fe ff89 	bl	8000ca8 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e188      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da4:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f1      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	d100      	bne.n	8001dba <HAL_RCC_OscConfig+0x2fe>
 8001db8:	e0c6      	b.n	8001f48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	231f      	movs	r3, #31
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2238      	movs	r2, #56	@ 0x38
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d11e      	bne.n	8001e0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_RCC_OscConfig+0x32c>)
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d100      	bne.n	8001dda <HAL_RCC_OscConfig+0x31e>
 8001dd8:	e0b6      	b.n	8001f48 <HAL_RCC_OscConfig+0x48c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d000      	beq.n	8001de4 <HAL_RCC_OscConfig+0x328>
 8001de2:	e0b1      	b.n	8001f48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e166      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
 8001de8:	40021000 	.word	0x40021000
 8001dec:	fffeffff 	.word	0xfffeffff
 8001df0:	fffbffff 	.word	0xfffbffff
 8001df4:	ffff80ff 	.word	0xffff80ff
 8001df8:	ffffc7ff 	.word	0xffffc7ff
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004
 8001e08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e0c:	4bac      	ldr	r3, [pc, #688]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	055b      	lsls	r3, r3, #21
 8001e14:	4013      	ands	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_OscConfig+0x360>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x362>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d011      	beq.n	8001e46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4ba7      	ldr	r3, [pc, #668]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e26:	4ba6      	ldr	r3, [pc, #664]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001e28:	2180      	movs	r1, #128	@ 0x80
 8001e2a:	0549      	lsls	r1, r1, #21
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e30:	4ba3      	ldr	r3, [pc, #652]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001e32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	055b      	lsls	r3, r3, #21
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e3e:	231f      	movs	r3, #31
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e46:	4b9f      	ldr	r3, [pc, #636]	@ (80020c4 <HAL_RCC_OscConfig+0x608>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d11a      	bne.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e52:	4b9c      	ldr	r3, [pc, #624]	@ (80020c4 <HAL_RCC_OscConfig+0x608>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b9b      	ldr	r3, [pc, #620]	@ (80020c4 <HAL_RCC_OscConfig+0x608>)
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e60:	f7fe ff22 	bl	8000ca8 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7fe ff1d 	bl	8000ca8 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e11c      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7c:	4b91      	ldr	r3, [pc, #580]	@ (80020c4 <HAL_RCC_OscConfig+0x608>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3e2>
 8001e90:	4b8b      	ldr	r3, [pc, #556]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001e92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e94:	4b8a      	ldr	r3, [pc, #552]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e9c:	e01c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x404>
 8001ea6:	4b86      	ldr	r3, [pc, #536]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001ea8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eaa:	4b85      	ldr	r3, [pc, #532]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001eac:	2104      	movs	r1, #4
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eb2:	4b83      	ldr	r3, [pc, #524]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001eb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eb6:	4b82      	ldr	r3, [pc, #520]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001eb8:	2101      	movs	r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
 8001ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001ec2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	438a      	bics	r2, r1
 8001eca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001ece:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d014      	beq.n	8001f0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fee2 	bl	8000ca8 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe fedd 	bl	8000ca8 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4a74      	ldr	r2, [pc, #464]	@ (80020c8 <HAL_RCC_OscConfig+0x60c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0db      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b70      	ldr	r3, [pc, #448]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x42e>
 8001f08:	e013      	b.n	8001f32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fecd 	bl	8000ca8 <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f12:	e009      	b.n	8001f28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7fe fec8 	bl	8000ca8 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	4a6a      	ldr	r2, [pc, #424]	@ (80020c8 <HAL_RCC_OscConfig+0x60c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0c6      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f28:	4b65      	ldr	r3, [pc, #404]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f32:	231f      	movs	r3, #31
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f3c:	4b60      	ldr	r3, [pc, #384]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f40:	4b5f      	ldr	r3, [pc, #380]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f42:	4962      	ldr	r1, [pc, #392]	@ (80020cc <HAL_RCC_OscConfig+0x610>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x496>
 8001f50:	e0b0      	b.n	80020b4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2238      	movs	r2, #56	@ 0x38
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d100      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4a4>
 8001f5e:	e078      	b.n	8002052 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d153      	bne.n	8002010 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b55      	ldr	r3, [pc, #340]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b54      	ldr	r3, [pc, #336]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f6e:	4958      	ldr	r1, [pc, #352]	@ (80020d0 <HAL_RCC_OscConfig+0x614>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe98 	bl	8000ca8 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe fe93 	bl	8000ca8 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e092      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f90:	4b4b      	ldr	r3, [pc, #300]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	049b      	lsls	r3, r3, #18
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4b48      	ldr	r3, [pc, #288]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fca:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b3c      	ldr	r3, [pc, #240]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	0449      	lsls	r1, r1, #17
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001fd8:	4b39      	ldr	r3, [pc, #228]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8001fde:	2180      	movs	r1, #128	@ 0x80
 8001fe0:	0549      	lsls	r1, r1, #21
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fe5f 	bl	8000ca8 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe fe5a 	bl	8000ca8 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e059      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	049b      	lsls	r3, r3, #18
 800200a:	4013      	ands	r3, r2
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x534>
 800200e:	e051      	b.n	80020b4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8002016:	492e      	ldr	r1, [pc, #184]	@ (80020d0 <HAL_RCC_OscConfig+0x614>)
 8002018:	400a      	ands	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fe44 	bl	8000ca8 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7fe fe3f 	bl	8000ca8 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e03e      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	049b      	lsls	r3, r3, #18
 8002040:	4013      	ands	r3, r2
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002044:	4b1e      	ldr	r3, [pc, #120]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4b1d      	ldr	r3, [pc, #116]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 800204a:	4923      	ldr	r1, [pc, #140]	@ (80020d8 <HAL_RCC_OscConfig+0x61c>)
 800204c:	400a      	ands	r2, r1
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	e030      	b.n	80020b4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e02b      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800205e:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_RCC_OscConfig+0x604>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2203      	movs	r2, #3
 8002068:	401a      	ands	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	429a      	cmp	r2, r3
 8002070:	d11e      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2270      	movs	r2, #112	@ 0x70
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d117      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	23fe      	movs	r3, #254	@ 0xfe
 8002084:	01db      	lsls	r3, r3, #7
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d10e      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	23f8      	movs	r3, #248	@ 0xf8
 8002096:	039b      	lsls	r3, r3, #14
 8002098:	401a      	ands	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	0f5b      	lsrs	r3, r3, #29
 80020a6:	075a      	lsls	r2, r3, #29
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b008      	add	sp, #32
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
 80020c8:	00001388 	.word	0x00001388
 80020cc:	efffffff 	.word	0xefffffff
 80020d0:	feffffff 	.word	0xfeffffff
 80020d4:	1fc1808c 	.word	0x1fc1808c
 80020d8:	effefffc 	.word	0xeffefffc

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0e9      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b76      	ldr	r3, [pc, #472]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2207      	movs	r2, #7
 80020f6:	4013      	ands	r3, r2
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d91e      	bls.n	800213c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b73      	ldr	r3, [pc, #460]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2207      	movs	r2, #7
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002110:	f7fe fdca 	bl	8000ca8 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002118:	e009      	b.n	800212e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7fe fdc5 	bl	8000ca8 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4a6a      	ldr	r2, [pc, #424]	@ (80022d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0ca      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800212e:	4b67      	ldr	r3, [pc, #412]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2207      	movs	r2, #7
 8002134:	4013      	ands	r3, r2
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d1ee      	bne.n	800211a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d015      	beq.n	8002172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2204      	movs	r2, #4
 800214c:	4013      	ands	r3, r2
 800214e:	d006      	beq.n	800215e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002150:	4b60      	ldr	r3, [pc, #384]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4b5f      	ldr	r3, [pc, #380]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002156:	21e0      	movs	r1, #224	@ 0xe0
 8002158:	01c9      	lsls	r1, r1, #7
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215e:	4b5d      	ldr	r3, [pc, #372]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4a5d      	ldr	r2, [pc, #372]	@ (80022d8 <HAL_RCC_ClockConfig+0x1fc>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	4013      	ands	r3, r2
 800217a:	d057      	beq.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	4013      	ands	r3, r2
 800218e:	d12b      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e097      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d107      	bne.n	80021ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	049b      	lsls	r3, r3, #18
 80021a4:	4013      	ands	r3, r2
 80021a6:	d11f      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e08b      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b4:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	d113      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e07f      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d106      	bne.n	80021da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021cc:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e074      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021da:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e06d      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e8:	4b3a      	ldr	r3, [pc, #232]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2207      	movs	r2, #7
 80021ee:	4393      	bics	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4b37      	ldr	r3, [pc, #220]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fc:	f7fe fd54 	bl	8000ca8 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	e009      	b.n	800221a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7fe fd4f 	bl	8000ca8 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	4a2f      	ldr	r2, [pc, #188]	@ (80022d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e054      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2e      	ldr	r3, [pc, #184]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2238      	movs	r2, #56	@ 0x38
 8002220:	401a      	ands	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	429a      	cmp	r2, r3
 800222a:	d1ec      	bne.n	8002206 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2207      	movs	r2, #7
 8002232:	4013      	ands	r3, r2
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d21e      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2207      	movs	r2, #7
 8002240:	4393      	bics	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800224c:	f7fe fd2c 	bl	8000ca8 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002254:	e009      	b.n	800226a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002256:	f7fe fd27 	bl	8000ca8 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e02c      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2207      	movs	r2, #7
 8002270:	4013      	ands	r3, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d1ee      	bne.n	8002256 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2204      	movs	r2, #4
 800227e:	4013      	ands	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a15      	ldr	r2, [pc, #84]	@ (80022dc <HAL_RCC_ClockConfig+0x200>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002296:	f000 f829 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 800229a:	0001      	movs	r1, r0
 800229c:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	220f      	movs	r2, #15
 80022a4:	401a      	ands	r2, r3
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <HAL_RCC_ClockConfig+0x204>)
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	58d3      	ldr	r3, [r2, r3]
 80022ac:	221f      	movs	r2, #31
 80022ae:	4013      	ands	r3, r2
 80022b0:	000a      	movs	r2, r1
 80022b2:	40da      	lsrs	r2, r3
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_RCC_ClockConfig+0x208>)
 80022b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_RCC_ClockConfig+0x20c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7fe fc97 	bl	8000bf0 <HAL_InitTick>
 80022c2:	0003      	movs	r3, r0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40022000 	.word	0x40022000
 80022d0:	00001388 	.word	0x00001388
 80022d4:	40021000 	.word	0x40021000
 80022d8:	fffff0ff 	.word	0xfffff0ff
 80022dc:	ffff8fff 	.word	0xffff8fff
 80022e0:	08003db8 	.word	0x08003db8
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000004 	.word	0x20000004

080022ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b3c      	ldr	r3, [pc, #240]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2238      	movs	r2, #56	@ 0x38
 80022f8:	4013      	ands	r3, r2
 80022fa:	d10f      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022fc:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0adb      	lsrs	r3, r3, #11
 8002302:	2207      	movs	r2, #7
 8002304:	4013      	ands	r3, r2
 8002306:	2201      	movs	r2, #1
 8002308:	409a      	lsls	r2, r3
 800230a:	0013      	movs	r3, r2
 800230c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	4835      	ldr	r0, [pc, #212]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002312:	f7fd fef5 	bl	8000100 <__udivsi3>
 8002316:	0003      	movs	r3, r0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e05d      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800231c:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2238      	movs	r2, #56	@ 0x38
 8002322:	4013      	ands	r3, r2
 8002324:	2b08      	cmp	r3, #8
 8002326:	d102      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002328:	4b30      	ldr	r3, [pc, #192]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x100>)
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e054      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232e:	4b2d      	ldr	r3, [pc, #180]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2238      	movs	r2, #56	@ 0x38
 8002334:	4013      	ands	r3, r2
 8002336:	2b10      	cmp	r3, #16
 8002338:	d138      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800233a:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2203      	movs	r2, #3
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002344:	4b27      	ldr	r3, [pc, #156]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	2207      	movs	r2, #7
 800234c:	4013      	ands	r3, r2
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	4824      	ldr	r0, [pc, #144]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x100>)
 800235c:	f7fd fed0 	bl	8000100 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	0019      	movs	r1, r3
 8002364:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	227f      	movs	r2, #127	@ 0x7f
 800236c:	4013      	ands	r3, r2
 800236e:	434b      	muls	r3, r1
 8002370:	617b      	str	r3, [r7, #20]
        break;
 8002372:	e00d      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	481c      	ldr	r0, [pc, #112]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002378:	f7fd fec2 	bl	8000100 <__udivsi3>
 800237c:	0003      	movs	r3, r0
 800237e:	0019      	movs	r1, r3
 8002380:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	227f      	movs	r2, #127	@ 0x7f
 8002388:	4013      	ands	r3, r2
 800238a:	434b      	muls	r3, r1
 800238c:	617b      	str	r3, [r7, #20]
        break;
 800238e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0f5b      	lsrs	r3, r3, #29
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	3301      	adds	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f7fd fead 	bl	8000100 <__udivsi3>
 80023a6:	0003      	movs	r3, r0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e015      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023ac:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2238      	movs	r2, #56	@ 0x38
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d103      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2238      	movs	r2, #56	@ 0x38
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b18      	cmp	r3, #24
 80023ca:	d103      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80023cc:	23fa      	movs	r3, #250	@ 0xfa
 80023ce:	01db      	lsls	r3, r3, #7
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	e001      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023d8:	693b      	ldr	r3, [r7, #16]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b006      	add	sp, #24
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b02      	ldr	r3, [pc, #8]	@ (8002400 <HAL_RCC_GetHCLKFreq+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	20000000 	.word	0x20000000

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002408:	f7ff fff2 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800240c:	0004      	movs	r4, r0
 800240e:	f7ff fb49 	bl	8001aa4 <LL_RCC_GetAPB1Prescaler>
 8002412:	0003      	movs	r3, r0
 8002414:	0b1a      	lsrs	r2, r3, #12
 8002416:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	58d3      	ldr	r3, [r2, r3]
 800241c:	221f      	movs	r2, #31
 800241e:	4013      	ands	r3, r2
 8002420:	40dc      	lsrs	r4, r3
 8002422:	0023      	movs	r3, r4
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bdb0      	pop	{r4, r5, r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	08003df8 	.word	0x08003df8

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002438:	2313      	movs	r3, #19
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002440:	2312      	movs	r3, #18
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	4013      	ands	r3, r2
 8002452:	d100      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002454:	e0a3      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2011      	movs	r0, #17
 8002458:	183b      	adds	r3, r7, r0
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b7f      	ldr	r3, [pc, #508]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	055b      	lsls	r3, r3, #21
 8002466:	4013      	ands	r3, r2
 8002468:	d110      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b7c      	ldr	r3, [pc, #496]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800246c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800246e:	4b7b      	ldr	r3, [pc, #492]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002470:	2180      	movs	r1, #128	@ 0x80
 8002472:	0549      	lsls	r1, r1, #21
 8002474:	430a      	orrs	r2, r1
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002478:	4b78      	ldr	r3, [pc, #480]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800247a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	183b      	adds	r3, r7, r0
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800248c:	4b74      	ldr	r3, [pc, #464]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002492:	2180      	movs	r1, #128	@ 0x80
 8002494:	0049      	lsls	r1, r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249a:	f7fe fc05 	bl	8000ca8 <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a2:	e00b      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fc00 	bl	8000ca8 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d904      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80024b2:	2313      	movs	r3, #19
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2203      	movs	r2, #3
 80024b8:	701a      	strb	r2, [r3, #0]
        break;
 80024ba:	e005      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024bc:	4b68      	ldr	r3, [pc, #416]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	d0ed      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80024c8:	2313      	movs	r3, #19
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d154      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024d2:	4b62      	ldr	r3, [pc, #392]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024d6:	23c0      	movs	r3, #192	@ 0xc0
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d019      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d014      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ee:	4b5b      	ldr	r3, [pc, #364]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f8:	4b58      	ldr	r3, [pc, #352]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024fc:	4b57      	ldr	r3, [pc, #348]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024fe:	2180      	movs	r1, #128	@ 0x80
 8002500:	0249      	lsls	r1, r1, #9
 8002502:	430a      	orrs	r2, r1
 8002504:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002506:	4b55      	ldr	r3, [pc, #340]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002508:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800250a:	4b54      	ldr	r3, [pc, #336]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800250c:	4956      	ldr	r1, [pc, #344]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800250e:	400a      	ands	r2, r1
 8002510:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002512:	4b52      	ldr	r3, [pc, #328]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d016      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fbc2 	bl	8000ca8 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	e00c      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fbbd 	bl	8000ca8 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	4a4d      	ldr	r2, [pc, #308]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d904      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800253a:	2313      	movs	r3, #19
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2203      	movs	r2, #3
 8002540:	701a      	strb	r2, [r3, #0]
            break;
 8002542:	e004      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002544:	4b45      	ldr	r3, [pc, #276]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d0ed      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800254e:	2313      	movs	r3, #19
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002558:	4b40      	ldr	r3, [pc, #256]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	4a41      	ldr	r2, [pc, #260]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	4b3d      	ldr	r3, [pc, #244]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002568:	430a      	orrs	r2, r1
 800256a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800256c:	e00c      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800256e:	2312      	movs	r3, #18
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2213      	movs	r2, #19
 8002574:	18ba      	adds	r2, r7, r2
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e005      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257c:	2312      	movs	r3, #18
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2213      	movs	r2, #19
 8002582:	18ba      	adds	r2, r7, r2
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002588:	2311      	movs	r3, #17
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4b32      	ldr	r3, [pc, #200]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002596:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002598:	4935      	ldr	r1, [pc, #212]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259a:	400a      	ands	r2, r1
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	2203      	movs	r2, #3
 80025ae:	4393      	bics	r3, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4b29      	ldr	r3, [pc, #164]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025b8:	430a      	orrs	r2, r1
 80025ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2220      	movs	r2, #32
 80025c2:	4013      	ands	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	4b21      	ldr	r3, [pc, #132]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	01db      	lsls	r3, r3, #7
 80025e2:	4013      	ands	r3, r2
 80025e4:	d015      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	0899      	lsrs	r1, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	05db      	lsls	r3, r3, #23
 8002600:	429a      	cmp	r2, r3
 8002602:	d106      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	0249      	lsls	r1, r1, #9
 800260e:	430a      	orrs	r2, r1
 8002610:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	4013      	ands	r3, r2
 800261c:	d016      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	4a15      	ldr	r2, [pc, #84]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800262e:	430a      	orrs	r2, r1
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	01db      	lsls	r3, r3, #7
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800263e:	4b07      	ldr	r3, [pc, #28]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002644:	2180      	movs	r1, #128	@ 0x80
 8002646:	0249      	lsls	r1, r1, #9
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800264c:	2312      	movs	r3, #18
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	781b      	ldrb	r3, [r3, #0]
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b006      	add	sp, #24
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	fffffcff 	.word	0xfffffcff
 8002668:	fffeffff 	.word	0xfffeffff
 800266c:	00001388 	.word	0x00001388
 8002670:	efffffff 	.word	0xefffffff
 8002674:	ffffcfff 	.word	0xffffcfff
 8002678:	ffff3fff 	.word	0xffff3fff

0800267c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002684:	230f      	movs	r3, #15
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d100      	bne.n	8002694 <HAL_RTC_Init+0x18>
 8002692:	e08c      	b.n	80027ae <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2229      	movs	r2, #41	@ 0x29
 8002698:	5c9b      	ldrb	r3, [r3, r2]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2228      	movs	r2, #40	@ 0x28
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2288      	movs	r2, #136	@ 0x88
 80026ac:	0212      	lsls	r2, r2, #8
 80026ae:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7fe f8e0 	bl	8000878 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2229      	movs	r2, #41	@ 0x29
 80026bc:	2102      	movs	r1, #2
 80026be:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2210      	movs	r2, #16
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d062      	beq.n	8002794 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	22ca      	movs	r2, #202	@ 0xca
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2253      	movs	r2, #83	@ 0x53
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80026de:	250f      	movs	r5, #15
 80026e0:	197c      	adds	r4, r7, r5
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 f891 	bl	800280c <RTC_EnterInitMode>
 80026ea:	0003      	movs	r3, r0
 80026ec:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80026ee:	0028      	movs	r0, r5
 80026f0:	183b      	adds	r3, r7, r0
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d12c      	bne.n	8002752 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	492e      	ldr	r1, [pc, #184]	@ (80027bc <HAL_RTC_Init+0x140>)
 8002704:	400a      	ands	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6999      	ldr	r1, [r3, #24]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6912      	ldr	r2, [r2, #16]
 800272e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6919      	ldr	r1, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	041a      	lsls	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002744:	183c      	adds	r4, r7, r0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	0018      	movs	r0, r3
 800274a:	f000 f8a1 	bl	8002890 <RTC_ExitInitMode>
 800274e:	0003      	movs	r3, r0
 8002750:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002752:	230f      	movs	r3, #15
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d116      	bne.n	800278a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	00d2      	lsls	r2, r2, #3
 8002768:	08d2      	lsrs	r2, r2, #3
 800276a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6999      	ldr	r1, [r3, #24]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	22ff      	movs	r2, #255	@ 0xff
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24
 8002792:	e003      	b.n	800279c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002794:	230f      	movs	r3, #15
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800279c:	230f      	movs	r3, #15
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2229      	movs	r2, #41	@ 0x29
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80027ae:	230f      	movs	r3, #15
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	781b      	ldrb	r3, [r3, #0]
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bdb0      	pop	{r4, r5, r7, pc}
 80027bc:	fb8fffbf 	.word	0xfb8fffbf

080027c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <HAL_RTC_WaitForSynchro+0x48>)
 80027ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80027d0:	f7fe fa6a 	bl	8000ca8 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80027d8:	e00a      	b.n	80027f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80027da:	f7fe fa65 	bl	8000ca8 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad2      	subs	r2, r2, r3
 80027e4:	23fa      	movs	r3, #250	@ 0xfa
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d901      	bls.n	80027f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e006      	b.n	80027fe <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0ee      	beq.n	80027da <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	0001005f 	.word	0x0001005f

0800280c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002814:	230f      	movs	r3, #15
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2240      	movs	r2, #64	@ 0x40
 8002824:	4013      	ands	r3, r2
 8002826:	d12c      	bne.n	8002882 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2180      	movs	r1, #128	@ 0x80
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002838:	f7fe fa36 	bl	8000ca8 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002840:	e014      	b.n	800286c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002842:	f7fe fa31 	bl	8000ca8 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1ad2      	subs	r2, r2, r3
 800284c:	200f      	movs	r0, #15
 800284e:	183b      	adds	r3, r7, r0
 8002850:	1839      	adds	r1, r7, r0
 8002852:	7809      	ldrb	r1, [r1, #0]
 8002854:	7019      	strb	r1, [r3, #0]
 8002856:	23fa      	movs	r3, #250	@ 0xfa
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	429a      	cmp	r2, r3
 800285c:	d906      	bls.n	800286c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800285e:	183b      	adds	r3, r7, r0
 8002860:	2203      	movs	r2, #3
 8002862:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2229      	movs	r2, #41	@ 0x29
 8002868:	2103      	movs	r1, #3
 800286a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2240      	movs	r2, #64	@ 0x40
 8002874:	4013      	ands	r3, r2
 8002876:	d104      	bne.n	8002882 <RTC_EnterInitMode+0x76>
 8002878:	230f      	movs	r3, #15
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d1df      	bne.n	8002842 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002882:	230f      	movs	r3, #15
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b004      	add	sp, #16
 800288e:	bd80      	pop	{r7, pc}

08002890 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	240f      	movs	r4, #15
 800289a:	193b      	adds	r3, r7, r4
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80028a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <RTC_ExitInitMode+0x84>)
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <RTC_ExitInitMode+0x84>)
 80028a6:	2180      	movs	r1, #128	@ 0x80
 80028a8:	438a      	bics	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <RTC_ExitInitMode+0x84>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2220      	movs	r2, #32
 80028b2:	4013      	ands	r3, r2
 80028b4:	d10d      	bne.n	80028d2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff ff81 	bl	80027c0 <HAL_RTC_WaitForSynchro>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d021      	beq.n	8002906 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2229      	movs	r2, #41	@ 0x29
 80028c6:	2103      	movs	r1, #3
 80028c8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	2203      	movs	r2, #3
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e019      	b.n	8002906 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <RTC_ExitInitMode+0x84>)
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <RTC_ExitInitMode+0x84>)
 80028d8:	2120      	movs	r1, #32
 80028da:	438a      	bics	r2, r1
 80028dc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff ff6d 	bl	80027c0 <HAL_RTC_WaitForSynchro>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d007      	beq.n	80028fa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2229      	movs	r2, #41	@ 0x29
 80028ee:	2103      	movs	r1, #3
 80028f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80028f2:	230f      	movs	r3, #15
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2203      	movs	r2, #3
 80028f8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <RTC_ExitInitMode+0x84>)
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <RTC_ExitInitMode+0x84>)
 8002900:	2120      	movs	r1, #32
 8002902:	430a      	orrs	r2, r1
 8002904:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002906:	230f      	movs	r3, #15
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b005      	add	sp, #20
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	40002800 	.word	0x40002800

08002918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0a8      	b.n	8002a7c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	2382      	movs	r3, #130	@ 0x82
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	429a      	cmp	r2, r3
 800293c:	d009      	beq.n	8002952 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	61da      	str	r2, [r3, #28]
 8002944:	e005      	b.n	8002952 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	225d      	movs	r2, #93	@ 0x5d
 800295c:	5c9b      	ldrb	r3, [r3, r2]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	225c      	movs	r2, #92	@ 0x5c
 8002968:	2100      	movs	r1, #0
 800296a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f7fd ffc0 	bl	80008f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	225d      	movs	r2, #93	@ 0x5d
 8002978:	2102      	movs	r1, #2
 800297a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2140      	movs	r1, #64	@ 0x40
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	23e0      	movs	r3, #224	@ 0xe0
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	429a      	cmp	r2, r3
 8002996:	d902      	bls.n	800299e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e002      	b.n	80029a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	23f0      	movs	r3, #240	@ 0xf0
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d008      	beq.n	80029c2 <HAL_SPI_Init+0xaa>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	23e0      	movs	r3, #224	@ 0xe0
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d002      	beq.n	80029c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	2382      	movs	r3, #130	@ 0x82
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	2384      	movs	r3, #132	@ 0x84
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	400b      	ands	r3, r1
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2102      	movs	r1, #2
 80029de:	400b      	ands	r3, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2101      	movs	r1, #1
 80029e8:	400b      	ands	r3, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6999      	ldr	r1, [r3, #24]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	400b      	ands	r3, r1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2138      	movs	r1, #56	@ 0x38
 80029fe:	400b      	ands	r3, r1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	400b      	ands	r3, r1
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	0011      	movs	r1, r2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	401a      	ands	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	2204      	movs	r2, #4
 8002a28:	401a      	ands	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	2110      	movs	r1, #16
 8002a30:	400b      	ands	r3, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a38:	2108      	movs	r1, #8
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68d9      	ldr	r1, [r3, #12]
 8002a42:	23f0      	movs	r3, #240	@ 0xf0
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	400b      	ands	r3, r1
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	015b      	lsls	r3, r3, #5
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4907      	ldr	r1, [pc, #28]	@ (8002a84 <HAL_SPI_Init+0x16c>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	225d      	movs	r2, #93	@ 0x5d
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	fffff7ff 	.word	0xfffff7ff

08002a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e04a      	b.n	8002b30 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	223d      	movs	r2, #61	@ 0x3d
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223c      	movs	r2, #60	@ 0x3c
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fd ff69 	bl	8000988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223d      	movs	r2, #61	@ 0x3d
 8002aba:	2102      	movs	r1, #2
 8002abc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f000 f935 	bl	8002d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2248      	movs	r2, #72	@ 0x48
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	223e      	movs	r2, #62	@ 0x3e
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223f      	movs	r2, #63	@ 0x3f
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2240      	movs	r2, #64	@ 0x40
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2241      	movs	r2, #65	@ 0x41
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2242      	movs	r2, #66	@ 0x42
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2243      	movs	r2, #67	@ 0x43
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2244      	movs	r2, #68	@ 0x44
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2245      	movs	r2, #69	@ 0x45
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2246      	movs	r2, #70	@ 0x46
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2247      	movs	r2, #71	@ 0x47
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	223d      	movs	r2, #61	@ 0x3d
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2317      	movs	r3, #23
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	223c      	movs	r2, #60	@ 0x3c
 8002b50:	5c9b      	ldrb	r3, [r3, r2]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0e5      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	223c      	movs	r2, #60	@ 0x3c
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b14      	cmp	r3, #20
 8002b66:	d900      	bls.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b68:	e0d1      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	009a      	lsls	r2, r3, #2
 8002b6e:	4b70      	ldr	r3, [pc, #448]	@ (8002d30 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 f954 	bl	8002e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2108      	movs	r1, #8
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6999      	ldr	r1, [r3, #24]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	619a      	str	r2, [r3, #24]
      break;
 8002bb6:	e0af      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f000 f9b3 	bl	8002f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2180      	movs	r1, #128	@ 0x80
 8002bd2:	0109      	lsls	r1, r1, #4
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4954      	ldr	r1, [pc, #336]	@ (8002d34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6999      	ldr	r1, [r3, #24]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	021a      	lsls	r2, r3, #8
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	619a      	str	r2, [r3, #24]
      break;
 8002bfc:	e08c      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fa0e 	bl	8003028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2108      	movs	r1, #8
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2104      	movs	r1, #4
 8002c28:	438a      	bics	r2, r1
 8002c2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69d9      	ldr	r1, [r3, #28]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	61da      	str	r2, [r3, #28]
      break;
 8002c3e:	e06b      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	0011      	movs	r1, r2
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 fa6f 	bl	800312c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2180      	movs	r1, #128	@ 0x80
 8002c5a:	0109      	lsls	r1, r1, #4
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4932      	ldr	r1, [pc, #200]	@ (8002d34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69d9      	ldr	r1, [r3, #28]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	021a      	lsls	r2, r3, #8
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
      break;
 8002c84:	e048      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fab0 	bl	80031f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2108      	movs	r1, #8
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2104      	movs	r1, #4
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cc6:	e027      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	0011      	movs	r1, r2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 fae9 	bl	80032a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	0109      	lsls	r1, r1, #4
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4910      	ldr	r1, [pc, #64]	@ (8002d34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	021a      	lsls	r2, r3, #8
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d0c:	e004      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002d0e:	2317      	movs	r3, #23
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
      break;
 8002d16:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	223c      	movs	r2, #60	@ 0x3c
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	5499      	strb	r1, [r3, r2]

  return status;
 8002d20:	2317      	movs	r3, #23
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b006      	add	sp, #24
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	08003e18 	.word	0x08003e18
 8002d34:	fffffbff 	.word	0xfffffbff

08002d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a32      	ldr	r2, [pc, #200]	@ (8002e14 <TIM_Base_SetConfig+0xdc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x20>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a31      	ldr	r2, [pc, #196]	@ (8002e18 <TIM_Base_SetConfig+0xe0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2270      	movs	r2, #112	@ 0x70
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a29      	ldr	r2, [pc, #164]	@ (8002e14 <TIM_Base_SetConfig+0xdc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00f      	beq.n	8002d92 <TIM_Base_SetConfig+0x5a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a28      	ldr	r2, [pc, #160]	@ (8002e18 <TIM_Base_SetConfig+0xe0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <TIM_Base_SetConfig+0x5a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <TIM_Base_SetConfig+0xe4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <TIM_Base_SetConfig+0x5a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <TIM_Base_SetConfig+0xe8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <TIM_Base_SetConfig+0x5a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	@ (8002e24 <TIM_Base_SetConfig+0xec>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d108      	bne.n	8002da4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a24      	ldr	r2, [pc, #144]	@ (8002e28 <TIM_Base_SetConfig+0xf0>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2280      	movs	r2, #128	@ 0x80
 8002da8:	4393      	bics	r3, r2
 8002daa:	001a      	movs	r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a11      	ldr	r2, [pc, #68]	@ (8002e14 <TIM_Base_SetConfig+0xdc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0xaa>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <TIM_Base_SetConfig+0xe8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0xaa>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a11      	ldr	r2, [pc, #68]	@ (8002e24 <TIM_Base_SetConfig+0xec>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d103      	bne.n	8002dea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d106      	bne.n	8002e0a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4393      	bics	r3, r2
 8002e04:	001a      	movs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	611a      	str	r2, [r3, #16]
  }
}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b004      	add	sp, #16
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40002000 	.word	0x40002000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800
 8002e28:	fffffcff 	.word	0xfffffcff

08002e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4393      	bics	r3, r2
 8002e44:	001a      	movs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <TIM_OC1_SetConfig+0xe8>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2203      	movs	r2, #3
 8002e62:	4393      	bics	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4393      	bics	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a24      	ldr	r2, [pc, #144]	@ (8002f18 <TIM_OC1_SetConfig+0xec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <TIM_OC1_SetConfig+0x6e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a23      	ldr	r2, [pc, #140]	@ (8002f1c <TIM_OC1_SetConfig+0xf0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d003      	beq.n	8002e9a <TIM_OC1_SetConfig+0x6e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a22      	ldr	r2, [pc, #136]	@ (8002f20 <TIM_OC1_SetConfig+0xf4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10c      	bne.n	8002eb4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a18      	ldr	r2, [pc, #96]	@ (8002f18 <TIM_OC1_SetConfig+0xec>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <TIM_OC1_SetConfig+0xa0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a17      	ldr	r2, [pc, #92]	@ (8002f1c <TIM_OC1_SetConfig+0xf0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_OC1_SetConfig+0xa0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	@ (8002f20 <TIM_OC1_SetConfig+0xf4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d111      	bne.n	8002ef0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4a15      	ldr	r2, [pc, #84]	@ (8002f24 <TIM_OC1_SetConfig+0xf8>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <TIM_OC1_SetConfig+0xfc>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b006      	add	sp, #24
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	fffeff8f 	.word	0xfffeff8f
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800
 8002f24:	fffffeff 	.word	0xfffffeff
 8002f28:	fffffdff 	.word	0xfffffdff

08002f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	2210      	movs	r2, #16
 8002f42:	4393      	bics	r3, r2
 8002f44:	001a      	movs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a2c      	ldr	r2, [pc, #176]	@ (800300c <TIM_OC2_SetConfig+0xe0>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a2b      	ldr	r2, [pc, #172]	@ (8003010 <TIM_OC2_SetConfig+0xe4>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2220      	movs	r2, #32
 8002f76:	4393      	bics	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a22      	ldr	r2, [pc, #136]	@ (8003014 <TIM_OC2_SetConfig+0xe8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10d      	bne.n	8002faa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	4393      	bics	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2240      	movs	r2, #64	@ 0x40
 8002fa6:	4393      	bics	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <TIM_OC2_SetConfig+0xe8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_OC2_SetConfig+0x96>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	@ (8003018 <TIM_OC2_SetConfig+0xec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_OC2_SetConfig+0x96>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	@ (800301c <TIM_OC2_SetConfig+0xf0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d113      	bne.n	8002fea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4a16      	ldr	r2, [pc, #88]	@ (8003020 <TIM_OC2_SetConfig+0xf4>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	@ (8003024 <TIM_OC2_SetConfig+0xf8>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	621a      	str	r2, [r3, #32]
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b006      	add	sp, #24
 800300a:	bd80      	pop	{r7, pc}
 800300c:	feff8fff 	.word	0xfeff8fff
 8003010:	fffffcff 	.word	0xfffffcff
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40014400 	.word	0x40014400
 800301c:	40014800 	.word	0x40014800
 8003020:	fffffbff 	.word	0xfffffbff
 8003024:	fffff7ff 	.word	0xfffff7ff

08003028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a31      	ldr	r2, [pc, #196]	@ (8003104 <TIM_OC3_SetConfig+0xdc>)
 800303e:	401a      	ands	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <TIM_OC3_SetConfig+0xe0>)
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2203      	movs	r2, #3
 800305c:	4393      	bics	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	4a27      	ldr	r2, [pc, #156]	@ (800310c <TIM_OC3_SetConfig+0xe4>)
 800306e:	4013      	ands	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a23      	ldr	r2, [pc, #140]	@ (8003110 <TIM_OC3_SetConfig+0xe8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10d      	bne.n	80030a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	4a22      	ldr	r2, [pc, #136]	@ (8003114 <TIM_OC3_SetConfig+0xec>)
 800308a:	4013      	ands	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <TIM_OC3_SetConfig+0xf0>)
 800309e:	4013      	ands	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003110 <TIM_OC3_SetConfig+0xe8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <TIM_OC3_SetConfig+0x92>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1b      	ldr	r2, [pc, #108]	@ (800311c <TIM_OC3_SetConfig+0xf4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_OC3_SetConfig+0x92>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003120 <TIM_OC3_SetConfig+0xf8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d113      	bne.n	80030e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <TIM_OC3_SetConfig+0xfc>)
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4a18      	ldr	r2, [pc, #96]	@ (8003128 <TIM_OC3_SetConfig+0x100>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b006      	add	sp, #24
 8003102:	bd80      	pop	{r7, pc}
 8003104:	fffffeff 	.word	0xfffffeff
 8003108:	fffeff8f 	.word	0xfffeff8f
 800310c:	fffffdff 	.word	0xfffffdff
 8003110:	40012c00 	.word	0x40012c00
 8003114:	fffff7ff 	.word	0xfffff7ff
 8003118:	fffffbff 	.word	0xfffffbff
 800311c:	40014400 	.word	0x40014400
 8003120:	40014800 	.word	0x40014800
 8003124:	ffffefff 	.word	0xffffefff
 8003128:	ffffdfff 	.word	0xffffdfff

0800312c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a24      	ldr	r2, [pc, #144]	@ (80031d4 <TIM_OC4_SetConfig+0xa8>)
 8003142:	401a      	ands	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a20      	ldr	r2, [pc, #128]	@ (80031d8 <TIM_OC4_SetConfig+0xac>)
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a1f      	ldr	r2, [pc, #124]	@ (80031dc <TIM_OC4_SetConfig+0xb0>)
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <TIM_OC4_SetConfig+0xb4>)
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	031b      	lsls	r3, r3, #12
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a17      	ldr	r2, [pc, #92]	@ (80031e4 <TIM_OC4_SetConfig+0xb8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <TIM_OC4_SetConfig+0x70>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a16      	ldr	r2, [pc, #88]	@ (80031e8 <TIM_OC4_SetConfig+0xbc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_OC4_SetConfig+0x70>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a15      	ldr	r2, [pc, #84]	@ (80031ec <TIM_OC4_SetConfig+0xc0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d109      	bne.n	80031b0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <TIM_OC4_SetConfig+0xc4>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b006      	add	sp, #24
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	ffffefff 	.word	0xffffefff
 80031d8:	feff8fff 	.word	0xfeff8fff
 80031dc:	fffffcff 	.word	0xfffffcff
 80031e0:	ffffdfff 	.word	0xffffdfff
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800
 80031f0:	ffffbfff 	.word	0xffffbfff

080031f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a21      	ldr	r2, [pc, #132]	@ (8003290 <TIM_OC5_SetConfig+0x9c>)
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a1d      	ldr	r2, [pc, #116]	@ (8003294 <TIM_OC5_SetConfig+0xa0>)
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <TIM_OC5_SetConfig+0xa4>)
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a15      	ldr	r2, [pc, #84]	@ (800329c <TIM_OC5_SetConfig+0xa8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <TIM_OC5_SetConfig+0x66>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <TIM_OC5_SetConfig+0xac>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_OC5_SetConfig+0x66>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a13      	ldr	r2, [pc, #76]	@ (80032a4 <TIM_OC5_SetConfig+0xb0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d109      	bne.n	800326e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4a0c      	ldr	r2, [pc, #48]	@ (8003290 <TIM_OC5_SetConfig+0x9c>)
 800325e:	4013      	ands	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	46c0      	nop			@ (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b006      	add	sp, #24
 800328e:	bd80      	pop	{r7, pc}
 8003290:	fffeffff 	.word	0xfffeffff
 8003294:	fffeff8f 	.word	0xfffeff8f
 8003298:	fffdffff 	.word	0xfffdffff
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800

080032a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <TIM_OC6_SetConfig+0xa0>)
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <TIM_OC6_SetConfig+0xa4>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <TIM_OC6_SetConfig+0xa8>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	051b      	lsls	r3, r3, #20
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a16      	ldr	r2, [pc, #88]	@ (8003354 <TIM_OC6_SetConfig+0xac>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_OC6_SetConfig+0x68>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a15      	ldr	r2, [pc, #84]	@ (8003358 <TIM_OC6_SetConfig+0xb0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_OC6_SetConfig+0x68>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a14      	ldr	r2, [pc, #80]	@ (800335c <TIM_OC6_SetConfig+0xb4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d109      	bne.n	8003324 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <TIM_OC6_SetConfig+0xb8>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b006      	add	sp, #24
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	ffefffff 	.word	0xffefffff
 800334c:	feff8fff 	.word	0xfeff8fff
 8003350:	ffdfffff 	.word	0xffdfffff
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800
 8003360:	fffbffff 	.word	0xfffbffff

08003364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	223c      	movs	r2, #60	@ 0x3c
 8003372:	5c9b      	ldrb	r3, [r3, r2]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003378:	2302      	movs	r3, #2
 800337a:	e04a      	b.n	8003412 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	223c      	movs	r2, #60	@ 0x3c
 8003380:	2101      	movs	r1, #1
 8003382:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	223d      	movs	r2, #61	@ 0x3d
 8003388:	2102      	movs	r1, #2
 800338a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d108      	bne.n	80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2270      	movs	r2, #112	@ 0x70
 80033bc:	4393      	bics	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a11      	ldr	r2, [pc, #68]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a10      	ldr	r2, [pc, #64]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10c      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2280      	movs	r2, #128	@ 0x80
 80033ea:	4393      	bics	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	223d      	movs	r2, #61	@ 0x3d
 8003404:	2101      	movs	r1, #1
 8003406:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	223c      	movs	r2, #60	@ 0x3c
 800340c:	2100      	movs	r1, #0
 800340e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	40012c00 	.word	0x40012c00
 8003420:	ff0fffff 	.word	0xff0fffff
 8003424:	40000400 	.word	0x40000400

08003428 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223c      	movs	r2, #60	@ 0x3c
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003440:	2302      	movs	r3, #2
 8003442:	e06f      	b.n	8003524 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	223c      	movs	r2, #60	@ 0x3c
 8003448:	2101      	movs	r1, #1
 800344a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	22ff      	movs	r2, #255	@ 0xff
 8003450:	4393      	bics	r3, r2
 8003452:	001a      	movs	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a33      	ldr	r2, [pc, #204]	@ (800352c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003460:	401a      	ands	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a30      	ldr	r2, [pc, #192]	@ (8003530 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800346e:	401a      	ands	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a2e      	ldr	r2, [pc, #184]	@ (8003534 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800347c:	401a      	ands	r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a2b      	ldr	r2, [pc, #172]	@ (8003538 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800348a:	401a      	ands	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a29      	ldr	r2, [pc, #164]	@ (800353c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003498:	401a      	ands	r2, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a26      	ldr	r2, [pc, #152]	@ (8003540 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80034a6:	401a      	ands	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a24      	ldr	r2, [pc, #144]	@ (8003544 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80034b4:	401a      	ands	r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a21      	ldr	r2, [pc, #132]	@ (8003548 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80034c4:	401a      	ands	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1e      	ldr	r2, [pc, #120]	@ (800354c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d11c      	bne.n	8003512 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a1d      	ldr	r2, [pc, #116]	@ (8003550 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80034dc:	401a      	ands	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	051b      	lsls	r3, r3, #20
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003554 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80034ec:	401a      	ands	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80034fa:	401a      	ands	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a15      	ldr	r2, [pc, #84]	@ (800355c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003508:	401a      	ands	r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223c      	movs	r2, #60	@ 0x3c
 800351e:	2100      	movs	r1, #0
 8003520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bd80      	pop	{r7, pc}
 800352c:	fffffcff 	.word	0xfffffcff
 8003530:	fffffbff 	.word	0xfffffbff
 8003534:	fffff7ff 	.word	0xfffff7ff
 8003538:	ffffefff 	.word	0xffffefff
 800353c:	ffffdfff 	.word	0xffffdfff
 8003540:	ffffbfff 	.word	0xffffbfff
 8003544:	fff0ffff 	.word	0xfff0ffff
 8003548:	efffffff 	.word	0xefffffff
 800354c:	40012c00 	.word	0x40012c00
 8003550:	ff0fffff 	.word	0xff0fffff
 8003554:	feffffff 	.word	0xfeffffff
 8003558:	fdffffff 	.word	0xfdffffff
 800355c:	dfffffff 	.word	0xdfffffff

08003560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e046      	b.n	8003600 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2288      	movs	r2, #136	@ 0x88
 8003576:	589b      	ldr	r3, [r3, r2]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2284      	movs	r2, #132	@ 0x84
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f7fd fa7e 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2288      	movs	r2, #136	@ 0x88
 8003590:	2124      	movs	r1, #36	@ 0x24
 8003592:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	438a      	bics	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f996 	bl	80038e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 f828 	bl	800360c <UART_SetConfig>
 80035bc:	0003      	movs	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e01c      	b.n	8003600 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	490d      	ldr	r1, [pc, #52]	@ (8003608 <HAL_UART_Init+0xa8>)
 80035d2:	400a      	ands	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	212a      	movs	r1, #42	@ 0x2a
 80035e2:	438a      	bics	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 fa25 	bl	8003a48 <UART_CheckIdleState>
 80035fe:	0003      	movs	r3, r0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}
 8003608:	ffffb7ff 	.word	0xffffb7ff

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003614:	231a      	movs	r3, #26
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4313      	orrs	r3, r2
 8003632:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4aa1      	ldr	r2, [pc, #644]	@ (80038c0 <UART_SetConfig+0x2b4>)
 800363c:	4013      	ands	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a9c      	ldr	r2, [pc, #624]	@ (80038c4 <UART_SetConfig+0x2b8>)
 8003652:	4013      	ands	r3, r2
 8003654:	0019      	movs	r1, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4313      	orrs	r3, r2
 8003670:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a93      	ldr	r2, [pc, #588]	@ (80038c8 <UART_SetConfig+0x2bc>)
 800367a:	4013      	ands	r3, r2
 800367c:	0019      	movs	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	220f      	movs	r2, #15
 8003690:	4393      	bics	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a89      	ldr	r2, [pc, #548]	@ (80038cc <UART_SetConfig+0x2c0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d127      	bne.n	80036fa <UART_SetConfig+0xee>
 80036aa:	4b89      	ldr	r3, [pc, #548]	@ (80038d0 <UART_SetConfig+0x2c4>)
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	2203      	movs	r2, #3
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d017      	beq.n	80036e6 <UART_SetConfig+0xda>
 80036b6:	d81b      	bhi.n	80036f0 <UART_SetConfig+0xe4>
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d00a      	beq.n	80036d2 <UART_SetConfig+0xc6>
 80036bc:	d818      	bhi.n	80036f0 <UART_SetConfig+0xe4>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <UART_SetConfig+0xbc>
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d00a      	beq.n	80036dc <UART_SetConfig+0xd0>
 80036c6:	e013      	b.n	80036f0 <UART_SetConfig+0xe4>
 80036c8:	231b      	movs	r3, #27
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e021      	b.n	8003716 <UART_SetConfig+0x10a>
 80036d2:	231b      	movs	r3, #27
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2202      	movs	r2, #2
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e01c      	b.n	8003716 <UART_SetConfig+0x10a>
 80036dc:	231b      	movs	r3, #27
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	2204      	movs	r2, #4
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e017      	b.n	8003716 <UART_SetConfig+0x10a>
 80036e6:	231b      	movs	r3, #27
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	2208      	movs	r2, #8
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e012      	b.n	8003716 <UART_SetConfig+0x10a>
 80036f0:	231b      	movs	r3, #27
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2210      	movs	r2, #16
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e00d      	b.n	8003716 <UART_SetConfig+0x10a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a75      	ldr	r2, [pc, #468]	@ (80038d4 <UART_SetConfig+0x2c8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d104      	bne.n	800370e <UART_SetConfig+0x102>
 8003704:	231b      	movs	r3, #27
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e003      	b.n	8003716 <UART_SetConfig+0x10a>
 800370e:	231b      	movs	r3, #27
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2210      	movs	r2, #16
 8003714:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	429a      	cmp	r2, r3
 8003720:	d000      	beq.n	8003724 <UART_SetConfig+0x118>
 8003722:	e065      	b.n	80037f0 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003724:	231b      	movs	r3, #27
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b08      	cmp	r3, #8
 800372c:	d015      	beq.n	800375a <UART_SetConfig+0x14e>
 800372e:	dc18      	bgt.n	8003762 <UART_SetConfig+0x156>
 8003730:	2b04      	cmp	r3, #4
 8003732:	d00d      	beq.n	8003750 <UART_SetConfig+0x144>
 8003734:	dc15      	bgt.n	8003762 <UART_SetConfig+0x156>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <UART_SetConfig+0x134>
 800373a:	2b02      	cmp	r3, #2
 800373c:	d005      	beq.n	800374a <UART_SetConfig+0x13e>
 800373e:	e010      	b.n	8003762 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7fe fe60 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8003744:	0003      	movs	r3, r0
 8003746:	617b      	str	r3, [r7, #20]
        break;
 8003748:	e012      	b.n	8003770 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800374a:	4b63      	ldr	r3, [pc, #396]	@ (80038d8 <UART_SetConfig+0x2cc>)
 800374c:	617b      	str	r3, [r7, #20]
        break;
 800374e:	e00f      	b.n	8003770 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003750:	f7fe fdcc 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8003754:	0003      	movs	r3, r0
 8003756:	617b      	str	r3, [r7, #20]
        break;
 8003758:	e00a      	b.n	8003770 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375a:	2380      	movs	r3, #128	@ 0x80
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	617b      	str	r3, [r7, #20]
        break;
 8003760:	e006      	b.n	8003770 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003766:	231a      	movs	r3, #26
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
        break;
 800376e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d100      	bne.n	8003778 <UART_SetConfig+0x16c>
 8003776:	e08d      	b.n	8003894 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800377c:	4b57      	ldr	r3, [pc, #348]	@ (80038dc <UART_SetConfig+0x2d0>)
 800377e:	0052      	lsls	r2, r2, #1
 8003780:	5ad3      	ldrh	r3, [r2, r3]
 8003782:	0019      	movs	r1, r3
 8003784:	6978      	ldr	r0, [r7, #20]
 8003786:	f7fc fcbb 	bl	8000100 <__udivsi3>
 800378a:	0003      	movs	r3, r0
 800378c:	005a      	lsls	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	18d2      	adds	r2, r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	0019      	movs	r1, r3
 800379c:	0010      	movs	r0, r2
 800379e:	f7fc fcaf 	bl	8000100 <__udivsi3>
 80037a2:	0003      	movs	r3, r0
 80037a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d91c      	bls.n	80037e6 <UART_SetConfig+0x1da>
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	025b      	lsls	r3, r3, #9
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d217      	bcs.n	80037e6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	200e      	movs	r0, #14
 80037bc:	183b      	adds	r3, r7, r0
 80037be:	210f      	movs	r1, #15
 80037c0:	438a      	bics	r2, r1
 80037c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2207      	movs	r2, #7
 80037cc:	4013      	ands	r3, r2
 80037ce:	b299      	uxth	r1, r3
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	183a      	adds	r2, r7, r0
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	183a      	adds	r2, r7, r0
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e056      	b.n	8003894 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80037e6:	231a      	movs	r3, #26
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e051      	b.n	8003894 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f0:	231b      	movs	r3, #27
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d015      	beq.n	8003826 <UART_SetConfig+0x21a>
 80037fa:	dc18      	bgt.n	800382e <UART_SetConfig+0x222>
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d00d      	beq.n	800381c <UART_SetConfig+0x210>
 8003800:	dc15      	bgt.n	800382e <UART_SetConfig+0x222>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <UART_SetConfig+0x200>
 8003806:	2b02      	cmp	r3, #2
 8003808:	d005      	beq.n	8003816 <UART_SetConfig+0x20a>
 800380a:	e010      	b.n	800382e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380c:	f7fe fdfa 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8003810:	0003      	movs	r3, r0
 8003812:	617b      	str	r3, [r7, #20]
        break;
 8003814:	e012      	b.n	800383c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003816:	4b30      	ldr	r3, [pc, #192]	@ (80038d8 <UART_SetConfig+0x2cc>)
 8003818:	617b      	str	r3, [r7, #20]
        break;
 800381a:	e00f      	b.n	800383c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381c:	f7fe fd66 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8003820:	0003      	movs	r3, r0
 8003822:	617b      	str	r3, [r7, #20]
        break;
 8003824:	e00a      	b.n	800383c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003826:	2380      	movs	r3, #128	@ 0x80
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	617b      	str	r3, [r7, #20]
        break;
 800382c:	e006      	b.n	800383c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003832:	231a      	movs	r3, #26
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	2201      	movs	r2, #1
 8003838:	701a      	strb	r2, [r3, #0]
        break;
 800383a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d028      	beq.n	8003894 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003846:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <UART_SetConfig+0x2d0>)
 8003848:	0052      	lsls	r2, r2, #1
 800384a:	5ad3      	ldrh	r3, [r2, r3]
 800384c:	0019      	movs	r1, r3
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7fc fc56 	bl	8000100 <__udivsi3>
 8003854:	0003      	movs	r3, r0
 8003856:	001a      	movs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	18d2      	adds	r2, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f7fc fc4a 	bl	8000100 <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d90a      	bls.n	800388c <UART_SetConfig+0x280>
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	025b      	lsls	r3, r3, #9
 800387c:	429a      	cmp	r2, r3
 800387e:	d205      	bcs.n	800388c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	e003      	b.n	8003894 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800388c:	231a      	movs	r3, #26
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	226a      	movs	r2, #106	@ 0x6a
 8003898:	2101      	movs	r1, #1
 800389a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2268      	movs	r2, #104	@ 0x68
 80038a0:	2101      	movs	r1, #1
 80038a2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038b0:	231a      	movs	r3, #26
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	781b      	ldrb	r3, [r3, #0]
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b008      	add	sp, #32
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	cfff69f3 	.word	0xcfff69f3
 80038c4:	ffffcfff 	.word	0xffffcfff
 80038c8:	11fff4ff 	.word	0x11fff4ff
 80038cc:	40013800 	.word	0x40013800
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40004400 	.word	0x40004400
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	08003e6c 	.word	0x08003e6c

080038e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	2208      	movs	r2, #8
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003a24 <UART_AdvFeatureConfig+0x144>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	2201      	movs	r2, #1
 8003910:	4013      	ands	r3, r2
 8003912:	d00b      	beq.n	800392c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a43      	ldr	r2, [pc, #268]	@ (8003a28 <UART_AdvFeatureConfig+0x148>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	2202      	movs	r2, #2
 8003932:	4013      	ands	r3, r2
 8003934:	d00b      	beq.n	800394e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a2c <UART_AdvFeatureConfig+0x14c>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	2204      	movs	r2, #4
 8003954:	4013      	ands	r3, r2
 8003956:	d00b      	beq.n	8003970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4a34      	ldr	r2, [pc, #208]	@ (8003a30 <UART_AdvFeatureConfig+0x150>)
 8003960:	4013      	ands	r3, r2
 8003962:	0019      	movs	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	2210      	movs	r2, #16
 8003976:	4013      	ands	r3, r2
 8003978:	d00b      	beq.n	8003992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a2c      	ldr	r2, [pc, #176]	@ (8003a34 <UART_AdvFeatureConfig+0x154>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	2220      	movs	r2, #32
 8003998:	4013      	ands	r3, r2
 800399a:	d00b      	beq.n	80039b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	4a25      	ldr	r2, [pc, #148]	@ (8003a38 <UART_AdvFeatureConfig+0x158>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	2240      	movs	r2, #64	@ 0x40
 80039ba:	4013      	ands	r3, r2
 80039bc:	d01d      	beq.n	80039fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a3c <UART_AdvFeatureConfig+0x15c>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	035b      	lsls	r3, r3, #13
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10b      	bne.n	80039fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <UART_AdvFeatureConfig+0x160>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	2280      	movs	r2, #128	@ 0x80
 8003a00:	4013      	ands	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a44 <UART_AdvFeatureConfig+0x164>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	ffff7fff 	.word	0xffff7fff
 8003a28:	fffdffff 	.word	0xfffdffff
 8003a2c:	fffeffff 	.word	0xfffeffff
 8003a30:	fffbffff 	.word	0xfffbffff
 8003a34:	ffffefff 	.word	0xffffefff
 8003a38:	ffffdfff 	.word	0xffffdfff
 8003a3c:	ffefffff 	.word	0xffefffff
 8003a40:	ff9fffff 	.word	0xff9fffff
 8003a44:	fff7ffff 	.word	0xfff7ffff

08003a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b092      	sub	sp, #72	@ 0x48
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2290      	movs	r2, #144	@ 0x90
 8003a54:	2100      	movs	r1, #0
 8003a56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a58:	f7fd f926 	bl	8000ca8 <HAL_GetTick>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2208      	movs	r2, #8
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d12d      	bne.n	8003aca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a70:	2280      	movs	r2, #128	@ 0x80
 8003a72:	0391      	lsls	r1, r2, #14
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4a47      	ldr	r2, [pc, #284]	@ (8003b94 <UART_CheckIdleState+0x14c>)
 8003a78:	9200      	str	r2, [sp, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f000 f88e 	bl	8003b9c <UART_WaitOnFlagUntilTimeout>
 8003a80:	1e03      	subs	r3, r0, #0
 8003a82:	d022      	beq.n	8003aca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a84:	f3ef 8310 	mrs	r3, PRIMASK
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a8e:	2301      	movs	r3, #1
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	f383 8810 	msr	PRIMASK, r3
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	@ 0x80
 8003aa6:	438a      	bics	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	f383 8810 	msr	PRIMASK, r3
}
 8003ab4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2288      	movs	r2, #136	@ 0x88
 8003aba:	2120      	movs	r1, #32
 8003abc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2284      	movs	r2, #132	@ 0x84
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e060      	b.n	8003b8c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d146      	bne.n	8003b66 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ada:	2280      	movs	r2, #128	@ 0x80
 8003adc:	03d1      	lsls	r1, r2, #15
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <UART_CheckIdleState+0x14c>)
 8003ae2:	9200      	str	r2, [sp, #0]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f000 f859 	bl	8003b9c <UART_WaitOnFlagUntilTimeout>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d03b      	beq.n	8003b66 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003af4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af8:	2301      	movs	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4922      	ldr	r1, [pc, #136]	@ (8003b98 <UART_CheckIdleState+0x150>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b20:	f3ef 8310 	mrs	r3, PRIMASK
 8003b24:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b26:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f383 8810 	msr	PRIMASK, r3
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	438a      	bics	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	228c      	movs	r2, #140	@ 0x8c
 8003b56:	2120      	movs	r1, #32
 8003b58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2284      	movs	r2, #132	@ 0x84
 8003b5e:	2100      	movs	r1, #0
 8003b60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e012      	b.n	8003b8c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2288      	movs	r2, #136	@ 0x88
 8003b6a:	2120      	movs	r1, #32
 8003b6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	228c      	movs	r2, #140	@ 0x8c
 8003b72:	2120      	movs	r1, #32
 8003b74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2284      	movs	r2, #132	@ 0x84
 8003b86:	2100      	movs	r1, #0
 8003b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b010      	add	sp, #64	@ 0x40
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	01ffffff 	.word	0x01ffffff
 8003b98:	fffffedf 	.word	0xfffffedf

08003b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bac:	e051      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	d04e      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb4:	f7fd f878 	bl	8000ca8 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e051      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b80      	cmp	r3, #128	@ 0x80
 8003bde:	d038      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d035      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	2208      	movs	r2, #8
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d111      	bne.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f83c 	bl	8003c7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2290      	movs	r2, #144	@ 0x90
 8003c08:	2108      	movs	r1, #8
 8003c0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2284      	movs	r2, #132	@ 0x84
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e02c      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	2380      	movs	r3, #128	@ 0x80
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	401a      	ands	r2, r3
 8003c24:	2380      	movs	r3, #128	@ 0x80
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d112      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2280      	movs	r2, #128	@ 0x80
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f81f 	bl	8003c7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2290      	movs	r2, #144	@ 0x90
 8003c42:	2120      	movs	r1, #32
 8003c44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2284      	movs	r2, #132	@ 0x84
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e00f      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	425a      	negs	r2, r3
 8003c62:	4153      	adcs	r3, r2
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	001a      	movs	r2, r3
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d09e      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08e      	sub	sp, #56	@ 0x38
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c84:	f3ef 8310 	mrs	r3, PRIMASK
 8003c88:	617b      	str	r3, [r7, #20]
  return(result);
 8003c8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f383 8810 	msr	PRIMASK, r3
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4926      	ldr	r1, [pc, #152]	@ (8003d40 <UART_EndRxTransfer+0xc4>)
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f383 8810 	msr	PRIMASK, r3
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cba:	623b      	str	r3, [r7, #32]
  return(result);
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	f383 8810 	msr	PRIMASK, r3
}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	491b      	ldr	r1, [pc, #108]	@ (8003d44 <UART_EndRxTransfer+0xc8>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d118      	bne.n	8003d22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2110      	movs	r1, #16
 8003d12:	438a      	bics	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	228c      	movs	r2, #140	@ 0x8c
 8003d26:	2120      	movs	r1, #32
 8003d28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b00e      	add	sp, #56	@ 0x38
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	fffffedf 	.word	0xfffffedf
 8003d44:	effffffe 	.word	0xeffffffe

08003d48 <memset>:
 8003d48:	0003      	movs	r3, r0
 8003d4a:	1882      	adds	r2, r0, r2
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	7019      	strb	r1, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	4c0c      	ldr	r4, [pc, #48]	@ (8003d90 <__libc_init_array+0x38>)
 8003d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8003d94 <__libc_init_array+0x3c>)
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	2600      	movs	r6, #0
 8003d6a:	f000 f819 	bl	8003da0 <_init>
 8003d6e:	4c0a      	ldr	r4, [pc, #40]	@ (8003d98 <__libc_init_array+0x40>)
 8003d70:	4d0a      	ldr	r5, [pc, #40]	@ (8003d9c <__libc_init_array+0x44>)
 8003d72:	1b64      	subs	r4, r4, r5
 8003d74:	10a4      	asrs	r4, r4, #2
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	00b3      	lsls	r3, r6, #2
 8003d7e:	58eb      	ldr	r3, [r5, r3]
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	00b3      	lsls	r3, r6, #2
 8003d88:	58eb      	ldr	r3, [r5, r3]
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	08003e84 	.word	0x08003e84
 8003d94:	08003e84 	.word	0x08003e84
 8003d98:	08003e88 	.word	0x08003e88
 8003d9c:	08003e84 	.word	0x08003e84

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
