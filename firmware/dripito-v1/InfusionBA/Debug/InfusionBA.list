
InfusionBA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004158  08004158  00005158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004224  08004224  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004224  08004224  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004224  08004224  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004224  08004224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004228  08004228  00005228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800422c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08004238  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004238  00006200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ef9  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243d  00000000  00000000  00018f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df1  00000000  00000000  0001c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fb2  00000000  00000000  0001d309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014edc  00000000  00000000  000342bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000987fe  00000000  00000000  00049197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f4  00000000  00000000  000e19d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e5acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004140 	.word	0x08004140

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004140 	.word	0x08004140

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <Buzzer_SetDuty>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void Buzzer_SetDuty(uint16_t duty)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	0002      	movs	r2, r0
 8000220:	1dbb      	adds	r3, r7, #6
 8000222:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8000224:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <Buzzer_SetDuty+0x20>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	1dba      	adds	r2, r7, #6
 800022a:	8812      	ldrh	r2, [r2, #0]
 800022c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800022e:	46c0      	nop			@ (mov r8, r8)
 8000230:	46bd      	mov	sp, r7
 8000232:	b002      	add	sp, #8
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)
 8000238:	2000011c 	.word	0x2000011c

0800023c <Buzzer_PlayFreq>:
void Buzzer_PlayFreq(uint16_t freq, uint16_t duration_ms)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	0002      	movs	r2, r0
 8000244:	1dbb      	adds	r3, r7, #6
 8000246:	801a      	strh	r2, [r3, #0]
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	1c0a      	adds	r2, r1, #0
 800024c:	801a      	strh	r2, [r3, #0]
    uint32_t timer_clk = 1000000;  // TIM1 clock after prescaler = 64 MHz / (63 + 1)
 800024e:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <Buzzer_PlayFreq+0x5c>)
 8000250:	60fb      	str	r3, [r7, #12]
    uint32_t period = timer_clk / freq;
 8000252:	1dbb      	adds	r3, r7, #6
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	0019      	movs	r1, r3
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f7ff ff51 	bl	8000100 <__udivsi3>
 800025e:	0003      	movs	r3, r0
 8000260:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000262:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <Buzzer_PlayFreq+0x60>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	68ba      	ldr	r2, [r7, #8]
 8000268:	3a01      	subs	r2, #1
 800026a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	1e5a      	subs	r2, r3, #1
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <Buzzer_PlayFreq+0x60>)
 8000272:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, period / 2);  // 50% duty
 8000274:	4b09      	ldr	r3, [pc, #36]	@ (800029c <Buzzer_PlayFreq+0x60>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	68ba      	ldr	r2, [r7, #8]
 800027a:	0852      	lsrs	r2, r2, #1
 800027c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(duration_ms);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fdae 	bl	8000de4 <HAL_Delay>
    Buzzer_SetDuty(0);
 8000288:	2000      	movs	r0, #0
 800028a:	f7ff ffc5 	bl	8000218 <Buzzer_SetDuty>
}
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b004      	add	sp, #16
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	000f4240 	.word	0x000f4240
 800029c:	2000011c 	.word	0x2000011c

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 fd18 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f85e 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f000 fa7c 	bl	80007a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002b0:	f000 f8b8 	bl	8000424 <MX_ADC1_Init>
  MX_RTC_Init();
 80002b4:	f000 f922 	bl	80004fc <MX_RTC_Init>
  MX_SPI1_Init();
 80002b8:	f000 f94e 	bl	8000558 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002bc:	f000 f98a 	bl	80005d4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80002c0:	f000 fa3e 	bl	8000740 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002c4:	4b23      	ldr	r3, [pc, #140]	@ (8000354 <main+0xb4>)
 80002c6:	2100      	movs	r1, #0
 80002c8:	0018      	movs	r0, r3
 80002ca:	f002 fd09 	bl	8002ce0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(BTN_PORT, BTN_MINUS_Pin) == GPIO_PIN_RESET)
 80002ce:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <main+0xb8>)
 80002d0:	2140      	movs	r1, #64	@ 0x40
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fc40 	bl	8001b58 <HAL_GPIO_ReadPin>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d107      	bne.n	80002ec <main+0x4c>
	      {
	          Buzzer_PlayFreq(3800, 100);  // 2 kHz, 100 ms
 80002dc:	4b1f      	ldr	r3, [pc, #124]	@ (800035c <main+0xbc>)
 80002de:	2164      	movs	r1, #100	@ 0x64
 80002e0:	0018      	movs	r0, r3
 80002e2:	f7ff ffab 	bl	800023c <Buzzer_PlayFreq>

	          HAL_Delay(200);              // debounce
 80002e6:	20c8      	movs	r0, #200	@ 0xc8
 80002e8:	f000 fd7c 	bl	8000de4 <HAL_Delay>
	      }

	      if (HAL_GPIO_ReadPin(BTN_PORT, BTN_PLUS_Pin) == GPIO_PIN_RESET)
 80002ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <main+0xb8>)
 80002ee:	2180      	movs	r1, #128	@ 0x80
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 fc31 	bl	8001b58 <HAL_GPIO_ReadPin>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d108      	bne.n	800030c <main+0x6c>
	      {
	          Buzzer_PlayFreq(4000, 100);
 80002fa:	23fa      	movs	r3, #250	@ 0xfa
 80002fc:	011b      	lsls	r3, r3, #4
 80002fe:	2164      	movs	r1, #100	@ 0x64
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ff9b 	bl	800023c <Buzzer_PlayFreq>

	          HAL_Delay(200);
 8000306:	20c8      	movs	r0, #200	@ 0xc8
 8000308:	f000 fd6c 	bl	8000de4 <HAL_Delay>
	      }

	      if (HAL_GPIO_ReadPin(BTN_PORT, BTN_MODE_Pin) == GPIO_PIN_RESET)
 800030c:	2380      	movs	r3, #128	@ 0x80
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4a11      	ldr	r2, [pc, #68]	@ (8000358 <main+0xb8>)
 8000312:	0019      	movs	r1, r3
 8000314:	0010      	movs	r0, r2
 8000316:	f001 fc1f 	bl	8001b58 <HAL_GPIO_ReadPin>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d107      	bne.n	800032e <main+0x8e>
	      {
	          Buzzer_PlayFreq(4200, 100);
 800031e:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <main+0xc0>)
 8000320:	2164      	movs	r1, #100	@ 0x64
 8000322:	0018      	movs	r0, r3
 8000324:	f7ff ff8a 	bl	800023c <Buzzer_PlayFreq>

	          HAL_Delay(200);
 8000328:	20c8      	movs	r0, #200	@ 0xc8
 800032a:	f000 fd5b 	bl	8000de4 <HAL_Delay>
	      }

	      if (HAL_GPIO_ReadPin(BTN_PORT, BTN_MUTE_Pin) == GPIO_PIN_RESET)
 800032e:	2380      	movs	r3, #128	@ 0x80
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4a09      	ldr	r2, [pc, #36]	@ (8000358 <main+0xb8>)
 8000334:	0019      	movs	r1, r3
 8000336:	0010      	movs	r0, r2
 8000338:	f001 fc0e 	bl	8001b58 <HAL_GPIO_ReadPin>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d1c6      	bne.n	80002ce <main+0x2e>
	      {
	          Buzzer_PlayFreq(4400, 100);
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <main+0xc4>)
 8000342:	2164      	movs	r1, #100	@ 0x64
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff ff79 	bl	800023c <Buzzer_PlayFreq>

	          HAL_Delay(200);
 800034a:	20c8      	movs	r0, #200	@ 0xc8
 800034c:	f000 fd4a 	bl	8000de4 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(BTN_PORT, BTN_MINUS_Pin) == GPIO_PIN_RESET)
 8000350:	e7bd      	b.n	80002ce <main+0x2e>
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	2000011c 	.word	0x2000011c
 8000358:	50000400 	.word	0x50000400
 800035c:	00000ed8 	.word	0x00000ed8
 8000360:	00001068 	.word	0x00001068
 8000364:	00001130 	.word	0x00001130

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b093      	sub	sp, #76	@ 0x4c
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	2414      	movs	r4, #20
 8000370:	193b      	adds	r3, r7, r4
 8000372:	0018      	movs	r0, r3
 8000374:	2334      	movs	r3, #52	@ 0x34
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f003 feb5 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	0018      	movs	r0, r3
 8000382:	2310      	movs	r3, #16
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f003 feae 	bl	80040e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800038c:	2380      	movs	r3, #128	@ 0x80
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	0018      	movs	r0, r3
 8000392:	f001 fc1b 	bl	8001bcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000396:	193b      	adds	r3, r7, r4
 8000398:	220a      	movs	r2, #10
 800039a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	193b      	adds	r3, r7, r4
 800039e:	2280      	movs	r2, #128	@ 0x80
 80003a0:	0052      	lsls	r2, r2, #1
 80003a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003a4:	0021      	movs	r1, r4
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2240      	movs	r2, #64	@ 0x40
 80003b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2201      	movs	r2, #1
 80003b6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2202      	movs	r2, #2
 80003bc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2202      	movs	r2, #2
 80003c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2208      	movs	r2, #8
 80003ce:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	0292      	lsls	r2, r2, #10
 80003d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2280      	movs	r2, #128	@ 0x80
 80003dc:	0592      	lsls	r2, r2, #22
 80003de:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	0018      	movs	r0, r3
 80003e4:	f001 fc3e 	bl	8001c64 <HAL_RCC_OscConfig>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003ec:	f000 fa6a 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2207      	movs	r2, #7
 80003f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2202      	movs	r2, #2
 80003fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2102      	movs	r1, #2
 800040c:	0018      	movs	r0, r3
 800040e:	f001 ff39 	bl	8002284 <HAL_RCC_ClockConfig>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000416:	f000 fa55 	bl	80008c4 <Error_Handler>
  }
}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b013      	add	sp, #76	@ 0x4c
 8000420:	bd90      	pop	{r4, r7, pc}
	...

08000424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	0018      	movs	r0, r3
 800042e:	230c      	movs	r3, #12
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f003 fe58 	bl	80040e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000438:	4b2d      	ldr	r3, [pc, #180]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 800043a:	4a2e      	ldr	r2, [pc, #184]	@ (80004f4 <MX_ADC1_Init+0xd0>)
 800043c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800043e:	4b2c      	ldr	r3, [pc, #176]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	05d2      	lsls	r2, r2, #23
 8000444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000446:	4b2a      	ldr	r3, [pc, #168]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044c:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000452:	4b27      	ldr	r3, [pc, #156]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000458:	4b25      	ldr	r3, [pc, #148]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 800045a:	2204      	movs	r2, #4
 800045c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800045e:	4b24      	ldr	r3, [pc, #144]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000460:	2200      	movs	r2, #0
 8000462:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000464:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000466:	2200      	movs	r2, #0
 8000468:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800046a:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 800046c:	2200      	movs	r2, #0
 800046e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000470:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000472:	2201      	movs	r2, #1
 8000474:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000476:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000478:	2220      	movs	r2, #32
 800047a:	2100      	movs	r1, #0
 800047c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000480:	2200      	movs	r2, #0
 8000482:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000486:	2200      	movs	r2, #0
 8000488:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800048a:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 800048c:	222c      	movs	r2, #44	@ 0x2c
 800048e:	2100      	movs	r1, #0
 8000490:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000498:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 800049a:	2200      	movs	r2, #0
 800049c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800049e:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80004a4:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 80004a6:	223c      	movs	r2, #60	@ 0x3c
 80004a8:	2100      	movs	r1, #0
 80004aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004ac:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fdb7 	bl	8001028 <HAL_ADC_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004be:	f000 fa01 	bl	80008c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4a0c      	ldr	r2, [pc, #48]	@ (80004f8 <MX_ADC1_Init+0xd4>)
 80004c6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d4:	1d3a      	adds	r2, r7, #4
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_ADC1_Init+0xcc>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 ff4c 	bl	8001378 <HAL_ADC_ConfigChannel>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004e4:	f000 f9ee 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b004      	add	sp, #16
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000028 	.word	0x20000028
 80004f4:	40012400 	.word	0x40012400
 80004f8:	0c000008 	.word	0x0c000008

080004fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000500:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <MX_RTC_Init+0x54>)
 8000502:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <MX_RTC_Init+0x58>)
 8000504:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000506:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_RTC_Init+0x54>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800050c:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <MX_RTC_Init+0x54>)
 800050e:	227f      	movs	r2, #127	@ 0x7f
 8000510:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_RTC_Init+0x54>)
 8000514:	22ff      	movs	r2, #255	@ 0xff
 8000516:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <MX_RTC_Init+0x54>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_RTC_Init+0x54>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <MX_RTC_Init+0x54>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_RTC_Init+0x54>)
 800052c:	2280      	movs	r2, #128	@ 0x80
 800052e:	05d2      	lsls	r2, r2, #23
 8000530:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <MX_RTC_Init+0x54>)
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <MX_RTC_Init+0x54>)
 800053a:	0018      	movs	r0, r3
 800053c:	f002 f972 	bl	8002824 <HAL_RTC_Init>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000544:	f000 f9be 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	2000008c 	.word	0x2000008c
 8000554:	40002800 	.word	0x40002800

08000558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <MX_SPI1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <MX_SPI1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000562:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <MX_SPI1_Init+0x74>)
 8000564:	2282      	movs	r2, #130	@ 0x82
 8000566:	0052      	lsls	r2, r2, #1
 8000568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800056a:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <MX_SPI1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000570:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_SPI1_Init+0x74>)
 8000572:	22e0      	movs	r2, #224	@ 0xe0
 8000574:	00d2      	lsls	r2, r2, #3
 8000576:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_SPI1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_SPI1_Init+0x74>)
 8000586:	2280      	movs	r2, #128	@ 0x80
 8000588:	0092      	lsls	r2, r2, #2
 800058a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_SPI1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_SPI1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_SPI1_Init+0x74>)
 80005a6:	2207      	movs	r2, #7
 80005a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <MX_SPI1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_SPI1_Init+0x74>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <MX_SPI1_Init+0x74>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fa81 	bl	8002ac0 <HAL_SPI_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f97f 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000b8 	.word	0x200000b8
 80005d0:	40013000 	.word	0x40013000

080005d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b098      	sub	sp, #96	@ 0x60
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	2354      	movs	r3, #84	@ 0x54
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	230c      	movs	r3, #12
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f003 fd7f 	bl	80040e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	2338      	movs	r3, #56	@ 0x38
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	0018      	movs	r0, r3
 80005f0:	231c      	movs	r3, #28
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fd77 	bl	80040e8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2334      	movs	r3, #52	@ 0x34
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 fd70 	bl	80040e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000608:	4b4b      	ldr	r3, [pc, #300]	@ (8000738 <MX_TIM1_Init+0x164>)
 800060a:	4a4c      	ldr	r2, [pc, #304]	@ (800073c <MX_TIM1_Init+0x168>)
 800060c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800060e:	4b4a      	ldr	r3, [pc, #296]	@ (8000738 <MX_TIM1_Init+0x164>)
 8000610:	223f      	movs	r2, #63	@ 0x3f
 8000612:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b48      	ldr	r3, [pc, #288]	@ (8000738 <MX_TIM1_Init+0x164>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 800061a:	4b47      	ldr	r3, [pc, #284]	@ (8000738 <MX_TIM1_Init+0x164>)
 800061c:	22f9      	movs	r2, #249	@ 0xf9
 800061e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000620:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <MX_TIM1_Init+0x164>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000626:	4b44      	ldr	r3, [pc, #272]	@ (8000738 <MX_TIM1_Init+0x164>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800062c:	4b42      	ldr	r3, [pc, #264]	@ (8000738 <MX_TIM1_Init+0x164>)
 800062e:	2280      	movs	r2, #128	@ 0x80
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000632:	4b41      	ldr	r3, [pc, #260]	@ (8000738 <MX_TIM1_Init+0x164>)
 8000634:	0018      	movs	r0, r3
 8000636:	f002 fafb 	bl	8002c30 <HAL_TIM_PWM_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 f941 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2154      	movs	r1, #84	@ 0x54
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000656:	187a      	adds	r2, r7, r1
 8000658:	4b37      	ldr	r3, [pc, #220]	@ (8000738 <MX_TIM1_Init+0x164>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f003 f851 	bl	8003704 <HAL_TIMEx_MasterConfigSynchronization>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000666:	f000 f92d 	bl	80008c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066a:	2138      	movs	r1, #56	@ 0x38
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2260      	movs	r2, #96	@ 0x60
 8000670:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000696:	1879      	adds	r1, r7, r1
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <MX_TIM1_Init+0x164>)
 800069a:	2200      	movs	r2, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f002 fbf7 	bl	8002e90 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80006a6:	f000 f90d 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006aa:	2338      	movs	r3, #56	@ 0x38
 80006ac:	18f9      	adds	r1, r7, r3
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <MX_TIM1_Init+0x164>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 fbec 	bl	8002e90 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80006bc:	f000 f902 	bl	80008c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2280      	movs	r2, #128	@ 0x80
 80006e2:	0192      	lsls	r2, r2, #6
 80006e4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	0492      	lsls	r2, r2, #18
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000712:	1d3a      	adds	r2, r7, #4
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_TIM1_Init+0x164>)
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f003 f855 	bl	80037c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000722:	f000 f8cf 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000726:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <MX_TIM1_Init+0x164>)
 8000728:	0018      	movs	r0, r3
 800072a:	f000 f9e1 	bl	8000af0 <HAL_TIM_MspPostInit>

}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b018      	add	sp, #96	@ 0x60
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	2000011c 	.word	0x2000011c
 800073c:	40012c00 	.word	0x40012c00

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <MX_USART2_UART_Init+0x64>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 800074c:	22e1      	movs	r2, #225	@ 0xe1
 800074e:	0252      	lsls	r2, r2, #9
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <MX_USART2_UART_Init+0x60>)
 800078a:	0018      	movs	r0, r3
 800078c:	f003 f8b8 	bl	8003900 <HAL_UART_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000794:	f000 f896 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	20000168 	.word	0x20000168
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b089      	sub	sp, #36	@ 0x24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	240c      	movs	r4, #12
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2314      	movs	r3, #20
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f003 fc95 	bl	80040e8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b3e      	ldr	r3, [pc, #248]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b3d      	ldr	r3, [pc, #244]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007c4:	2104      	movs	r1, #4
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b3b      	ldr	r3, [pc, #236]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2204      	movs	r2, #4
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007da:	4b37      	ldr	r3, [pc, #220]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e2:	4b35      	ldr	r3, [pc, #212]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007f4:	2102      	movs	r1, #2
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007fa:	4b2f      	ldr	r3, [pc, #188]	@ (80008b8 <MX_GPIO_Init+0x110>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007fe:	2202      	movs	r2, #2
 8000800:	4013      	ands	r3, r2
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_GPIO_Init+0x114>)
 8000808:	2200      	movs	r2, #0
 800080a:	2103      	movs	r1, #3
 800080c:	0018      	movs	r0, r3
 800080e:	f001 f9c0 	bl	8001b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_MODE_CTRL_GPIO_Port, BOOST_MODE_CTRL_Pin, GPIO_PIN_SET);
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	015b      	lsls	r3, r3, #5
 8000816:	4829      	ldr	r0, [pc, #164]	@ (80008bc <MX_GPIO_Init+0x114>)
 8000818:	2201      	movs	r2, #1
 800081a:	0019      	movs	r1, r3
 800081c:	f001 f9b9 	bl	8001b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2201      	movs	r2, #1
 8000830:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000838:	193b      	adds	r3, r7, r4
 800083a:	4a20      	ldr	r2, [pc, #128]	@ (80008bc <MX_GPIO_Init+0x114>)
 800083c:	0019      	movs	r1, r3
 800083e:	0010      	movs	r0, r2
 8000840:	f001 f826 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin BOOST_MODE_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|BOOST_MODE_CTRL_Pin;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	4a1e      	ldr	r2, [pc, #120]	@ (80008c0 <MX_GPIO_Init+0x118>)
 8000848:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2201      	movs	r2, #1
 800084e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	193b      	adds	r3, r7, r4
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <MX_GPIO_Init+0x114>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f001 f814 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : DROP_INT_Pin */
  GPIO_InitStruct.Pin = DROP_INT_Pin;
 8000868:	0021      	movs	r1, r4
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2280      	movs	r2, #128	@ 0x80
 800086e:	00d2      	lsls	r2, r2, #3
 8000870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2284      	movs	r2, #132	@ 0x84
 8000876:	0392      	lsls	r2, r2, #14
 8000878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DROP_INT_GPIO_Port, &GPIO_InitStruct);
 8000880:	000c      	movs	r4, r1
 8000882:	187b      	adds	r3, r7, r1
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <MX_GPIO_Init+0x114>)
 8000886:	0019      	movs	r1, r3
 8000888:	0010      	movs	r0, r2
 800088a:	f001 f801 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_MINUS_Pin BTN_PLUS_Pin BTN_MODE_Pin BTN_MUTE_Pin */
  GPIO_InitStruct.Pin = BTN_MINUS_Pin|BTN_PLUS_Pin|BTN_MODE_Pin|BTN_MUTE_Pin;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	22f0      	movs	r2, #240	@ 0xf0
 8000894:	0092      	lsls	r2, r2, #2
 8000896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2201      	movs	r2, #1
 80008a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <MX_GPIO_Init+0x114>)
 80008a8:	0019      	movs	r1, r3
 80008aa:	0010      	movs	r0, r2
 80008ac:	f000 fff0 	bl	8001890 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b009      	add	sp, #36	@ 0x24
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	50000400 	.word	0x50000400
 80008c0:	00001002 	.word	0x00001002

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_MspInit+0x44>)
 80008d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <HAL_MspInit+0x44>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_MspInit+0x44>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_MspInit+0x44>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_MspInit+0x44>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	0549      	lsls	r1, r1, #21
 80008f8:	430a      	orrs	r2, r1
 80008fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_MspInit+0x44>)
 80008fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	055b      	lsls	r3, r3, #21
 8000904:	4013      	ands	r3, r2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b002      	add	sp, #8
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b08b      	sub	sp, #44	@ 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	2414      	movs	r4, #20
 8000922:	193b      	adds	r3, r7, r4
 8000924:	0018      	movs	r0, r3
 8000926:	2314      	movs	r3, #20
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f003 fbdc 	bl	80040e8 <memset>
  if(hadc->Instance==ADC1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a18      	ldr	r2, [pc, #96]	@ (8000998 <HAL_ADC_MspInit+0x80>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d129      	bne.n	800098e <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_ADC_MspInit+0x84>)
 800093c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_ADC_MspInit+0x84>)
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	0349      	lsls	r1, r1, #13
 8000944:	430a      	orrs	r2, r1
 8000946:	641a      	str	r2, [r3, #64]	@ 0x40
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_ADC_MspInit+0x84>)
 800094a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	035b      	lsls	r3, r3, #13
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_ADC_MspInit+0x84>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <HAL_ADC_MspInit+0x84>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_ADC_MspInit+0x84>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = PD_ADC_Pin|GPIO_PIN_4;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2218      	movs	r2, #24
 8000972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2203      	movs	r2, #3
 8000978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	193a      	adds	r2, r7, r4
 8000982:	23a0      	movs	r3, #160	@ 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f000 ff81 	bl	8001890 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b00b      	add	sp, #44	@ 0x2c
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	40012400 	.word	0x40012400
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b08b      	sub	sp, #44	@ 0x2c
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	2410      	movs	r4, #16
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	0018      	movs	r0, r3
 80009ae:	2318      	movs	r3, #24
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f003 fb98 	bl	80040e8 <memset>
  if(hrtc->Instance==RTC)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <HAL_RTC_MspInit+0x74>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d124      	bne.n	8000a0c <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2280      	movs	r2, #128	@ 0x80
 80009c6:	0292      	lsls	r2, r2, #10
 80009c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 fdff 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009de:	f7ff ff71 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <HAL_RTC_MspInit+0x78>)
 80009e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_RTC_MspInit+0x78>)
 80009e8:	2180      	movs	r1, #128	@ 0x80
 80009ea:	0209      	lsls	r1, r1, #8
 80009ec:	430a      	orrs	r2, r1
 80009ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_RTC_MspInit+0x78>)
 80009f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_RTC_MspInit+0x78>)
 80009f6:	2180      	movs	r1, #128	@ 0x80
 80009f8:	00c9      	lsls	r1, r1, #3
 80009fa:	430a      	orrs	r2, r1
 80009fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_RTC_MspInit+0x78>)
 8000a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b00b      	add	sp, #44	@ 0x2c
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40002800 	.word	0x40002800
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b08b      	sub	sp, #44	@ 0x2c
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	2414      	movs	r4, #20
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f003 fb5a 	bl	80040e8 <memset>
  if(hspi->Instance==SPI1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <HAL_SPI_MspInit+0x8c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d130      	bne.n	8000aa0 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <HAL_SPI_MspInit+0x90>)
 8000a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <HAL_SPI_MspInit+0x90>)
 8000a44:	2180      	movs	r1, #128	@ 0x80
 8000a46:	0149      	lsls	r1, r1, #5
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <HAL_SPI_MspInit+0x90>)
 8000a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a50:	2380      	movs	r3, #128	@ 0x80
 8000a52:	015b      	lsls	r3, r3, #5
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <HAL_SPI_MspInit+0x90>)
 8000a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_SPI_MspInit+0x90>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_SPI_MspInit+0x90>)
 8000a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8000a72:	0021      	movs	r1, r4
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	22a0      	movs	r2, #160	@ 0xa0
 8000a78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	187a      	adds	r2, r7, r1
 8000a94:	23a0      	movs	r3, #160	@ 0xa0
 8000a96:	05db      	lsls	r3, r3, #23
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fef8 	bl	8001890 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b00b      	add	sp, #44	@ 0x2c
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	40013000 	.word	0x40013000
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0x38>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10d      	bne.n	8000ade <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_TIM_PWM_MspInit+0x3c>)
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_TIM_PWM_MspInit+0x3c>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	0109      	lsls	r1, r1, #4
 8000acc:	430a      	orrs	r2, r1
 8000ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_TIM_PWM_MspInit+0x3c>)
 8000ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b004      	add	sp, #16
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	40012c00 	.word	0x40012c00
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b08b      	sub	sp, #44	@ 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	2414      	movs	r4, #20
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	2314      	movs	r3, #20
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f003 faf0 	bl	80040e8 <memset>
  if(htim->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <HAL_TIM_MspPostInit+0xb4>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d144      	bne.n	8000b9c <HAL_TIM_MspPostInit+0xac>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <HAL_TIM_MspPostInit+0xb8>)
 8000b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <HAL_TIM_MspPostInit+0xb8>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <HAL_TIM_MspPostInit+0xb8>)
 8000b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b22:	2201      	movs	r2, #1
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <HAL_TIM_MspPostInit+0xb8>)
 8000b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <HAL_TIM_MspPostInit+0xb8>)
 8000b30:	2102      	movs	r1, #2
 8000b32:	430a      	orrs	r2, r1
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <HAL_TIM_MspPostInit+0xb8>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	0052      	lsls	r2, r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2202      	movs	r2, #2
 8000b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	193a      	adds	r2, r7, r4
 8000b64:	23a0      	movs	r3, #160	@ 0xa0
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fe90 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_CTRL_Pin;
 8000b70:	0021      	movs	r1, r4
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2208      	movs	r2, #8
 8000b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <HAL_TIM_MspPostInit+0xbc>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f000 fe7a 	bl	8001890 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b00b      	add	sp, #44	@ 0x2c
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	40012c00 	.word	0x40012c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	50000400 	.word	0x50000400

08000bb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b08b      	sub	sp, #44	@ 0x2c
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	2414      	movs	r4, #20
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f003 fa90 	bl	80040e8 <memset>
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <HAL_UART_MspInit+0x8c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d130      	bne.n	8000c34 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <HAL_UART_MspInit+0x90>)
 8000bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_UART_MspInit+0x90>)
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	0289      	lsls	r1, r1, #10
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_UART_MspInit+0x90>)
 8000be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	029b      	lsls	r3, r3, #10
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_UART_MspInit+0x90>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_UART_MspInit+0x90>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_UART_MspInit+0x90>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|GPIO_PIN_15;
 8000c06:	0021      	movs	r1, r4
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <HAL_UART_MspInit+0x94>)
 8000c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2202      	movs	r2, #2
 8000c12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2201      	movs	r2, #1
 8000c24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	187a      	adds	r2, r7, r1
 8000c28:	23a0      	movs	r3, #160	@ 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	0011      	movs	r1, r2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fe2e 	bl	8001890 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b00b      	add	sp, #44	@ 0x2c
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40021000 	.word	0x40021000
 8000c44:	00008004 	.word	0x00008004

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	e7fd      	b.n	8000c4c <NMI_Handler+0x4>

08000c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	e7fd      	b.n	8000c54 <HardFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f89c 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c84:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c88:	f7ff fff7 	bl	8000c7a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	@ (8000cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <LoopForever+0xe>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd0 <LoopForever+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cb2:	f003 fa21 	bl	80040f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cb6:	f7ff faf3 	bl	80002a0 <main>

08000cba <LoopForever>:

LoopForever:
  b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   r0, =_estack
 8000cbc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc8:	0800422c 	.word	0x0800422c
  ldr r2, =_sbss
 8000ccc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd0:	20000200 	.word	0x20000200

08000cd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_Init+0x3c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_Init+0x3c>)
 8000cea:	2180      	movs	r1, #128	@ 0x80
 8000cec:	0049      	lsls	r1, r1, #1
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f810 	bl	8000d18 <HAL_InitTick>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e001      	b.n	8000d08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fde4 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40022000 	.word	0x40022000

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	230f      	movs	r3, #15
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <HAL_InitTick+0x88>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d02b      	beq.n	8000d88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <HAL_InitTick+0x8c>)
 8000d32:	681c      	ldr	r4, [r3, #0]
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_InitTick+0x88>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	0019      	movs	r1, r3
 8000d3a:	23fa      	movs	r3, #250	@ 0xfa
 8000d3c:	0098      	lsls	r0, r3, #2
 8000d3e:	f7ff f9df 	bl	8000100 <__udivsi3>
 8000d42:	0003      	movs	r3, r0
 8000d44:	0019      	movs	r1, r3
 8000d46:	0020      	movs	r0, r4
 8000d48:	f7ff f9da 	bl	8000100 <__udivsi3>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fd91 	bl	8001876 <HAL_SYSTICK_Config>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d112      	bne.n	8000d7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d80a      	bhi.n	8000d74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2301      	movs	r3, #1
 8000d62:	425b      	negs	r3, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 fd70 	bl	800184c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_InitTick+0x90>)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e00d      	b.n	8000d90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
 8000d7c:	e008      	b.n	8000d90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e003      	b.n	8000d90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d88:	230f      	movs	r3, #15
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	781b      	ldrb	r3, [r3, #0]
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b005      	add	sp, #20
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_IncTick+0x1c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	001a      	movs	r2, r3
 8000db6:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_IncTick+0x20>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	18d2      	adds	r2, r2, r3
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_IncTick+0x20>)
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	200001fc 	.word	0x200001fc

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	@ (8000de0 <HAL_GetTick+0x10>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	200001fc 	.word	0x200001fc

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff0 	bl	8000dd0 <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001a      	movs	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	189b      	adds	r3, r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	f7ff ffe0 	bl	8000dd0 <HAL_GetTick>
 8000e10:	0002      	movs	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	20000008 	.word	0x20000008

08000e2c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	fe3fffff 	.word	0xfe3fffff

08000e54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	23e0      	movs	r3, #224	@ 0xe0
 8000e62:	045b      	lsls	r3, r3, #17
 8000e64:	4013      	ands	r3, r2
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	2104      	movs	r1, #4
 8000e82:	400a      	ands	r2, r1
 8000e84:	2107      	movs	r1, #7
 8000e86:	4091      	lsls	r1, r2
 8000e88:	000a      	movs	r2, r1
 8000e8a:	43d2      	mvns	r2, r2
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2104      	movs	r1, #4
 8000e92:	400b      	ands	r3, r1
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4099      	lsls	r1, r3
 8000e98:	000b      	movs	r3, r1
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	2104      	movs	r1, #4
 8000eba:	400a      	ands	r2, r1
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	4091      	lsls	r1, r2
 8000ec0:	000a      	movs	r2, r1
 8000ec2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	0013      	movs	r3, r2
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	211f      	movs	r1, #31
 8000eea:	400a      	ands	r2, r1
 8000eec:	210f      	movs	r1, #15
 8000eee:	4091      	lsls	r1, r2
 8000ef0:	000a      	movs	r2, r1
 8000ef2:	43d2      	mvns	r2, r2
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0e9b      	lsrs	r3, r3, #26
 8000efa:	210f      	movs	r1, #15
 8000efc:	4019      	ands	r1, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	201f      	movs	r0, #31
 8000f02:	4003      	ands	r3, r0
 8000f04:	4099      	lsls	r1, r3
 8000f06:	000b      	movs	r3, r1
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	035b      	lsls	r3, r3, #13
 8000f28:	0b5b      	lsrs	r3, r3, #13
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	0352      	lsls	r2, r2, #13
 8000f4a:	0b52      	lsrs	r2, r2, #13
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	401a      	ands	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	0212      	lsls	r2, r2, #8
 8000f70:	43d2      	mvns	r2, r2
 8000f72:	401a      	ands	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	4904      	ldr	r1, [pc, #16]	@ (8000f90 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	07ffff00 	.word	0x07ffff00

08000f94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2280      	movs	r2, #128	@ 0x80
 8000fa6:	0552      	lsls	r2, r2, #21
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	6fffffe8 	.word	0x6fffffe8

08000fbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	401a      	ands	r2, r3
 8000fce:	2380      	movs	r3, #128	@ 0x80
 8000fd0:	055b      	lsls	r3, r3, #21
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d101      	bne.n	8000fda <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <LL_ADC_IsEnabled+0x18>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_ADC_IsEnabled+0x1a>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}

08001006 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2204      	movs	r2, #4
 8001014:	4013      	ands	r3, r2
 8001016:	2b04      	cmp	r3, #4
 8001018:	d101      	bne.n	800101e <LL_ADC_REG_IsConversionOngoing+0x18>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800101e:	2300      	movs	r3, #0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001030:	231f      	movs	r3, #31
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e17f      	b.n	800134e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fc5d 	bl	8000918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2254      	movs	r2, #84	@ 0x54
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff ffa3 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 8001076:	1e03      	subs	r3, r0, #0
 8001078:	d115      	bne.n	80010a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff ff88 	bl	8000f94 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001084:	4bb4      	ldr	r3, [pc, #720]	@ (8001358 <HAL_ADC_Init+0x330>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	49b4      	ldr	r1, [pc, #720]	@ (800135c <HAL_ADC_Init+0x334>)
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff f838 	bl	8000100 <__udivsi3>
 8001090:	0003      	movs	r3, r0
 8001092:	3301      	adds	r3, #1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001098:	e002      	b.n	80010a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3b01      	subs	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f9      	bne.n	800109a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff ff86 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d10f      	bne.n	80010d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b8:	2210      	movs	r2, #16
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c4:	2201      	movs	r2, #1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80010cc:	231f      	movs	r3, #31
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ff94 	bl	8001006 <LL_ADC_REG_IsConversionOngoing>
 80010de:	0003      	movs	r3, r0
 80010e0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	2210      	movs	r2, #16
 80010e8:	4013      	ands	r3, r2
 80010ea:	d000      	beq.n	80010ee <HAL_ADC_Init+0xc6>
 80010ec:	e122      	b.n	8001334 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d000      	beq.n	80010f6 <HAL_ADC_Init+0xce>
 80010f4:	e11e      	b.n	8001334 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	4a99      	ldr	r2, [pc, #612]	@ (8001360 <HAL_ADC_Init+0x338>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	2202      	movs	r2, #2
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff ff6a 	bl	8000fe4 <LL_ADC_IsEnabled>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d000      	beq.n	8001116 <HAL_ADC_Init+0xee>
 8001114:	e0ad      	b.n	8001272 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7e1b      	ldrb	r3, [r3, #24]
 800111e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001120:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7e5b      	ldrb	r3, [r3, #25]
 8001126:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001128:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e9b      	ldrb	r3, [r3, #26]
 800112e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001130:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <HAL_ADC_Init+0x118>
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	015b      	lsls	r3, r3, #5
 800113e:	e000      	b.n	8001142 <HAL_ADC_Init+0x11a>
 8001140:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001142:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001148:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da04      	bge.n	800115c <HAL_ADC_Init+0x134>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	085b      	lsrs	r3, r3, #1
 800115a:	e001      	b.n	8001160 <HAL_ADC_Init+0x138>
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001160:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	212c      	movs	r1, #44	@ 0x2c
 8001166:	5c5b      	ldrb	r3, [r3, r1]
 8001168:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800116a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2220      	movs	r2, #32
 8001176:	5c9b      	ldrb	r3, [r3, r2]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d115      	bne.n	80011a8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7e9b      	ldrb	r3, [r3, #26]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2280      	movs	r2, #128	@ 0x80
 8001188:	0252      	lsls	r2, r2, #9
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	e00b      	b.n	80011a8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001194:	2220      	movs	r2, #32
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a0:	2201      	movs	r2, #1
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011b4:	23e0      	movs	r3, #224	@ 0xe0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011be:	4313      	orrs	r3, r2
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4a65      	ldr	r2, [pc, #404]	@ (8001364 <HAL_ADC_Init+0x33c>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	0019      	movs	r1, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	430a      	orrs	r2, r1
 80011da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	0f9b      	lsrs	r3, r3, #30
 80011e2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011e8:	4313      	orrs	r3, r2
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	223c      	movs	r2, #60	@ 0x3c
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d111      	bne.n	800121e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	0f9b      	lsrs	r3, r3, #30
 8001200:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001206:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800120c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001212:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	4313      	orrs	r3, r2
 8001218:	2201      	movs	r2, #1
 800121a:	4313      	orrs	r3, r2
 800121c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	4a50      	ldr	r2, [pc, #320]	@ (8001368 <HAL_ADC_Init+0x340>)
 8001226:	4013      	ands	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	430a      	orrs	r2, r1
 8001232:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	23c0      	movs	r3, #192	@ 0xc0
 800123a:	061b      	lsls	r3, r3, #24
 800123c:	429a      	cmp	r2, r3
 800123e:	d018      	beq.n	8001272 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	429a      	cmp	r2, r3
 800124a:	d012      	beq.n	8001272 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	061b      	lsls	r3, r3, #24
 8001254:	429a      	cmp	r2, r3
 8001256:	d00c      	beq.n	8001272 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001258:	4b44      	ldr	r3, [pc, #272]	@ (800136c <HAL_ADC_Init+0x344>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a44      	ldr	r2, [pc, #272]	@ (8001370 <HAL_ADC_Init+0x348>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	23f0      	movs	r3, #240	@ 0xf0
 8001268:	039b      	lsls	r3, r3, #14
 800126a:	401a      	ands	r2, r3
 800126c:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <HAL_ADC_Init+0x344>)
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127a:	001a      	movs	r2, r3
 800127c:	2100      	movs	r1, #0
 800127e:	f7ff fdf6 	bl	8000e6e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128a:	493a      	ldr	r1, [pc, #232]	@ (8001374 <HAL_ADC_Init+0x34c>)
 800128c:	001a      	movs	r2, r3
 800128e:	f7ff fdee 	bl	8000e6e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2110      	movs	r1, #16
 80012a6:	4249      	negs	r1, r1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80012ac:	e018      	b.n	80012e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	039b      	lsls	r3, r3, #14
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d112      	bne.n	80012e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	221c      	movs	r2, #28
 80012ca:	4013      	ands	r3, r2
 80012cc:	2210      	movs	r2, #16
 80012ce:	4252      	negs	r2, r2
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0011      	movs	r1, r2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2100      	movs	r1, #0
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff fdde 	bl	8000ea8 <LL_ADC_GetSamplingTimeCommonChannels>
 80012ec:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d10b      	bne.n	800130e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	2203      	movs	r2, #3
 8001302:	4393      	bics	r3, r2
 8001304:	2201      	movs	r2, #1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800130c:	e01c      	b.n	8001348 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	2212      	movs	r2, #18
 8001314:	4393      	bics	r3, r2
 8001316:	2210      	movs	r2, #16
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001322:	2201      	movs	r2, #1
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800132a:	231f      	movs	r3, #31
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001332:	e009      	b.n	8001348 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001338:	2210      	movs	r2, #16
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001340:	231f      	movs	r3, #31
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001348:	231f      	movs	r3, #31
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	781b      	ldrb	r3, [r3, #0]
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b008      	add	sp, #32
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	20000000 	.word	0x20000000
 800135c:	00030d40 	.word	0x00030d40
 8001360:	fffffefd 	.word	0xfffffefd
 8001364:	ffde0201 	.word	0xffde0201
 8001368:	1ffffc02 	.word	0x1ffffc02
 800136c:	40012708 	.word	0x40012708
 8001370:	ffc3ffff 	.word	0xffc3ffff
 8001374:	07ffff04 	.word	0x07ffff04

08001378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001382:	2317      	movs	r3, #23
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2254      	movs	r2, #84	@ 0x54
 8001392:	5c9b      	ldrb	r3, [r3, r2]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x24>
 8001398:	2302      	movs	r3, #2
 800139a:	e1c0      	b.n	800171e <HAL_ADC_ConfigChannel+0x3a6>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2254      	movs	r2, #84	@ 0x54
 80013a0:	2101      	movs	r1, #1
 80013a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fe2c 	bl	8001006 <LL_ADC_REG_IsConversionOngoing>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d000      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x3c>
 80013b2:	e1a3      	b.n	80016fc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d100      	bne.n	80013be <HAL_ADC_ConfigChannel+0x46>
 80013bc:	e143      	b.n	8001646 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d004      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013ce:	4ac1      	ldr	r2, [pc, #772]	@ (80016d4 <HAL_ADC_ConfigChannel+0x35c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d108      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0019      	movs	r1, r3
 80013de:	0010      	movs	r0, r2
 80013e0:	f7ff fd99 	bl	8000f16 <LL_ADC_REG_SetSequencerChAdd>
 80013e4:	e0c9      	b.n	800157a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	211f      	movs	r1, #31
 80013f0:	400b      	ands	r3, r1
 80013f2:	210f      	movs	r1, #15
 80013f4:	4099      	lsls	r1, r3
 80013f6:	000b      	movs	r3, r1
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4013      	ands	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	035b      	lsls	r3, r3, #13
 8001404:	0b5b      	lsrs	r3, r3, #13
 8001406:	d105      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x9c>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0e9b      	lsrs	r3, r3, #26
 800140e:	221f      	movs	r2, #31
 8001410:	4013      	ands	r3, r2
 8001412:	e098      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	d000      	beq.n	8001420 <HAL_ADC_ConfigChannel+0xa8>
 800141e:	e091      	b.n	8001544 <HAL_ADC_ConfigChannel+0x1cc>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d000      	beq.n	800142c <HAL_ADC_ConfigChannel+0xb4>
 800142a:	e089      	b.n	8001540 <HAL_ADC_ConfigChannel+0x1c8>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2204      	movs	r2, #4
 8001432:	4013      	ands	r3, r2
 8001434:	d000      	beq.n	8001438 <HAL_ADC_ConfigChannel+0xc0>
 8001436:	e081      	b.n	800153c <HAL_ADC_ConfigChannel+0x1c4>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2208      	movs	r2, #8
 800143e:	4013      	ands	r3, r2
 8001440:	d000      	beq.n	8001444 <HAL_ADC_ConfigChannel+0xcc>
 8001442:	e079      	b.n	8001538 <HAL_ADC_ConfigChannel+0x1c0>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2210      	movs	r2, #16
 800144a:	4013      	ands	r3, r2
 800144c:	d000      	beq.n	8001450 <HAL_ADC_ConfigChannel+0xd8>
 800144e:	e071      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1bc>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2220      	movs	r2, #32
 8001456:	4013      	ands	r3, r2
 8001458:	d000      	beq.n	800145c <HAL_ADC_ConfigChannel+0xe4>
 800145a:	e069      	b.n	8001530 <HAL_ADC_ConfigChannel+0x1b8>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2240      	movs	r2, #64	@ 0x40
 8001462:	4013      	ands	r3, r2
 8001464:	d000      	beq.n	8001468 <HAL_ADC_ConfigChannel+0xf0>
 8001466:	e061      	b.n	800152c <HAL_ADC_ConfigChannel+0x1b4>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2280      	movs	r2, #128	@ 0x80
 800146e:	4013      	ands	r3, r2
 8001470:	d000      	beq.n	8001474 <HAL_ADC_ConfigChannel+0xfc>
 8001472:	e059      	b.n	8001528 <HAL_ADC_ConfigChannel+0x1b0>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4013      	ands	r3, r2
 800147e:	d151      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1ac>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d149      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1a8>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4013      	ands	r3, r2
 8001496:	d141      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1a4>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	d139      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x1a0>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	4013      	ands	r3, r2
 80014ae:	d131      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x19c>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	019b      	lsls	r3, r3, #6
 80014b8:	4013      	ands	r3, r2
 80014ba:	d129      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x198>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	01db      	lsls	r3, r3, #7
 80014c4:	4013      	ands	r3, r2
 80014c6:	d121      	bne.n	800150c <HAL_ADC_ConfigChannel+0x194>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	4013      	ands	r3, r2
 80014d2:	d119      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x190>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	4013      	ands	r3, r2
 80014de:	d111      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x18c>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	d109      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x188>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	02db      	lsls	r3, r3, #11
 80014f4:	4013      	ands	r3, r2
 80014f6:	d001      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x184>
 80014f8:	2312      	movs	r3, #18
 80014fa:	e024      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 80014fc:	2300      	movs	r3, #0
 80014fe:	e022      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001500:	2311      	movs	r3, #17
 8001502:	e020      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001504:	2310      	movs	r3, #16
 8001506:	e01e      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001508:	230f      	movs	r3, #15
 800150a:	e01c      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 800150c:	230e      	movs	r3, #14
 800150e:	e01a      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001510:	230d      	movs	r3, #13
 8001512:	e018      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001514:	230c      	movs	r3, #12
 8001516:	e016      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001518:	230b      	movs	r3, #11
 800151a:	e014      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 800151c:	230a      	movs	r3, #10
 800151e:	e012      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001520:	2309      	movs	r3, #9
 8001522:	e010      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001524:	2308      	movs	r3, #8
 8001526:	e00e      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001528:	2307      	movs	r3, #7
 800152a:	e00c      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 800152c:	2306      	movs	r3, #6
 800152e:	e00a      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001530:	2305      	movs	r3, #5
 8001532:	e008      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001534:	2304      	movs	r3, #4
 8001536:	e006      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001538:	2303      	movs	r3, #3
 800153a:	e004      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 800153c:	2302      	movs	r3, #2
 800153e:	e002      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ce>
 8001544:	2300      	movs	r3, #0
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	6852      	ldr	r2, [r2, #4]
 800154a:	201f      	movs	r0, #31
 800154c:	4002      	ands	r2, r0
 800154e:	4093      	lsls	r3, r2
 8001550:	000a      	movs	r2, r1
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	429a      	cmp	r2, r3
 8001566:	d808      	bhi.n	800157a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	001a      	movs	r2, r3
 8001576:	f7ff fcae 	bl	8000ed6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	001a      	movs	r2, r3
 8001588:	f7ff fce8 	bl	8000f5c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db00      	blt.n	8001596 <HAL_ADC_ConfigChannel+0x21e>
 8001594:	e0bc      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001596:	4b50      	ldr	r3, [pc, #320]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 8001598:	0018      	movs	r0, r3
 800159a:	f7ff fc5b 	bl	8000e54 <LL_ADC_GetCommonPathInternalCh>
 800159e:	0003      	movs	r3, r0
 80015a0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4d      	ldr	r2, [pc, #308]	@ (80016dc <HAL_ADC_ConfigChannel+0x364>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d122      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015b4:	d11d      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2280      	movs	r2, #128	@ 0x80
 80015ba:	0412      	lsls	r2, r2, #16
 80015bc:	4313      	orrs	r3, r2
 80015be:	4a46      	ldr	r2, [pc, #280]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 80015c0:	0019      	movs	r1, r3
 80015c2:	0010      	movs	r0, r2
 80015c4:	f7ff fc32 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015c8:	4b45      	ldr	r3, [pc, #276]	@ (80016e0 <HAL_ADC_ConfigChannel+0x368>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4945      	ldr	r1, [pc, #276]	@ (80016e4 <HAL_ADC_ConfigChannel+0x36c>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7fe fd96 	bl	8000100 <__udivsi3>
 80015d4:	0003      	movs	r3, r0
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	0013      	movs	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	189b      	adds	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015e2:	e002      	b.n	80015ea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015f0:	e08e      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a3c      	ldr	r2, [pc, #240]	@ (80016e8 <HAL_ADC_ConfigChannel+0x370>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10e      	bne.n	800161a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	045b      	lsls	r3, r3, #17
 8001602:	4013      	ands	r3, r2
 8001604:	d109      	bne.n	800161a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	0452      	lsls	r2, r2, #17
 800160c:	4313      	orrs	r3, r2
 800160e:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 8001610:	0019      	movs	r1, r3
 8001612:	0010      	movs	r0, r2
 8001614:	f7ff fc0a 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>
 8001618:	e07a      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a33      	ldr	r2, [pc, #204]	@ (80016ec <HAL_ADC_ConfigChannel+0x374>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d000      	beq.n	8001626 <HAL_ADC_ConfigChannel+0x2ae>
 8001624:	e074      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	03db      	lsls	r3, r3, #15
 800162c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800162e:	d000      	beq.n	8001632 <HAL_ADC_ConfigChannel+0x2ba>
 8001630:	e06e      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2280      	movs	r2, #128	@ 0x80
 8001636:	03d2      	lsls	r2, r2, #15
 8001638:	4313      	orrs	r3, r2
 800163a:	4a27      	ldr	r2, [pc, #156]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 800163c:	0019      	movs	r1, r3
 800163e:	0010      	movs	r0, r2
 8001640:	f7ff fbf4 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>
 8001644:	e064      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	429a      	cmp	r2, r3
 8001650:	d004      	beq.n	800165c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001656:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <HAL_ADC_ConfigChannel+0x35c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d107      	bne.n	800166c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0019      	movs	r1, r3
 8001666:	0010      	movs	r0, r2
 8001668:	f7ff fc66 	bl	8000f38 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da4d      	bge.n	8001710 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff fbec 	bl	8000e54 <LL_ADC_GetCommonPathInternalCh>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <HAL_ADC_ConfigChannel+0x364>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d108      	bne.n	800169c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <HAL_ADC_ConfigChannel+0x378>)
 800168e:	4013      	ands	r3, r2
 8001690:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 8001692:	0019      	movs	r1, r3
 8001694:	0010      	movs	r0, r2
 8001696:	f7ff fbc9 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>
 800169a:	e039      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a11      	ldr	r2, [pc, #68]	@ (80016e8 <HAL_ADC_ConfigChannel+0x370>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d108      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <HAL_ADC_ConfigChannel+0x37c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 80016ae:	0019      	movs	r1, r3
 80016b0:	0010      	movs	r0, r2
 80016b2:	f7ff fbbb 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>
 80016b6:	e02b      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <HAL_ADC_ConfigChannel+0x374>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d126      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <HAL_ADC_ConfigChannel+0x380>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	4a03      	ldr	r2, [pc, #12]	@ (80016d8 <HAL_ADC_ConfigChannel+0x360>)
 80016ca:	0019      	movs	r1, r3
 80016cc:	0010      	movs	r0, r2
 80016ce:	f7ff fbad 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>
 80016d2:	e01d      	b.n	8001710 <HAL_ADC_ConfigChannel+0x398>
 80016d4:	80000004 	.word	0x80000004
 80016d8:	40012708 	.word	0x40012708
 80016dc:	b0001000 	.word	0xb0001000
 80016e0:	20000000 	.word	0x20000000
 80016e4:	00030d40 	.word	0x00030d40
 80016e8:	b8004000 	.word	0xb8004000
 80016ec:	b4002000 	.word	0xb4002000
 80016f0:	ff7fffff 	.word	0xff7fffff
 80016f4:	feffffff 	.word	0xfeffffff
 80016f8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	2220      	movs	r2, #32
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001708:	2317      	movs	r3, #23
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2254      	movs	r2, #84	@ 0x54
 8001714:	2100      	movs	r1, #0
 8001716:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001718:	2317      	movs	r3, #23
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b006      	add	sp, #24
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b7f      	cmp	r3, #127	@ 0x7f
 800173c:	d828      	bhi.n	8001790 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800173e:	4a2f      	ldr	r2, [pc, #188]	@ (80017fc <__NVIC_SetPriority+0xd4>)
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b25b      	sxtb	r3, r3
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	33c0      	adds	r3, #192	@ 0xc0
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	589b      	ldr	r3, [r3, r2]
 800174e:	1dfa      	adds	r2, r7, #7
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	0011      	movs	r1, r2
 8001754:	2203      	movs	r2, #3
 8001756:	400a      	ands	r2, r1
 8001758:	00d2      	lsls	r2, r2, #3
 800175a:	21ff      	movs	r1, #255	@ 0xff
 800175c:	4091      	lsls	r1, r2
 800175e:	000a      	movs	r2, r1
 8001760:	43d2      	mvns	r2, r2
 8001762:	401a      	ands	r2, r3
 8001764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	019b      	lsls	r3, r3, #6
 800176a:	22ff      	movs	r2, #255	@ 0xff
 800176c:	401a      	ands	r2, r3
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	0018      	movs	r0, r3
 8001774:	2303      	movs	r3, #3
 8001776:	4003      	ands	r3, r0
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800177c:	481f      	ldr	r0, [pc, #124]	@ (80017fc <__NVIC_SetPriority+0xd4>)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	430a      	orrs	r2, r1
 8001788:	33c0      	adds	r3, #192	@ 0xc0
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800178e:	e031      	b.n	80017f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001790:	4a1b      	ldr	r2, [pc, #108]	@ (8001800 <__NVIC_SetPriority+0xd8>)
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0019      	movs	r1, r3
 8001798:	230f      	movs	r3, #15
 800179a:	400b      	ands	r3, r1
 800179c:	3b08      	subs	r3, #8
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3306      	adds	r3, #6
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	18d3      	adds	r3, r2, r3
 80017a6:	3304      	adds	r3, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1dfa      	adds	r2, r7, #7
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	0011      	movs	r1, r2
 80017b0:	2203      	movs	r2, #3
 80017b2:	400a      	ands	r2, r1
 80017b4:	00d2      	lsls	r2, r2, #3
 80017b6:	21ff      	movs	r1, #255	@ 0xff
 80017b8:	4091      	lsls	r1, r2
 80017ba:	000a      	movs	r2, r1
 80017bc:	43d2      	mvns	r2, r2
 80017be:	401a      	ands	r2, r3
 80017c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	22ff      	movs	r2, #255	@ 0xff
 80017c8:	401a      	ands	r2, r3
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	0018      	movs	r0, r3
 80017d0:	2303      	movs	r3, #3
 80017d2:	4003      	ands	r3, r0
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d8:	4809      	ldr	r0, [pc, #36]	@ (8001800 <__NVIC_SetPriority+0xd8>)
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	001c      	movs	r4, r3
 80017e0:	230f      	movs	r3, #15
 80017e2:	4023      	ands	r3, r4
 80017e4:	3b08      	subs	r3, #8
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	430a      	orrs	r2, r1
 80017ea:	3306      	adds	r3, #6
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	18c3      	adds	r3, r0, r3
 80017f0:	3304      	adds	r3, #4
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	46c0      	nop			@ (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b003      	add	sp, #12
 80017fa:	bd90      	pop	{r4, r7, pc}
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	1e5a      	subs	r2, r3, #1
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	045b      	lsls	r3, r3, #17
 8001814:	429a      	cmp	r2, r3
 8001816:	d301      	bcc.n	800181c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001818:	2301      	movs	r3, #1
 800181a:	e010      	b.n	800183e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <SysTick_Config+0x44>)
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	3a01      	subs	r2, #1
 8001822:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001824:	2301      	movs	r3, #1
 8001826:	425b      	negs	r3, r3
 8001828:	2103      	movs	r1, #3
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff ff7c 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x44>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x44>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	210f      	movs	r1, #15
 8001858:	187b      	adds	r3, r7, r1
 800185a:	1c02      	adds	r2, r0, #0
 800185c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	187b      	adds	r3, r7, r1
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ffbf 	bl	8001804 <SysTick_Config>
 8001886:	0003      	movs	r3, r0
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e147      	b.n	8001b30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4091      	lsls	r1, r2
 80018aa:	000a      	movs	r2, r1
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d100      	bne.n	80018b8 <HAL_GPIO_Init+0x28>
 80018b6:	e138      	b.n	8001b2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2203      	movs	r2, #3
 80018be:	4013      	ands	r3, r2
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d005      	beq.n	80018d0 <HAL_GPIO_Init+0x40>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	409a      	lsls	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
 800190c:	0013      	movs	r3, r2
 800190e:	43da      	mvns	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	2201      	movs	r2, #1
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	4013      	ands	r3, r2
 800193a:	2b03      	cmp	r3, #3
 800193c:	d017      	beq.n	800196e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	43da      	mvns	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	409a      	lsls	r2, r3
 8001960:	0013      	movs	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2203      	movs	r2, #3
 8001974:	4013      	ands	r3, r2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d123      	bne.n	80019c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	58d3      	ldr	r3, [r2, r3]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2207      	movs	r2, #7
 800198c:	4013      	ands	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2107      	movs	r1, #7
 80019a6:	400b      	ands	r3, r1
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	6939      	ldr	r1, [r7, #16]
 80019c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	43da      	mvns	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2203      	movs	r2, #3
 80019e0:	401a      	ands	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	23c0      	movs	r3, #192	@ 0xc0
 80019fc:	029b      	lsls	r3, r3, #10
 80019fe:	4013      	ands	r3, r2
 8001a00:	d100      	bne.n	8001a04 <HAL_GPIO_Init+0x174>
 8001a02:	e092      	b.n	8001b2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a04:	4a50      	ldr	r2, [pc, #320]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	589b      	ldr	r3, [r3, r2]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2203      	movs	r2, #3
 8001a16:	4013      	ands	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	0013      	movs	r3, r2
 8001a20:	43da      	mvns	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	23a0      	movs	r3, #160	@ 0xa0
 8001a2c:	05db      	lsls	r3, r3, #23
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x1ca>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a45      	ldr	r2, [pc, #276]	@ (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x1c6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a44      	ldr	r2, [pc, #272]	@ (8001b50 <HAL_GPIO_Init+0x2c0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x1c2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a43      	ldr	r2, [pc, #268]	@ (8001b54 <HAL_GPIO_Init+0x2c4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x1be>
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x1cc>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e004      	b.n	8001a5c <HAL_GPIO_Init+0x1cc>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_Init+0x1cc>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x1cc>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	2103      	movs	r1, #3
 8001a60:	400a      	ands	r2, r1
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	4093      	lsls	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a6c:	4936      	ldr	r1, [pc, #216]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3318      	adds	r3, #24
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a7a:	4b33      	ldr	r3, [pc, #204]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	035b      	lsls	r3, r3, #13
 8001a92:	4013      	ands	r3, r2
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001aa4:	4b28      	ldr	r3, [pc, #160]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	43da      	mvns	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	039b      	lsls	r3, r3, #14
 8001abc:	4013      	ands	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ace:	4a1e      	ldr	r2, [pc, #120]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001ad0:	2384      	movs	r3, #132	@ 0x84
 8001ad2:	58d3      	ldr	r3, [r2, r3]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	029b      	lsls	r3, r3, #10
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af4:	4914      	ldr	r1, [pc, #80]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001af6:	2284      	movs	r2, #132	@ 0x84
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001afc:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	58d3      	ldr	r3, [r2, r3]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	4013      	ands	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b22:	4909      	ldr	r1, [pc, #36]	@ (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001b24:	2280      	movs	r2, #128	@ 0x80
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	1e13      	subs	r3, r2, #0
 8001b3a:	d000      	beq.n	8001b3e <HAL_GPIO_Init+0x2ae>
 8001b3c:	e6b0      	b.n	80018a0 <HAL_GPIO_Init+0x10>
  }
}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b006      	add	sp, #24
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	50000400 	.word	0x50000400
 8001b50:	50000800 	.word	0x50000800
 8001b54:	50000c00 	.word	0x50000c00

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	000a      	movs	r2, r1
 8001b62:	1cbb      	adds	r3, r7, #2
 8001b64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	1cba      	adds	r2, r7, #2
 8001b6c:	8812      	ldrh	r2, [r2, #0]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d004      	beq.n	8001b7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b72:	230f      	movs	r3, #15
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e003      	b.n	8001b84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b84:	230f      	movs	r3, #15
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	781b      	ldrb	r3, [r3, #0]
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	0008      	movs	r0, r1
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	1c02      	adds	r2, r0, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	1c7b      	adds	r3, r7, #1
 8001ba6:	1c0a      	adds	r2, r1, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001baa:	1c7b      	adds	r3, r7, #1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb2:	1cbb      	adds	r3, r7, #2
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bba:	e003      	b.n	8001bc4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bbc:	1cbb      	adds	r3, r7, #2
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d11f      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	189b      	adds	r3, r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4912      	ldr	r1, [pc, #72]	@ (8001c48 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7fe fa7e 	bl	8000100 <__udivsi3>
 8001c04:	0003      	movs	r3, r0
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c0a:	e008      	b.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e001      	b.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e009      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	401a      	ands	r2, r3
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d0ed      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b004      	add	sp, #16
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	fffff9ff 	.word	0xfffff9ff
 8001c44:	20000000 	.word	0x20000000
 8001c48:	000f4240 	.word	0x000f4240

08001c4c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	23e0      	movs	r3, #224	@ 0xe0
 8001c56:	01db      	lsls	r3, r3, #7
 8001c58:	4013      	ands	r3, r2
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e2f3      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d100      	bne.n	8001c82 <HAL_RCC_OscConfig+0x1e>
 8001c80:	e07c      	b.n	8001d7c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4bc3      	ldr	r3, [pc, #780]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	@ 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4bc0      	ldr	r3, [pc, #768]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4013      	ands	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3e>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	4bb9      	ldr	r3, [pc, #740]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	029b      	lsls	r3, r3, #10
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d062      	beq.n	8001d7a <HAL_RCC_OscConfig+0x116>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d15e      	bne.n	8001d7a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e2ce      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x78>
 8001ccc:	4bb0      	ldr	r3, [pc, #704]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4baf      	ldr	r3, [pc, #700]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	2180      	movs	r1, #128	@ 0x80
 8001cd4:	0249      	lsls	r1, r1, #9
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e020      	b.n	8001d1e <HAL_RCC_OscConfig+0xba>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	23a0      	movs	r3, #160	@ 0xa0
 8001ce2:	02db      	lsls	r3, r3, #11
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10e      	bne.n	8001d06 <HAL_RCC_OscConfig+0xa2>
 8001ce8:	4ba9      	ldr	r3, [pc, #676]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4ba8      	ldr	r3, [pc, #672]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	02c9      	lsls	r1, r1, #11
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	4ba6      	ldr	r3, [pc, #664]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4ba5      	ldr	r3, [pc, #660]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	0249      	lsls	r1, r1, #9
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0xba>
 8001d06:	4ba2      	ldr	r3, [pc, #648]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4ba1      	ldr	r3, [pc, #644]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	49a1      	ldr	r1, [pc, #644]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d0e:	400a      	ands	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	4b9f      	ldr	r3, [pc, #636]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b9e      	ldr	r3, [pc, #632]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	499f      	ldr	r1, [pc, #636]	@ (8001f98 <HAL_RCC_OscConfig+0x334>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d014      	beq.n	8001d50 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f853 	bl	8000dd0 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f84e 	bl	8000dd0 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	@ 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e28d      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4b93      	ldr	r3, [pc, #588]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xcc>
 8001d4e:	e015      	b.n	8001d7c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f83e 	bl	8000dd0 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5a:	f7ff f839 	bl	8000dd0 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	@ 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e278      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6c:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0xf6>
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2202      	movs	r2, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	d100      	bne.n	8001d88 <HAL_RCC_OscConfig+0x124>
 8001d86:	e099      	b.n	8001ebc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d88:	4b81      	ldr	r3, [pc, #516]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2238      	movs	r2, #56	@ 0x38
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d92:	4b7f      	ldr	r3, [pc, #508]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2203      	movs	r2, #3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0x144>
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d002      	beq.n	8001dae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d135      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dae:	4b78      	ldr	r3, [pc, #480]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x162>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e24b      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b72      	ldr	r3, [pc, #456]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a74      	ldr	r2, [pc, #464]	@ (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d112      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001de2:	4b6b      	ldr	r3, [pc, #428]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa0 <HAL_RCC_OscConfig+0x33c>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	4b67      	ldr	r3, [pc, #412]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001df6:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0adb      	lsrs	r3, r3, #11
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	4013      	ands	r3, r2
 8001e00:	4a68      	ldr	r2, [pc, #416]	@ (8001fa4 <HAL_RCC_OscConfig+0x340>)
 8001e02:	40da      	lsrs	r2, r3
 8001e04:	4b68      	ldr	r3, [pc, #416]	@ (8001fa8 <HAL_RCC_OscConfig+0x344>)
 8001e06:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e08:	4b68      	ldr	r3, [pc, #416]	@ (8001fac <HAL_RCC_OscConfig+0x348>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7fe ff83 	bl	8000d18 <HAL_InitTick>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d051      	beq.n	8001eba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e221      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d030      	beq.n	8001e84 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e22:	4b5b      	ldr	r3, [pc, #364]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa0 <HAL_RCC_OscConfig+0x33c>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	4b57      	ldr	r3, [pc, #348]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e36:	4b56      	ldr	r3, [pc, #344]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b55      	ldr	r3, [pc, #340]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	0049      	lsls	r1, r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe ffc4 	bl	8000dd0 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7fe ffbf 	bl	8000dd0 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1fe      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e60:	4b4b      	ldr	r3, [pc, #300]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b48      	ldr	r3, [pc, #288]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a4a      	ldr	r2, [pc, #296]	@ (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	021a      	lsls	r2, r3, #8
 8001e7c:	4b44      	ldr	r3, [pc, #272]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	e01b      	b.n	8001ebc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b42      	ldr	r3, [pc, #264]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b41      	ldr	r3, [pc, #260]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	4949      	ldr	r1, [pc, #292]	@ (8001fb0 <HAL_RCC_OscConfig+0x34c>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe ff9e 	bl	8000dd0 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7fe ff99 	bl	8000dd0 <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1d8      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eac:	4b38      	ldr	r3, [pc, #224]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x236>
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d047      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ec6:	4b32      	ldr	r3, [pc, #200]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2238      	movs	r2, #56	@ 0x38
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b18      	cmp	r3, #24
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d03c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d138      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e1ba      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d019      	beq.n	8001f24 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe ff68 	bl	8000dd0 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f06:	f7fe ff63 	bl	8000dd0 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1a2      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f18:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d0f1      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2a2>
 8001f22:	e018      	b.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f24:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001f26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7fe ff4e 	bl	8000dd0 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3a:	f7fe ff49 	bl	8000dd0 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e188      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4c:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f50:	2202      	movs	r2, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	d1f1      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d100      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2fe>
 8001f60:	e0c6      	b.n	80020f0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f62:	231f      	movs	r3, #31
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2238      	movs	r2, #56	@ 0x38
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d11e      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_RCC_OscConfig+0x32c>)
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <HAL_RCC_OscConfig+0x31e>
 8001f80:	e0b6      	b.n	80020f0 <HAL_RCC_OscConfig+0x48c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d000      	beq.n	8001f8c <HAL_RCC_OscConfig+0x328>
 8001f8a:	e0b1      	b.n	80020f0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e166      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
 8001f90:	40021000 	.word	0x40021000
 8001f94:	fffeffff 	.word	0xfffeffff
 8001f98:	fffbffff 	.word	0xfffbffff
 8001f9c:	ffff80ff 	.word	0xffff80ff
 8001fa0:	ffffc7ff 	.word	0xffffc7ff
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fb4:	4bac      	ldr	r3, [pc, #688]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8001fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	055b      	lsls	r3, r3, #21
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x360>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x362>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d011      	beq.n	8001fee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4ba7      	ldr	r3, [pc, #668]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8001fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fce:	4ba6      	ldr	r3, [pc, #664]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	0549      	lsls	r1, r1, #21
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd8:	4ba3      	ldr	r3, [pc, #652]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8001fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	055b      	lsls	r3, r3, #21
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001fe6:	231f      	movs	r3, #31
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fee:	4b9f      	ldr	r3, [pc, #636]	@ (800226c <HAL_RCC_OscConfig+0x608>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d11a      	bne.n	8002030 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800226c <HAL_RCC_OscConfig+0x608>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b9b      	ldr	r3, [pc, #620]	@ (800226c <HAL_RCC_OscConfig+0x608>)
 8002000:	2180      	movs	r1, #128	@ 0x80
 8002002:	0049      	lsls	r1, r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002008:	f7fe fee2 	bl	8000dd0 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7fe fedd 	bl	8000dd0 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e11c      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4b91      	ldr	r3, [pc, #580]	@ (800226c <HAL_RCC_OscConfig+0x608>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x3e2>
 8002038:	4b8b      	ldr	r3, [pc, #556]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800203a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800203c:	4b8a      	ldr	r3, [pc, #552]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800203e:	2101      	movs	r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x41c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x404>
 800204e:	4b86      	ldr	r3, [pc, #536]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002050:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002052:	4b85      	ldr	r3, [pc, #532]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002054:	2104      	movs	r1, #4
 8002056:	430a      	orrs	r2, r1
 8002058:	65da      	str	r2, [r3, #92]	@ 0x5c
 800205a:	4b83      	ldr	r3, [pc, #524]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800205c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800205e:	4b82      	ldr	r3, [pc, #520]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002060:	2101      	movs	r1, #1
 8002062:	430a      	orrs	r2, r1
 8002064:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0x41c>
 8002068:	4b7f      	ldr	r3, [pc, #508]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800206a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800206c:	4b7e      	ldr	r3, [pc, #504]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800206e:	2101      	movs	r1, #1
 8002070:	438a      	bics	r2, r1
 8002072:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002074:	4b7c      	ldr	r3, [pc, #496]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002076:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002078:	4b7b      	ldr	r3, [pc, #492]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800207a:	2104      	movs	r1, #4
 800207c:	438a      	bics	r2, r1
 800207e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d014      	beq.n	80020b2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fea2 	bl	8000dd0 <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002090:	e009      	b.n	80020a6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe fe9d 	bl	8000dd0 <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	4a74      	ldr	r2, [pc, #464]	@ (8002270 <HAL_RCC_OscConfig+0x60c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0db      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x42e>
 80020b0:	e013      	b.n	80020da <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fe8d 	bl	8000dd0 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ba:	e009      	b.n	80020d0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7fe fe88 	bl	8000dd0 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	4a6a      	ldr	r2, [pc, #424]	@ (8002270 <HAL_RCC_OscConfig+0x60c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0c6      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d0:	4b65      	ldr	r3, [pc, #404]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020da:	231f      	movs	r3, #31
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020e4:	4b60      	ldr	r3, [pc, #384]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80020e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80020ea:	4962      	ldr	r1, [pc, #392]	@ (8002274 <HAL_RCC_OscConfig+0x610>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d100      	bne.n	80020fa <HAL_RCC_OscConfig+0x496>
 80020f8:	e0b0      	b.n	800225c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2238      	movs	r2, #56	@ 0x38
 8002100:	4013      	ands	r3, r2
 8002102:	2b10      	cmp	r3, #16
 8002104:	d100      	bne.n	8002108 <HAL_RCC_OscConfig+0x4a4>
 8002106:	e078      	b.n	80021fa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d153      	bne.n	80021b8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b55      	ldr	r3, [pc, #340]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b54      	ldr	r3, [pc, #336]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002116:	4958      	ldr	r1, [pc, #352]	@ (8002278 <HAL_RCC_OscConfig+0x614>)
 8002118:	400a      	ands	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fe58 	bl	8000dd0 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe fe53 	bl	8000dd0 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e092      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	4b4b      	ldr	r3, [pc, #300]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	049b      	lsls	r3, r3, #18
 8002140:	4013      	ands	r3, r2
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002144:	4b48      	ldr	r3, [pc, #288]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a4c      	ldr	r2, [pc, #304]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	431a      	orrs	r2, r3
 800216c:	4b3e      	ldr	r3, [pc, #248]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002172:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b3c      	ldr	r3, [pc, #240]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002178:	2180      	movs	r1, #128	@ 0x80
 800217a:	0449      	lsls	r1, r1, #17
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002180:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4b38      	ldr	r3, [pc, #224]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	0549      	lsls	r1, r1, #21
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7fe fe1f 	bl	8000dd0 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe fe1a 	bl	8000dd0 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e059      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	049b      	lsls	r3, r3, #18
 80021b2:	4013      	ands	r3, r2
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x534>
 80021b6:	e051      	b.n	800225c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80021be:	492e      	ldr	r1, [pc, #184]	@ (8002278 <HAL_RCC_OscConfig+0x614>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fe04 	bl	8000dd0 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe fdff 	bl	8000dd0 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e03e      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	049b      	lsls	r3, r3, #18
 80021e8:	4013      	ands	r3, r2
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80021ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 80021f2:	4923      	ldr	r1, [pc, #140]	@ (8002280 <HAL_RCC_OscConfig+0x61c>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	e030      	b.n	800225c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e02b      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_RCC_OscConfig+0x604>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2203      	movs	r2, #3
 8002210:	401a      	ands	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	429a      	cmp	r2, r3
 8002218:	d11e      	bne.n	8002258 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2270      	movs	r2, #112	@ 0x70
 800221e:	401a      	ands	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d117      	bne.n	8002258 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	23fe      	movs	r3, #254	@ 0xfe
 800222c:	01db      	lsls	r3, r3, #7
 800222e:	401a      	ands	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d10e      	bne.n	8002258 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	23f8      	movs	r3, #248	@ 0xf8
 800223e:	039b      	lsls	r3, r3, #14
 8002240:	401a      	ands	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	0f5b      	lsrs	r3, r3, #29
 800224e:	075a      	lsls	r2, r3, #29
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b008      	add	sp, #32
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			@ (mov r8, r8)
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	00001388 	.word	0x00001388
 8002274:	efffffff 	.word	0xefffffff
 8002278:	feffffff 	.word	0xfeffffff
 800227c:	1fc1808c 	.word	0x1fc1808c
 8002280:	effefffc 	.word	0xeffefffc

08002284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0e9      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b76      	ldr	r3, [pc, #472]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2207      	movs	r2, #7
 800229e:	4013      	ands	r3, r2
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d91e      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b73      	ldr	r3, [pc, #460]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2207      	movs	r2, #7
 80022ac:	4393      	bics	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	4b70      	ldr	r3, [pc, #448]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fd8a 	bl	8000dd0 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022c0:	e009      	b.n	80022d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c2:	f7fe fd85 	bl	8000dd0 <HAL_GetTick>
 80022c6:	0002      	movs	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002478 <HAL_RCC_ClockConfig+0x1f4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0ca      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022d6:	4b67      	ldr	r3, [pc, #412]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2207      	movs	r2, #7
 80022dc:	4013      	ands	r3, r2
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d015      	beq.n	800231a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2204      	movs	r2, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d006      	beq.n	8002306 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022f8:	4b60      	ldr	r3, [pc, #384]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b5f      	ldr	r3, [pc, #380]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 80022fe:	21e0      	movs	r1, #224	@ 0xe0
 8002300:	01c9      	lsls	r1, r1, #7
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002306:	4b5d      	ldr	r3, [pc, #372]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4a5d      	ldr	r2, [pc, #372]	@ (8002480 <HAL_RCC_ClockConfig+0x1fc>)
 800230c:	4013      	ands	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d057      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232c:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	029b      	lsls	r3, r3, #10
 8002334:	4013      	ands	r3, r2
 8002336:	d12b      	bne.n	8002390 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e097      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d107      	bne.n	8002354 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	@ 0x80
 800234a:	049b      	lsls	r3, r3, #18
 800234c:	4013      	ands	r3, r2
 800234e:	d11f      	bne.n	8002390 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e08b      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b47      	ldr	r3, [pc, #284]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4013      	ands	r3, r2
 8002366:	d113      	bne.n	8002390 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e07f      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002374:	4b41      	ldr	r3, [pc, #260]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 8002376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d108      	bne.n	8002390 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e074      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b3e      	ldr	r3, [pc, #248]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e06d      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002390:	4b3a      	ldr	r3, [pc, #232]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2207      	movs	r2, #7
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4b37      	ldr	r3, [pc, #220]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a4:	f7fe fd14 	bl	8000dd0 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ac:	e009      	b.n	80023c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ae:	f7fe fd0f 	bl	8000dd0 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002478 <HAL_RCC_ClockConfig+0x1f4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e054      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2238      	movs	r2, #56	@ 0x38
 80023c8:	401a      	ands	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1ec      	bne.n	80023ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2207      	movs	r2, #7
 80023da:	4013      	ands	r3, r2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d21e      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b24      	ldr	r3, [pc, #144]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2207      	movs	r2, #7
 80023e8:	4393      	bics	r3, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fcec 	bl	8000dd0 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fc:	e009      	b.n	8002412 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fe:	f7fe fce7 	bl	8000dd0 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	4a1b      	ldr	r2, [pc, #108]	@ (8002478 <HAL_RCC_ClockConfig+0x1f4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e02c      	b.n	800246c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002412:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2207      	movs	r2, #7
 8002418:	4013      	ands	r3, r2
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d1ee      	bne.n	80023fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2204      	movs	r2, #4
 8002426:	4013      	ands	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a15      	ldr	r2, [pc, #84]	@ (8002484 <HAL_RCC_ClockConfig+0x200>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800243e:	f000 f829 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002442:	0001      	movs	r1, r0
 8002444:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_RCC_ClockConfig+0x1f8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	220f      	movs	r2, #15
 800244c:	401a      	ands	r2, r3
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <HAL_RCC_ClockConfig+0x204>)
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	58d3      	ldr	r3, [r2, r3]
 8002454:	221f      	movs	r2, #31
 8002456:	4013      	ands	r3, r2
 8002458:	000a      	movs	r2, r1
 800245a:	40da      	lsrs	r2, r3
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_RCC_ClockConfig+0x208>)
 800245e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_ClockConfig+0x20c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0018      	movs	r0, r3
 8002466:	f7fe fc57 	bl	8000d18 <HAL_InitTick>
 800246a:	0003      	movs	r3, r0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b004      	add	sp, #16
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40022000 	.word	0x40022000
 8002478:	00001388 	.word	0x00001388
 800247c:	40021000 	.word	0x40021000
 8002480:	fffff0ff 	.word	0xfffff0ff
 8002484:	ffff8fff 	.word	0xffff8fff
 8002488:	08004158 	.word	0x08004158
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249a:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2238      	movs	r2, #56	@ 0x38
 80024a0:	4013      	ands	r3, r2
 80024a2:	d10f      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024a4:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0adb      	lsrs	r3, r3, #11
 80024aa:	2207      	movs	r2, #7
 80024ac:	4013      	ands	r3, r2
 80024ae:	2201      	movs	r2, #1
 80024b0:	409a      	lsls	r2, r3
 80024b2:	0013      	movs	r3, r2
 80024b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024b6:	6839      	ldr	r1, [r7, #0]
 80024b8:	4835      	ldr	r0, [pc, #212]	@ (8002590 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024ba:	f7fd fe21 	bl	8000100 <__udivsi3>
 80024be:	0003      	movs	r3, r0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	e05d      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c4:	4b31      	ldr	r3, [pc, #196]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2238      	movs	r2, #56	@ 0x38
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024d0:	4b30      	ldr	r3, [pc, #192]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x100>)
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	e054      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d6:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2238      	movs	r2, #56	@ 0x38
 80024dc:	4013      	ands	r3, r2
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d138      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024e2:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2203      	movs	r2, #3
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	2207      	movs	r2, #7
 80024f4:	4013      	ands	r3, r2
 80024f6:	3301      	adds	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d10d      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	4824      	ldr	r0, [pc, #144]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x100>)
 8002504:	f7fd fdfc 	bl	8000100 <__udivsi3>
 8002508:	0003      	movs	r3, r0
 800250a:	0019      	movs	r1, r3
 800250c:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	227f      	movs	r2, #127	@ 0x7f
 8002514:	4013      	ands	r3, r2
 8002516:	434b      	muls	r3, r1
 8002518:	617b      	str	r3, [r7, #20]
        break;
 800251a:	e00d      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	481c      	ldr	r0, [pc, #112]	@ (8002590 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002520:	f7fd fdee 	bl	8000100 <__udivsi3>
 8002524:	0003      	movs	r3, r0
 8002526:	0019      	movs	r1, r3
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	227f      	movs	r2, #127	@ 0x7f
 8002530:	4013      	ands	r3, r2
 8002532:	434b      	muls	r3, r1
 8002534:	617b      	str	r3, [r7, #20]
        break;
 8002536:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0f5b      	lsrs	r3, r3, #29
 800253e:	2207      	movs	r2, #7
 8002540:	4013      	ands	r3, r2
 8002542:	3301      	adds	r3, #1
 8002544:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	6978      	ldr	r0, [r7, #20]
 800254a:	f7fd fdd9 	bl	8000100 <__udivsi3>
 800254e:	0003      	movs	r3, r0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	e015      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2238      	movs	r2, #56	@ 0x38
 800255a:	4013      	ands	r3, r2
 800255c:	2b20      	cmp	r3, #32
 800255e:	d103      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002568:	4b08      	ldr	r3, [pc, #32]	@ (800258c <HAL_RCC_GetSysClockFreq+0xf8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2238      	movs	r2, #56	@ 0x38
 800256e:	4013      	ands	r3, r2
 8002570:	2b18      	cmp	r3, #24
 8002572:	d103      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002574:	23fa      	movs	r3, #250	@ 0xfa
 8002576:	01db      	lsls	r3, r3, #7
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e001      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002580:	693b      	ldr	r3, [r7, #16]
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b006      	add	sp, #24
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	40021000 	.word	0x40021000
 8002590:	00f42400 	.word	0x00f42400
 8002594:	007a1200 	.word	0x007a1200

08002598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800259c:	4b02      	ldr	r3, [pc, #8]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80025b0:	f7ff fff2 	bl	8002598 <HAL_RCC_GetHCLKFreq>
 80025b4:	0004      	movs	r4, r0
 80025b6:	f7ff fb49 	bl	8001c4c <LL_RCC_GetAPB1Prescaler>
 80025ba:	0003      	movs	r3, r0
 80025bc:	0b1a      	lsrs	r2, r3, #12
 80025be:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	58d3      	ldr	r3, [r2, r3]
 80025c4:	221f      	movs	r2, #31
 80025c6:	4013      	ands	r3, r2
 80025c8:	40dc      	lsrs	r4, r3
 80025ca:	0023      	movs	r3, r4
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bdb0      	pop	{r4, r5, r7, pc}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	08004198 	.word	0x08004198

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025e0:	2313      	movs	r3, #19
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e8:	2312      	movs	r3, #18
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	@ 0x80
 80025f6:	029b      	lsls	r3, r3, #10
 80025f8:	4013      	ands	r3, r2
 80025fa:	d100      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025fc:	e0a3      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2011      	movs	r0, #17
 8002600:	183b      	adds	r3, r7, r0
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b7f      	ldr	r3, [pc, #508]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	055b      	lsls	r3, r3, #21
 800260e:	4013      	ands	r3, r2
 8002610:	d110      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b7c      	ldr	r3, [pc, #496]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002616:	4b7b      	ldr	r3, [pc, #492]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	0549      	lsls	r1, r1, #21
 800261c:	430a      	orrs	r2, r1
 800261e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002620:	4b78      	ldr	r3, [pc, #480]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	055b      	lsls	r3, r3, #21
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	183b      	adds	r3, r7, r0
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b74      	ldr	r3, [pc, #464]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b73      	ldr	r3, [pc, #460]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800263a:	2180      	movs	r1, #128	@ 0x80
 800263c:	0049      	lsls	r1, r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002642:	f7fe fbc5 	bl	8000dd0 <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264a:	e00b      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fbc0 	bl	8000dd0 <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d904      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800265a:	2313      	movs	r3, #19
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2203      	movs	r2, #3
 8002660:	701a      	strb	r2, [r3, #0]
        break;
 8002662:	e005      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002664:	4b68      	ldr	r3, [pc, #416]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d0ed      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002670:	2313      	movs	r3, #19
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d154      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800267a:	4b62      	ldr	r3, [pc, #392]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800267c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800267e:	23c0      	movs	r3, #192	@ 0xc0
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4013      	ands	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d019      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	429a      	cmp	r2, r3
 8002694:	d014      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002696:	4b5b      	ldr	r3, [pc, #364]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	4a5c      	ldr	r2, [pc, #368]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800269c:	4013      	ands	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a0:	4b58      	ldr	r3, [pc, #352]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026a4:	4b57      	ldr	r3, [pc, #348]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0249      	lsls	r1, r1, #9
 80026aa:	430a      	orrs	r2, r1
 80026ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ae:	4b55      	ldr	r3, [pc, #340]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026b2:	4b54      	ldr	r3, [pc, #336]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026b4:	4956      	ldr	r1, [pc, #344]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ba:	4b52      	ldr	r3, [pc, #328]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	d016      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fb82 	bl	8000dd0 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d0:	e00c      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fb7d 	bl	8000dd0 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d904      	bls.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80026e2:	2313      	movs	r3, #19
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2203      	movs	r2, #3
 80026e8:	701a      	strb	r2, [r3, #0]
            break;
 80026ea:	e004      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ec:	4b45      	ldr	r3, [pc, #276]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	d0ed      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80026f6:	2313      	movs	r3, #19
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002700:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	4a41      	ldr	r2, [pc, #260]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002706:	4013      	ands	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002710:	430a      	orrs	r2, r1
 8002712:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002714:	e00c      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002716:	2312      	movs	r3, #18
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2213      	movs	r2, #19
 800271c:	18ba      	adds	r2, r7, r2
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e005      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	2312      	movs	r3, #18
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2213      	movs	r2, #19
 800272a:	18ba      	adds	r2, r7, r2
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002730:	2311      	movs	r3, #17
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d105      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800273c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800273e:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002740:	4935      	ldr	r1, [pc, #212]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002742:	400a      	ands	r2, r1
 8002744:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002750:	4b2c      	ldr	r3, [pc, #176]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002754:	2203      	movs	r2, #3
 8002756:	4393      	bics	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002760:	430a      	orrs	r2, r1
 8002762:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2220      	movs	r2, #32
 800276a:	4013      	ands	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800276e:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	4a2a      	ldr	r2, [pc, #168]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002774:	4013      	ands	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800277e:	430a      	orrs	r2, r1
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	01db      	lsls	r3, r3, #7
 800278a:	4013      	ands	r3, r2
 800278c:	d015      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800278e:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	0899      	lsrs	r1, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800279c:	430a      	orrs	r2, r1
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	05db      	lsls	r3, r3, #23
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d106      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027ac:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027b2:	2180      	movs	r1, #128	@ 0x80
 80027b4:	0249      	lsls	r1, r1, #9
 80027b6:	430a      	orrs	r2, r1
 80027b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4013      	ands	r3, r2
 80027c4:	d016      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	4a15      	ldr	r2, [pc, #84]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027d6:	430a      	orrs	r2, r1
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	01db      	lsls	r3, r3, #7
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d106      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027e6:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ec:	2180      	movs	r1, #128	@ 0x80
 80027ee:	0249      	lsls	r1, r1, #9
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027f4:	2312      	movs	r3, #18
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	781b      	ldrb	r3, [r3, #0]
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b006      	add	sp, #24
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	fffffcff 	.word	0xfffffcff
 8002810:	fffeffff 	.word	0xfffeffff
 8002814:	00001388 	.word	0x00001388
 8002818:	efffffff 	.word	0xefffffff
 800281c:	ffffcfff 	.word	0xffffcfff
 8002820:	ffff3fff 	.word	0xffff3fff

08002824 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d100      	bne.n	800283c <HAL_RTC_Init+0x18>
 800283a:	e08c      	b.n	8002956 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2229      	movs	r2, #41	@ 0x29
 8002840:	5c9b      	ldrb	r3, [r3, r2]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2228      	movs	r2, #40	@ 0x28
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2288      	movs	r2, #136	@ 0x88
 8002854:	0212      	lsls	r2, r2, #8
 8002856:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	f7fe f8a0 	bl	80009a0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2229      	movs	r2, #41	@ 0x29
 8002864:	2102      	movs	r1, #2
 8002866:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2210      	movs	r2, #16
 8002870:	4013      	ands	r3, r2
 8002872:	2b10      	cmp	r3, #16
 8002874:	d062      	beq.n	800293c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	22ca      	movs	r2, #202	@ 0xca
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2253      	movs	r2, #83	@ 0x53
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002886:	250f      	movs	r5, #15
 8002888:	197c      	adds	r4, r7, r5
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f891 	bl	80029b4 <RTC_EnterInitMode>
 8002892:	0003      	movs	r3, r0
 8002894:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002896:	0028      	movs	r0, r5
 8002898:	183b      	adds	r3, r7, r0
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d12c      	bne.n	80028fa <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	492e      	ldr	r1, [pc, #184]	@ (8002964 <HAL_RTC_Init+0x140>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6999      	ldr	r1, [r3, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6912      	ldr	r2, [r2, #16]
 80028d6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6919      	ldr	r1, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	041a      	lsls	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80028ec:	183c      	adds	r4, r7, r0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f8a1 	bl	8002a38 <RTC_ExitInitMode>
 80028f6:	0003      	movs	r3, r0
 80028f8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80028fa:	230f      	movs	r3, #15
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d116      	bne.n	8002932 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	00d2      	lsls	r2, r2, #3
 8002910:	08d2      	lsrs	r2, r2, #3
 8002912:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6999      	ldr	r1, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	22ff      	movs	r2, #255	@ 0xff
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24
 800293a:	e003      	b.n	8002944 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800293c:	230f      	movs	r3, #15
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002944:	230f      	movs	r3, #15
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2229      	movs	r2, #41	@ 0x29
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002956:	230f      	movs	r3, #15
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bdb0      	pop	{r4, r5, r7, pc}
 8002964:	fb8fffbf 	.word	0xfb8fffbf

08002968 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0e      	ldr	r2, [pc, #56]	@ (80029b0 <HAL_RTC_WaitForSynchro+0x48>)
 8002976:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002978:	f7fe fa2a 	bl	8000dd0 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002980:	e00a      	b.n	8002998 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002982:	f7fe fa25 	bl	8000dd0 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad2      	subs	r2, r2, r3
 800298c:	23fa      	movs	r3, #250	@ 0xfa
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d901      	bls.n	8002998 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e006      	b.n	80029a6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	4013      	ands	r3, r2
 80029a2:	d0ee      	beq.n	8002982 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	0001005f 	.word	0x0001005f

080029b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80029bc:	230f      	movs	r3, #15
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2240      	movs	r2, #64	@ 0x40
 80029cc:	4013      	ands	r3, r2
 80029ce:	d12c      	bne.n	8002a2a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2180      	movs	r1, #128	@ 0x80
 80029dc:	430a      	orrs	r2, r1
 80029de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80029e0:	f7fe f9f6 	bl	8000dd0 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80029e8:	e014      	b.n	8002a14 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80029ea:	f7fe f9f1 	bl	8000dd0 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	1ad2      	subs	r2, r2, r3
 80029f4:	200f      	movs	r0, #15
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	1839      	adds	r1, r7, r0
 80029fa:	7809      	ldrb	r1, [r1, #0]
 80029fc:	7019      	strb	r1, [r3, #0]
 80029fe:	23fa      	movs	r3, #250	@ 0xfa
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d906      	bls.n	8002a14 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	2203      	movs	r2, #3
 8002a0a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2229      	movs	r2, #41	@ 0x29
 8002a10:	2103      	movs	r1, #3
 8002a12:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2240      	movs	r2, #64	@ 0x40
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d104      	bne.n	8002a2a <RTC_EnterInitMode+0x76>
 8002a20:	230f      	movs	r3, #15
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d1df      	bne.n	80029ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a2a:	230f      	movs	r3, #15
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	240f      	movs	r4, #15
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002a48:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <RTC_ExitInitMode+0x84>)
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <RTC_ExitInitMode+0x84>)
 8002a4e:	2180      	movs	r1, #128	@ 0x80
 8002a50:	438a      	bics	r2, r1
 8002a52:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <RTC_ExitInitMode+0x84>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff ff81 	bl	8002968 <HAL_RTC_WaitForSynchro>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d021      	beq.n	8002aae <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2229      	movs	r2, #41	@ 0x29
 8002a6e:	2103      	movs	r1, #3
 8002a70:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	2203      	movs	r2, #3
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e019      	b.n	8002aae <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <RTC_ExitInitMode+0x84>)
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <RTC_ExitInitMode+0x84>)
 8002a80:	2120      	movs	r1, #32
 8002a82:	438a      	bics	r2, r1
 8002a84:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ff6d 	bl	8002968 <HAL_RTC_WaitForSynchro>
 8002a8e:	1e03      	subs	r3, r0, #0
 8002a90:	d007      	beq.n	8002aa2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2229      	movs	r2, #41	@ 0x29
 8002a96:	2103      	movs	r1, #3
 8002a98:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002a9a:	230f      	movs	r3, #15
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <RTC_ExitInitMode+0x84>)
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <RTC_ExitInitMode+0x84>)
 8002aa8:	2120      	movs	r1, #32
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002aae:	230f      	movs	r3, #15
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b005      	add	sp, #20
 8002aba:	bd90      	pop	{r4, r7, pc}
 8002abc:	40002800 	.word	0x40002800

08002ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0a8      	b.n	8002c24 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	2382      	movs	r3, #130	@ 0x82
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d009      	beq.n	8002afa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	61da      	str	r2, [r3, #28]
 8002aec:	e005      	b.n	8002afa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	225d      	movs	r2, #93	@ 0x5d
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	225c      	movs	r2, #92	@ 0x5c
 8002b10:	2100      	movs	r1, #0
 8002b12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fd ff80 	bl	8000a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	225d      	movs	r2, #93	@ 0x5d
 8002b20:	2102      	movs	r1, #2
 8002b22:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2140      	movs	r1, #64	@ 0x40
 8002b30:	438a      	bics	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	23e0      	movs	r3, #224	@ 0xe0
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d902      	bls.n	8002b46 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e002      	b.n	8002b4c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	015b      	lsls	r3, r3, #5
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	23f0      	movs	r3, #240	@ 0xf0
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d008      	beq.n	8002b6a <HAL_SPI_Init+0xaa>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	23e0      	movs	r3, #224	@ 0xe0
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d002      	beq.n	8002b6a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	2382      	movs	r3, #130	@ 0x82
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	2384      	movs	r3, #132	@ 0x84
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2102      	movs	r1, #2
 8002b86:	400b      	ands	r3, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	400b      	ands	r3, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6999      	ldr	r1, [r3, #24]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2138      	movs	r1, #56	@ 0x38
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	2180      	movs	r1, #128	@ 0x80
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	0011      	movs	r1, r2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	2204      	movs	r2, #4
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	400b      	ands	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be0:	2108      	movs	r1, #8
 8002be2:	400b      	ands	r3, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	23f0      	movs	r3, #240	@ 0xf0
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	400b      	ands	r3, r1
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	015b      	lsls	r3, r3, #5
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4907      	ldr	r1, [pc, #28]	@ (8002c2c <HAL_SPI_Init+0x16c>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	225d      	movs	r2, #93	@ 0x5d
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	fffff7ff 	.word	0xfffff7ff

08002c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e04a      	b.n	8002cd8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223d      	movs	r2, #61	@ 0x3d
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223c      	movs	r2, #60	@ 0x3c
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7fd ff29 	bl	8000ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	223d      	movs	r2, #61	@ 0x3d
 8002c62:	2102      	movs	r1, #2
 8002c64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	0019      	movs	r1, r3
 8002c70:	0010      	movs	r0, r2
 8002c72:	f000 fa0d 	bl	8003090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2248      	movs	r2, #72	@ 0x48
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223e      	movs	r2, #62	@ 0x3e
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223f      	movs	r2, #63	@ 0x3f
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2240      	movs	r2, #64	@ 0x40
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2241      	movs	r2, #65	@ 0x41
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2242      	movs	r2, #66	@ 0x42
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2243      	movs	r2, #67	@ 0x43
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2244      	movs	r2, #68	@ 0x44
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2245      	movs	r2, #69	@ 0x45
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2246      	movs	r2, #70	@ 0x46
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2247      	movs	r2, #71	@ 0x47
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	223d      	movs	r2, #61	@ 0x3d
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d108      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x22>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	223e      	movs	r2, #62	@ 0x3e
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	4193      	sbcs	r3, r2
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e037      	b.n	8002d72 <HAL_TIM_PWM_Start+0x92>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d108      	bne.n	8002d1a <HAL_TIM_PWM_Start+0x3a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	223f      	movs	r2, #63	@ 0x3f
 8002d0c:	5c9b      	ldrb	r3, [r3, r2]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	1e5a      	subs	r2, r3, #1
 8002d14:	4193      	sbcs	r3, r2
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e02b      	b.n	8002d72 <HAL_TIM_PWM_Start+0x92>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d108      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x52>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2240      	movs	r2, #64	@ 0x40
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	4193      	sbcs	r3, r2
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e01f      	b.n	8002d72 <HAL_TIM_PWM_Start+0x92>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	d108      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x6a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2241      	movs	r2, #65	@ 0x41
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	1e5a      	subs	r2, r3, #1
 8002d44:	4193      	sbcs	r3, r2
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_PWM_Start+0x92>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d108      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x82>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2242      	movs	r2, #66	@ 0x42
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	1e5a      	subs	r2, r3, #1
 8002d5c:	4193      	sbcs	r3, r2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e007      	b.n	8002d72 <HAL_TIM_PWM_Start+0x92>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2243      	movs	r2, #67	@ 0x43
 8002d66:	5c9b      	ldrb	r3, [r3, r2]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	4193      	sbcs	r3, r2
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07b      	b.n	8002e72 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_PWM_Start+0xaa>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	223e      	movs	r2, #62	@ 0x3e
 8002d84:	2102      	movs	r1, #2
 8002d86:	5499      	strb	r1, [r3, r2]
 8002d88:	e023      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xf2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start+0xba>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	223f      	movs	r2, #63	@ 0x3f
 8002d94:	2102      	movs	r1, #2
 8002d96:	5499      	strb	r1, [r3, r2]
 8002d98:	e01b      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xf2>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_PWM_Start+0xca>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2240      	movs	r2, #64	@ 0x40
 8002da4:	2102      	movs	r1, #2
 8002da6:	5499      	strb	r1, [r3, r2]
 8002da8:	e013      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xf2>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start+0xda>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2241      	movs	r2, #65	@ 0x41
 8002db4:	2102      	movs	r1, #2
 8002db6:	5499      	strb	r1, [r3, r2]
 8002db8:	e00b      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xf2>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0xea>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2242      	movs	r2, #66	@ 0x42
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	5499      	strb	r1, [r3, r2]
 8002dc8:	e003      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xf2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2243      	movs	r2, #67	@ 0x43
 8002dce:	2102      	movs	r1, #2
 8002dd0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 fc6e 	bl	80036bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	@ (8002e7c <HAL_TIM_PWM_Start+0x19c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_TIM_PWM_Start+0x11e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a24      	ldr	r2, [pc, #144]	@ (8002e80 <HAL_TIM_PWM_Start+0x1a0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_TIM_PWM_Start+0x11e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <HAL_TIM_PWM_Start+0x1a4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_PWM_Start+0x122>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_TIM_PWM_Start+0x124>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2180      	movs	r1, #128	@ 0x80
 8002e14:	0209      	lsls	r1, r1, #8
 8002e16:	430a      	orrs	r2, r1
 8002e18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <HAL_TIM_PWM_Start+0x19c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x14e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a17      	ldr	r2, [pc, #92]	@ (8002e88 <HAL_TIM_PWM_Start+0x1a8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d116      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a15      	ldr	r2, [pc, #84]	@ (8002e8c <HAL_TIM_PWM_Start+0x1ac>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d016      	beq.n	8002e6e <HAL_TIM_PWM_Start+0x18e>
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	025b      	lsls	r3, r3, #9
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d011      	beq.n	8002e6e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	e008      	b.n	8002e6e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e000      	b.n	8002e70 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	00010007 	.word	0x00010007

08002e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	2317      	movs	r3, #23
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	223c      	movs	r2, #60	@ 0x3c
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e0e5      	b.n	800307e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	223c      	movs	r2, #60	@ 0x3c
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b14      	cmp	r3, #20
 8002ebe:	d900      	bls.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ec0:	e0d1      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	4b70      	ldr	r3, [pc, #448]	@ (8003088 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002ec8:	18d3      	adds	r3, r2, r3
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 f954 	bl	8003184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2104      	movs	r1, #4
 8002ef8:	438a      	bics	r2, r1
 8002efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6999      	ldr	r1, [r3, #24]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	619a      	str	r2, [r3, #24]
      break;
 8002f0e:	e0af      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	0011      	movs	r1, r2
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 f9b3 	bl	8003284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2180      	movs	r1, #128	@ 0x80
 8002f2a:	0109      	lsls	r1, r1, #4
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4954      	ldr	r1, [pc, #336]	@ (800308c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	619a      	str	r2, [r3, #24]
      break;
 8002f54:	e08c      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 fa0e 	bl	8003380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2108      	movs	r1, #8
 8002f70:	430a      	orrs	r2, r1
 8002f72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2104      	movs	r1, #4
 8002f80:	438a      	bics	r2, r1
 8002f82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69d9      	ldr	r1, [r3, #28]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	61da      	str	r2, [r3, #28]
      break;
 8002f96:	e06b      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fa6f 	bl	8003484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2180      	movs	r1, #128	@ 0x80
 8002fb2:	0109      	lsls	r1, r1, #4
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4932      	ldr	r1, [pc, #200]	@ (800308c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69d9      	ldr	r1, [r3, #28]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	61da      	str	r2, [r3, #28]
      break;
 8002fdc:	e048      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	0011      	movs	r1, r2
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 fab0 	bl	800354c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2108      	movs	r1, #8
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2104      	movs	r1, #4
 8003008:	438a      	bics	r2, r1
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800301e:	e027      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	0011      	movs	r1, r2
 8003028:	0018      	movs	r0, r3
 800302a:	f000 fae9 	bl	8003600 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2180      	movs	r1, #128	@ 0x80
 800303a:	0109      	lsls	r1, r1, #4
 800303c:	430a      	orrs	r2, r1
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4910      	ldr	r1, [pc, #64]	@ (800308c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800304c:	400a      	ands	r2, r1
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	021a      	lsls	r2, r3, #8
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003064:	e004      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003066:	2317      	movs	r3, #23
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
      break;
 800306e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	223c      	movs	r2, #60	@ 0x3c
 8003074:	2100      	movs	r1, #0
 8003076:	5499      	strb	r1, [r3, r2]

  return status;
 8003078:	2317      	movs	r3, #23
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	781b      	ldrb	r3, [r3, #0]
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b006      	add	sp, #24
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	080041b8 	.word	0x080041b8
 800308c:	fffffbff 	.word	0xfffffbff

08003090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a32      	ldr	r2, [pc, #200]	@ (800316c <TIM_Base_SetConfig+0xdc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0x20>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a31      	ldr	r2, [pc, #196]	@ (8003170 <TIM_Base_SetConfig+0xe0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d108      	bne.n	80030c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2270      	movs	r2, #112	@ 0x70
 80030b4:	4393      	bics	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a29      	ldr	r2, [pc, #164]	@ (800316c <TIM_Base_SetConfig+0xdc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00f      	beq.n	80030ea <TIM_Base_SetConfig+0x5a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <TIM_Base_SetConfig+0xe0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00b      	beq.n	80030ea <TIM_Base_SetConfig+0x5a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <TIM_Base_SetConfig+0xe4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <TIM_Base_SetConfig+0x5a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a26      	ldr	r2, [pc, #152]	@ (8003178 <TIM_Base_SetConfig+0xe8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <TIM_Base_SetConfig+0x5a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a25      	ldr	r2, [pc, #148]	@ (800317c <TIM_Base_SetConfig+0xec>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d108      	bne.n	80030fc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a24      	ldr	r2, [pc, #144]	@ (8003180 <TIM_Base_SetConfig+0xf0>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2280      	movs	r2, #128	@ 0x80
 8003100:	4393      	bics	r3, r2
 8003102:	001a      	movs	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a11      	ldr	r2, [pc, #68]	@ (800316c <TIM_Base_SetConfig+0xdc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_Base_SetConfig+0xaa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a12      	ldr	r2, [pc, #72]	@ (8003178 <TIM_Base_SetConfig+0xe8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_Base_SetConfig+0xaa>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a11      	ldr	r2, [pc, #68]	@ (800317c <TIM_Base_SetConfig+0xec>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d103      	bne.n	8003142 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2201      	movs	r2, #1
 800315a:	4393      	bics	r3, r2
 800315c:	001a      	movs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]
  }
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40002000 	.word	0x40002000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800
 8003180:	fffffcff 	.word	0xfffffcff

08003184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2201      	movs	r2, #1
 800319a:	4393      	bics	r3, r2
 800319c:	001a      	movs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a2e      	ldr	r2, [pc, #184]	@ (800326c <TIM_OC1_SetConfig+0xe8>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2203      	movs	r2, #3
 80031ba:	4393      	bics	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2202      	movs	r2, #2
 80031cc:	4393      	bics	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a24      	ldr	r2, [pc, #144]	@ (8003270 <TIM_OC1_SetConfig+0xec>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_OC1_SetConfig+0x6e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a23      	ldr	r2, [pc, #140]	@ (8003274 <TIM_OC1_SetConfig+0xf0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_OC1_SetConfig+0x6e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a22      	ldr	r2, [pc, #136]	@ (8003278 <TIM_OC1_SetConfig+0xf4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10c      	bne.n	800320c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2208      	movs	r2, #8
 80031f6:	4393      	bics	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2204      	movs	r2, #4
 8003208:	4393      	bics	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <TIM_OC1_SetConfig+0xec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_OC1_SetConfig+0xa0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a17      	ldr	r2, [pc, #92]	@ (8003274 <TIM_OC1_SetConfig+0xf0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_OC1_SetConfig+0xa0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <TIM_OC1_SetConfig+0xf4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d111      	bne.n	8003248 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4a15      	ldr	r2, [pc, #84]	@ (800327c <TIM_OC1_SetConfig+0xf8>)
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4a14      	ldr	r2, [pc, #80]	@ (8003280 <TIM_OC1_SetConfig+0xfc>)
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b006      	add	sp, #24
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	fffeff8f 	.word	0xfffeff8f
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800
 800327c:	fffffeff 	.word	0xfffffeff
 8003280:	fffffdff 	.word	0xfffffdff

08003284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	2210      	movs	r2, #16
 800329a:	4393      	bics	r3, r2
 800329c:	001a      	movs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003364 <TIM_OC2_SetConfig+0xe0>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003368 <TIM_OC2_SetConfig+0xe4>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2220      	movs	r2, #32
 80032ce:	4393      	bics	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a22      	ldr	r2, [pc, #136]	@ (800336c <TIM_OC2_SetConfig+0xe8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d10d      	bne.n	8003302 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	4393      	bics	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2240      	movs	r2, #64	@ 0x40
 80032fe:	4393      	bics	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a19      	ldr	r2, [pc, #100]	@ (800336c <TIM_OC2_SetConfig+0xe8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <TIM_OC2_SetConfig+0x96>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a18      	ldr	r2, [pc, #96]	@ (8003370 <TIM_OC2_SetConfig+0xec>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_OC2_SetConfig+0x96>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <TIM_OC2_SetConfig+0xf0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d113      	bne.n	8003342 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <TIM_OC2_SetConfig+0xf4>)
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4a15      	ldr	r2, [pc, #84]	@ (800337c <TIM_OC2_SetConfig+0xf8>)
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b006      	add	sp, #24
 8003362:	bd80      	pop	{r7, pc}
 8003364:	feff8fff 	.word	0xfeff8fff
 8003368:	fffffcff 	.word	0xfffffcff
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800
 8003378:	fffffbff 	.word	0xfffffbff
 800337c:	fffff7ff 	.word	0xfffff7ff

08003380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a31      	ldr	r2, [pc, #196]	@ (800345c <TIM_OC3_SetConfig+0xdc>)
 8003396:	401a      	ands	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003460 <TIM_OC3_SetConfig+0xe0>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2203      	movs	r2, #3
 80033b4:	4393      	bics	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4a27      	ldr	r2, [pc, #156]	@ (8003464 <TIM_OC3_SetConfig+0xe4>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <TIM_OC3_SetConfig+0xe8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10d      	bne.n	80033fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	4a22      	ldr	r2, [pc, #136]	@ (800346c <TIM_OC3_SetConfig+0xec>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <TIM_OC3_SetConfig+0xf0>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003468 <TIM_OC3_SetConfig+0xe8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <TIM_OC3_SetConfig+0x92>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1b      	ldr	r2, [pc, #108]	@ (8003474 <TIM_OC3_SetConfig+0xf4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_OC3_SetConfig+0x92>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1a      	ldr	r2, [pc, #104]	@ (8003478 <TIM_OC3_SetConfig+0xf8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d113      	bne.n	800343a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4a19      	ldr	r2, [pc, #100]	@ (800347c <TIM_OC3_SetConfig+0xfc>)
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <TIM_OC3_SetConfig+0x100>)
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b006      	add	sp, #24
 800345a:	bd80      	pop	{r7, pc}
 800345c:	fffffeff 	.word	0xfffffeff
 8003460:	fffeff8f 	.word	0xfffeff8f
 8003464:	fffffdff 	.word	0xfffffdff
 8003468:	40012c00 	.word	0x40012c00
 800346c:	fffff7ff 	.word	0xfffff7ff
 8003470:	fffffbff 	.word	0xfffffbff
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	ffffefff 	.word	0xffffefff
 8003480:	ffffdfff 	.word	0xffffdfff

08003484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4a24      	ldr	r2, [pc, #144]	@ (800352c <TIM_OC4_SetConfig+0xa8>)
 800349a:	401a      	ands	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a20      	ldr	r2, [pc, #128]	@ (8003530 <TIM_OC4_SetConfig+0xac>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <TIM_OC4_SetConfig+0xb0>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003538 <TIM_OC4_SetConfig+0xb4>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	031b      	lsls	r3, r3, #12
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a17      	ldr	r2, [pc, #92]	@ (800353c <TIM_OC4_SetConfig+0xb8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_OC4_SetConfig+0x70>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a16      	ldr	r2, [pc, #88]	@ (8003540 <TIM_OC4_SetConfig+0xbc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC4_SetConfig+0x70>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a15      	ldr	r2, [pc, #84]	@ (8003544 <TIM_OC4_SetConfig+0xc0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d109      	bne.n	8003508 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <TIM_OC4_SetConfig+0xc4>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b006      	add	sp, #24
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	ffffefff 	.word	0xffffefff
 8003530:	feff8fff 	.word	0xfeff8fff
 8003534:	fffffcff 	.word	0xfffffcff
 8003538:	ffffdfff 	.word	0xffffdfff
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40014400 	.word	0x40014400
 8003544:	40014800 	.word	0x40014800
 8003548:	ffffbfff 	.word	0xffffbfff

0800354c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a21      	ldr	r2, [pc, #132]	@ (80035e8 <TIM_OC5_SetConfig+0x9c>)
 8003562:	401a      	ands	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <TIM_OC5_SetConfig+0xa0>)
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <TIM_OC5_SetConfig+0xa4>)
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a15      	ldr	r2, [pc, #84]	@ (80035f4 <TIM_OC5_SetConfig+0xa8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <TIM_OC5_SetConfig+0x66>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <TIM_OC5_SetConfig+0xac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC5_SetConfig+0x66>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a13      	ldr	r2, [pc, #76]	@ (80035fc <TIM_OC5_SetConfig+0xb0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d109      	bne.n	80035c6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <TIM_OC5_SetConfig+0x9c>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b006      	add	sp, #24
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	fffeffff 	.word	0xfffeffff
 80035ec:	fffeff8f 	.word	0xfffeff8f
 80035f0:	fffdffff 	.word	0xfffdffff
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800

08003600 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a22      	ldr	r2, [pc, #136]	@ (80036a0 <TIM_OC6_SetConfig+0xa0>)
 8003616:	401a      	ands	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a1e      	ldr	r2, [pc, #120]	@ (80036a4 <TIM_OC6_SetConfig+0xa4>)
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <TIM_OC6_SetConfig+0xa8>)
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <TIM_OC6_SetConfig+0xac>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <TIM_OC6_SetConfig+0x68>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a15      	ldr	r2, [pc, #84]	@ (80036b0 <TIM_OC6_SetConfig+0xb0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_OC6_SetConfig+0x68>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a14      	ldr	r2, [pc, #80]	@ (80036b4 <TIM_OC6_SetConfig+0xb4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d109      	bne.n	800367c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4a13      	ldr	r2, [pc, #76]	@ (80036b8 <TIM_OC6_SetConfig+0xb8>)
 800366c:	4013      	ands	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	029b      	lsls	r3, r3, #10
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b006      	add	sp, #24
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	ffefffff 	.word	0xffefffff
 80036a4:	feff8fff 	.word	0xfeff8fff
 80036a8:	ffdfffff 	.word	0xffdfffff
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	fffbffff 	.word	0xfffbffff

080036bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	221f      	movs	r2, #31
 80036cc:	4013      	ands	r3, r2
 80036ce:	2201      	movs	r2, #1
 80036d0:	409a      	lsls	r2, r3
 80036d2:	0013      	movs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	43d2      	mvns	r2, r2
 80036de:	401a      	ands	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	211f      	movs	r1, #31
 80036ec:	400b      	ands	r3, r1
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4099      	lsls	r1, r3
 80036f2:	000b      	movs	r3, r1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b006      	add	sp, #24
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	223c      	movs	r2, #60	@ 0x3c
 8003712:	5c9b      	ldrb	r3, [r3, r2]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003718:	2302      	movs	r3, #2
 800371a:	e04a      	b.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	223c      	movs	r2, #60	@ 0x3c
 8003720:	2101      	movs	r1, #1
 8003722:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	223d      	movs	r2, #61	@ 0x3d
 8003728:	2102      	movs	r1, #2
 800372a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1e      	ldr	r2, [pc, #120]	@ (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d108      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800374a:	4013      	ands	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2270      	movs	r2, #112	@ 0x70
 800375c:	4393      	bics	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a11      	ldr	r2, [pc, #68]	@ (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a10      	ldr	r2, [pc, #64]	@ (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10c      	bne.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2280      	movs	r2, #128	@ 0x80
 800378a:	4393      	bics	r3, r2
 800378c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	4313      	orrs	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	223d      	movs	r2, #61	@ 0x3d
 80037a4:	2101      	movs	r1, #1
 80037a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	223c      	movs	r2, #60	@ 0x3c
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	ff0fffff 	.word	0xff0fffff
 80037c4:	40000400 	.word	0x40000400

080037c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	223c      	movs	r2, #60	@ 0x3c
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e06f      	b.n	80038c4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	223c      	movs	r2, #60	@ 0x3c
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	22ff      	movs	r2, #255	@ 0xff
 80037f0:	4393      	bics	r3, r2
 80037f2:	001a      	movs	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003800:	401a      	ands	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a30      	ldr	r2, [pc, #192]	@ (80038d0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800380e:	401a      	ands	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a2e      	ldr	r2, [pc, #184]	@ (80038d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800381c:	401a      	ands	r2, r3
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a2b      	ldr	r2, [pc, #172]	@ (80038d8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800382a:	401a      	ands	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a29      	ldr	r2, [pc, #164]	@ (80038dc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003838:	401a      	ands	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a26      	ldr	r2, [pc, #152]	@ (80038e0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003846:	401a      	ands	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a24      	ldr	r2, [pc, #144]	@ (80038e4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003854:	401a      	ands	r2, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a21      	ldr	r2, [pc, #132]	@ (80038e8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003864:	401a      	ands	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1e      	ldr	r2, [pc, #120]	@ (80038ec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d11c      	bne.n	80038b2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a1d      	ldr	r2, [pc, #116]	@ (80038f0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800387c:	401a      	ands	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	051b      	lsls	r3, r3, #20
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a1a      	ldr	r2, [pc, #104]	@ (80038f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800388c:	401a      	ands	r2, r3
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a17      	ldr	r2, [pc, #92]	@ (80038f8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800389a:	401a      	ands	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a15      	ldr	r2, [pc, #84]	@ (80038fc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80038a8:	401a      	ands	r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223c      	movs	r2, #60	@ 0x3c
 80038be:	2100      	movs	r1, #0
 80038c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b004      	add	sp, #16
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	fffffcff 	.word	0xfffffcff
 80038d0:	fffffbff 	.word	0xfffffbff
 80038d4:	fffff7ff 	.word	0xfffff7ff
 80038d8:	ffffefff 	.word	0xffffefff
 80038dc:	ffffdfff 	.word	0xffffdfff
 80038e0:	ffffbfff 	.word	0xffffbfff
 80038e4:	fff0ffff 	.word	0xfff0ffff
 80038e8:	efffffff 	.word	0xefffffff
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	ff0fffff 	.word	0xff0fffff
 80038f4:	feffffff 	.word	0xfeffffff
 80038f8:	fdffffff 	.word	0xfdffffff
 80038fc:	dfffffff 	.word	0xdfffffff

08003900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e046      	b.n	80039a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2288      	movs	r2, #136	@ 0x88
 8003916:	589b      	ldr	r3, [r3, r2]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2284      	movs	r2, #132	@ 0x84
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0018      	movs	r0, r3
 8003928:	f7fd f942 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2288      	movs	r2, #136	@ 0x88
 8003930:	2124      	movs	r1, #36	@ 0x24
 8003932:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f996 	bl	8003c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f828 	bl	80039ac <UART_SetConfig>
 800395c:	0003      	movs	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e01c      	b.n	80039a0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	490d      	ldr	r1, [pc, #52]	@ (80039a8 <HAL_UART_Init+0xa8>)
 8003972:	400a      	ands	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	212a      	movs	r1, #42	@ 0x2a
 8003982:	438a      	bics	r2, r1
 8003984:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 fa25 	bl	8003de8 <UART_CheckIdleState>
 800399e:	0003      	movs	r3, r0
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	ffffb7ff 	.word	0xffffb7ff

080039ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039b4:	231a      	movs	r3, #26
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4aa1      	ldr	r2, [pc, #644]	@ (8003c60 <UART_SetConfig+0x2b4>)
 80039dc:	4013      	ands	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a9c      	ldr	r2, [pc, #624]	@ (8003c64 <UART_SetConfig+0x2b8>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a93      	ldr	r2, [pc, #588]	@ (8003c68 <UART_SetConfig+0x2bc>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	220f      	movs	r2, #15
 8003a30:	4393      	bics	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a89      	ldr	r2, [pc, #548]	@ (8003c6c <UART_SetConfig+0x2c0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d127      	bne.n	8003a9a <UART_SetConfig+0xee>
 8003a4a:	4b89      	ldr	r3, [pc, #548]	@ (8003c70 <UART_SetConfig+0x2c4>)
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	2203      	movs	r2, #3
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d017      	beq.n	8003a86 <UART_SetConfig+0xda>
 8003a56:	d81b      	bhi.n	8003a90 <UART_SetConfig+0xe4>
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d00a      	beq.n	8003a72 <UART_SetConfig+0xc6>
 8003a5c:	d818      	bhi.n	8003a90 <UART_SetConfig+0xe4>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <UART_SetConfig+0xbc>
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d00a      	beq.n	8003a7c <UART_SetConfig+0xd0>
 8003a66:	e013      	b.n	8003a90 <UART_SetConfig+0xe4>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e021      	b.n	8003ab6 <UART_SetConfig+0x10a>
 8003a72:	231b      	movs	r3, #27
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	e01c      	b.n	8003ab6 <UART_SetConfig+0x10a>
 8003a7c:	231b      	movs	r3, #27
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	2204      	movs	r2, #4
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e017      	b.n	8003ab6 <UART_SetConfig+0x10a>
 8003a86:	231b      	movs	r3, #27
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e012      	b.n	8003ab6 <UART_SetConfig+0x10a>
 8003a90:	231b      	movs	r3, #27
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2210      	movs	r2, #16
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	e00d      	b.n	8003ab6 <UART_SetConfig+0x10a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	@ (8003c74 <UART_SetConfig+0x2c8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d104      	bne.n	8003aae <UART_SetConfig+0x102>
 8003aa4:	231b      	movs	r3, #27
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e003      	b.n	8003ab6 <UART_SetConfig+0x10a>
 8003aae:	231b      	movs	r3, #27
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	2380      	movs	r3, #128	@ 0x80
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d000      	beq.n	8003ac4 <UART_SetConfig+0x118>
 8003ac2:	e065      	b.n	8003b90 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003ac4:	231b      	movs	r3, #27
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d015      	beq.n	8003afa <UART_SetConfig+0x14e>
 8003ace:	dc18      	bgt.n	8003b02 <UART_SetConfig+0x156>
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d00d      	beq.n	8003af0 <UART_SetConfig+0x144>
 8003ad4:	dc15      	bgt.n	8003b02 <UART_SetConfig+0x156>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <UART_SetConfig+0x134>
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d005      	beq.n	8003aea <UART_SetConfig+0x13e>
 8003ade:	e010      	b.n	8003b02 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7fe fd64 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	617b      	str	r3, [r7, #20]
        break;
 8003ae8:	e012      	b.n	8003b10 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aea:	4b63      	ldr	r3, [pc, #396]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003aec:	617b      	str	r3, [r7, #20]
        break;
 8003aee:	e00f      	b.n	8003b10 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af0:	f7fe fcd0 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003af4:	0003      	movs	r3, r0
 8003af6:	617b      	str	r3, [r7, #20]
        break;
 8003af8:	e00a      	b.n	8003b10 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afa:	2380      	movs	r3, #128	@ 0x80
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	617b      	str	r3, [r7, #20]
        break;
 8003b00:	e006      	b.n	8003b10 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b06:	231a      	movs	r3, #26
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
        break;
 8003b0e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d100      	bne.n	8003b18 <UART_SetConfig+0x16c>
 8003b16:	e08d      	b.n	8003c34 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b1c:	4b57      	ldr	r3, [pc, #348]	@ (8003c7c <UART_SetConfig+0x2d0>)
 8003b1e:	0052      	lsls	r2, r2, #1
 8003b20:	5ad3      	ldrh	r3, [r2, r3]
 8003b22:	0019      	movs	r1, r3
 8003b24:	6978      	ldr	r0, [r7, #20]
 8003b26:	f7fc faeb 	bl	8000100 <__udivsi3>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	005a      	lsls	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	18d2      	adds	r2, r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	f7fc fadf 	bl	8000100 <__udivsi3>
 8003b42:	0003      	movs	r3, r0
 8003b44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d91c      	bls.n	8003b86 <UART_SetConfig+0x1da>
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	2380      	movs	r3, #128	@ 0x80
 8003b50:	025b      	lsls	r3, r3, #9
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d217      	bcs.n	8003b86 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	200e      	movs	r0, #14
 8003b5c:	183b      	adds	r3, r7, r0
 8003b5e:	210f      	movs	r1, #15
 8003b60:	438a      	bics	r2, r1
 8003b62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b299      	uxth	r1, r3
 8003b70:	183b      	adds	r3, r7, r0
 8003b72:	183a      	adds	r2, r7, r0
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	183a      	adds	r2, r7, r0
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	60da      	str	r2, [r3, #12]
 8003b84:	e056      	b.n	8003c34 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003b86:	231a      	movs	r3, #26
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e051      	b.n	8003c34 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b90:	231b      	movs	r3, #27
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d015      	beq.n	8003bc6 <UART_SetConfig+0x21a>
 8003b9a:	dc18      	bgt.n	8003bce <UART_SetConfig+0x222>
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00d      	beq.n	8003bbc <UART_SetConfig+0x210>
 8003ba0:	dc15      	bgt.n	8003bce <UART_SetConfig+0x222>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <UART_SetConfig+0x200>
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d005      	beq.n	8003bb6 <UART_SetConfig+0x20a>
 8003baa:	e010      	b.n	8003bce <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe fcfe 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	617b      	str	r3, [r7, #20]
        break;
 8003bb4:	e012      	b.n	8003bdc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb6:	4b30      	ldr	r3, [pc, #192]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003bb8:	617b      	str	r3, [r7, #20]
        break;
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbc:	f7fe fc6a 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	617b      	str	r3, [r7, #20]
        break;
 8003bc4:	e00a      	b.n	8003bdc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	2380      	movs	r3, #128	@ 0x80
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	617b      	str	r3, [r7, #20]
        break;
 8003bcc:	e006      	b.n	8003bdc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bd2:	231a      	movs	r3, #26
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
        break;
 8003bda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d028      	beq.n	8003c34 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003be6:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <UART_SetConfig+0x2d0>)
 8003be8:	0052      	lsls	r2, r2, #1
 8003bea:	5ad3      	ldrh	r3, [r2, r3]
 8003bec:	0019      	movs	r1, r3
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7fc fa86 	bl	8000100 <__udivsi3>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	18d2      	adds	r2, r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0019      	movs	r1, r3
 8003c06:	0010      	movs	r0, r2
 8003c08:	f7fc fa7a 	bl	8000100 <__udivsi3>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	d90a      	bls.n	8003c2c <UART_SetConfig+0x280>
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	025b      	lsls	r3, r3, #9
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d205      	bcs.n	8003c2c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e003      	b.n	8003c34 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2c:	231a      	movs	r3, #26
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	226a      	movs	r2, #106	@ 0x6a
 8003c38:	2101      	movs	r1, #1
 8003c3a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2268      	movs	r2, #104	@ 0x68
 8003c40:	2101      	movs	r1, #1
 8003c42:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c50:	231a      	movs	r3, #26
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b008      	add	sp, #32
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	cfff69f3 	.word	0xcfff69f3
 8003c64:	ffffcfff 	.word	0xffffcfff
 8003c68:	11fff4ff 	.word	0x11fff4ff
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40004400 	.word	0x40004400
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	0800420c 	.word	0x0800420c

08003c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d00b      	beq.n	8003caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a4a      	ldr	r2, [pc, #296]	@ (8003dc4 <UART_AdvFeatureConfig+0x144>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4a43      	ldr	r2, [pc, #268]	@ (8003dc8 <UART_AdvFeatureConfig+0x148>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dcc <UART_AdvFeatureConfig+0x14c>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4a34      	ldr	r2, [pc, #208]	@ (8003dd0 <UART_AdvFeatureConfig+0x150>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	2210      	movs	r2, #16
 8003d16:	4013      	ands	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd4 <UART_AdvFeatureConfig+0x154>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	2220      	movs	r2, #32
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d00b      	beq.n	8003d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	4a25      	ldr	r2, [pc, #148]	@ (8003dd8 <UART_AdvFeatureConfig+0x158>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	2240      	movs	r2, #64	@ 0x40
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	@ (8003ddc <UART_AdvFeatureConfig+0x15c>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	035b      	lsls	r3, r3, #13
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d10b      	bne.n	8003d9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a15      	ldr	r2, [pc, #84]	@ (8003de0 <UART_AdvFeatureConfig+0x160>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	2280      	movs	r2, #128	@ 0x80
 8003da0:	4013      	ands	r3, r2
 8003da2:	d00b      	beq.n	8003dbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a0e      	ldr	r2, [pc, #56]	@ (8003de4 <UART_AdvFeatureConfig+0x164>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }
}
 8003dbc:	46c0      	nop			@ (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	ffff7fff 	.word	0xffff7fff
 8003dc8:	fffdffff 	.word	0xfffdffff
 8003dcc:	fffeffff 	.word	0xfffeffff
 8003dd0:	fffbffff 	.word	0xfffbffff
 8003dd4:	ffffefff 	.word	0xffffefff
 8003dd8:	ffffdfff 	.word	0xffffdfff
 8003ddc:	ffefffff 	.word	0xffefffff
 8003de0:	ff9fffff 	.word	0xff9fffff
 8003de4:	fff7ffff 	.word	0xfff7ffff

08003de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b092      	sub	sp, #72	@ 0x48
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2290      	movs	r2, #144	@ 0x90
 8003df4:	2100      	movs	r1, #0
 8003df6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df8:	f7fc ffea 	bl	8000dd0 <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2208      	movs	r2, #8
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d12d      	bne.n	8003e6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	0391      	lsls	r1, r2, #14
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4a47      	ldr	r2, [pc, #284]	@ (8003f34 <UART_CheckIdleState+0x14c>)
 8003e18:	9200      	str	r2, [sp, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f000 f88e 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003e20:	1e03      	subs	r3, r0, #0
 8003e22:	d022      	beq.n	8003e6a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e24:	f3ef 8310 	mrs	r3, PRIMASK
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e2e:	2301      	movs	r3, #1
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	f383 8810 	msr	PRIMASK, r3
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2180      	movs	r1, #128	@ 0x80
 8003e46:	438a      	bics	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e50:	f383 8810 	msr	PRIMASK, r3
}
 8003e54:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2288      	movs	r2, #136	@ 0x88
 8003e5a:	2120      	movs	r1, #32
 8003e5c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2284      	movs	r2, #132	@ 0x84
 8003e62:	2100      	movs	r1, #0
 8003e64:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e060      	b.n	8003f2c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2204      	movs	r2, #4
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d146      	bne.n	8003f06 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7a:	2280      	movs	r2, #128	@ 0x80
 8003e7c:	03d1      	lsls	r1, r2, #15
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4a2c      	ldr	r2, [pc, #176]	@ (8003f34 <UART_CheckIdleState+0x14c>)
 8003e82:	9200      	str	r2, [sp, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f000 f859 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d03b      	beq.n	8003f06 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e94:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e98:	2301      	movs	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4922      	ldr	r1, [pc, #136]	@ (8003f38 <UART_CheckIdleState+0x150>)
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ec6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f383 8810 	msr	PRIMASK, r3
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	438a      	bics	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	228c      	movs	r2, #140	@ 0x8c
 8003ef6:	2120      	movs	r1, #32
 8003ef8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2284      	movs	r2, #132	@ 0x84
 8003efe:	2100      	movs	r1, #0
 8003f00:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e012      	b.n	8003f2c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2288      	movs	r2, #136	@ 0x88
 8003f0a:	2120      	movs	r1, #32
 8003f0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	228c      	movs	r2, #140	@ 0x8c
 8003f12:	2120      	movs	r1, #32
 8003f14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2284      	movs	r2, #132	@ 0x84
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b010      	add	sp, #64	@ 0x40
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	01ffffff 	.word	0x01ffffff
 8003f38:	fffffedf 	.word	0xfffffedf

08003f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	e051      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3301      	adds	r3, #1
 8003f52:	d04e      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7fc ff3c 	bl	8000dd0 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e051      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2204      	movs	r2, #4
 8003f76:	4013      	ands	r3, r2
 8003f78:	d03b      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b80      	cmp	r3, #128	@ 0x80
 8003f7e:	d038      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d035      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d111      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 f83c 	bl	800401c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2290      	movs	r2, #144	@ 0x90
 8003fa8:	2108      	movs	r1, #8
 8003faa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2284      	movs	r2, #132	@ 0x84
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e02c      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d112      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2280      	movs	r2, #128	@ 0x80
 8003fd2:	0112      	lsls	r2, r2, #4
 8003fd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 f81f 	bl	800401c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2290      	movs	r2, #144	@ 0x90
 8003fe2:	2120      	movs	r1, #32
 8003fe4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2284      	movs	r2, #132	@ 0x84
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e00f      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	425a      	negs	r2, r3
 8004002:	4153      	adcs	r3, r2
 8004004:	b2db      	uxtb	r3, r3
 8004006:	001a      	movs	r2, r3
 8004008:	1dfb      	adds	r3, r7, #7
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d09e      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08e      	sub	sp, #56	@ 0x38
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004024:	f3ef 8310 	mrs	r3, PRIMASK
 8004028:	617b      	str	r3, [r7, #20]
  return(result);
 800402a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
 800402e:	2301      	movs	r3, #1
 8004030:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f383 8810 	msr	PRIMASK, r3
}
 8004038:	46c0      	nop			@ (mov r8, r8)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4926      	ldr	r1, [pc, #152]	@ (80040e0 <UART_EndRxTransfer+0xc4>)
 8004046:	400a      	ands	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004056:	f3ef 8310 	mrs	r3, PRIMASK
 800405a:	623b      	str	r3, [r7, #32]
  return(result);
 800405c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004060:	2301      	movs	r3, #1
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	f383 8810 	msr	PRIMASK, r3
}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	491b      	ldr	r1, [pc, #108]	@ (80040e4 <UART_EndRxTransfer+0xc8>)
 8004078:	400a      	ands	r2, r1
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	f383 8810 	msr	PRIMASK, r3
}
 8004086:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d118      	bne.n	80040c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004090:	f3ef 8310 	mrs	r3, PRIMASK
 8004094:	60bb      	str	r3, [r7, #8]
  return(result);
 8004096:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409a:	2301      	movs	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f383 8810 	msr	PRIMASK, r3
}
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2110      	movs	r1, #16
 80040b2:	438a      	bics	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f383 8810 	msr	PRIMASK, r3
}
 80040c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	228c      	movs	r2, #140	@ 0x8c
 80040c6:	2120      	movs	r1, #32
 80040c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	b00e      	add	sp, #56	@ 0x38
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	fffffedf 	.word	0xfffffedf
 80040e4:	effffffe 	.word	0xeffffffe

080040e8 <memset>:
 80040e8:	0003      	movs	r3, r0
 80040ea:	1882      	adds	r2, r0, r2
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	7019      	strb	r1, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	2600      	movs	r6, #0
 80040fc:	4c0c      	ldr	r4, [pc, #48]	@ (8004130 <__libc_init_array+0x38>)
 80040fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004134 <__libc_init_array+0x3c>)
 8004100:	1b64      	subs	r4, r4, r5
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	42a6      	cmp	r6, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	2600      	movs	r6, #0
 800410a:	f000 f819 	bl	8004140 <_init>
 800410e:	4c0a      	ldr	r4, [pc, #40]	@ (8004138 <__libc_init_array+0x40>)
 8004110:	4d0a      	ldr	r5, [pc, #40]	@ (800413c <__libc_init_array+0x44>)
 8004112:	1b64      	subs	r4, r4, r5
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	42a6      	cmp	r6, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	00b3      	lsls	r3, r6, #2
 800411e:	58eb      	ldr	r3, [r5, r3]
 8004120:	4798      	blx	r3
 8004122:	3601      	adds	r6, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	00b3      	lsls	r3, r6, #2
 8004128:	58eb      	ldr	r3, [r5, r3]
 800412a:	4798      	blx	r3
 800412c:	3601      	adds	r6, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	08004224 	.word	0x08004224
 8004134:	08004224 	.word	0x08004224
 8004138:	08004228 	.word	0x08004228
 800413c:	08004224 	.word	0x08004224

08004140 <_init>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr

0800414c <_fini>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr
